function isEditMode() {
    if (typeof Granite.author !== 'undefined' && typeof Granite.author.editor === 'object') {
        return true;
    }
    if (window.top.location.href.indexOf('/editor.html') >= 0) {
        return true;
    }
    return false;
}
String.prototype.minimize = function () {
    return this.toString().toLowerCase().trim();
};
String.prototype.checksum = function () {
    var chk = 0x12345678;
    var len = this.length;
    for (var i = 0; i < len; i++) {
        chk += (this.charCodeAt(i) * (i + 1));
    }
    return (chk & 0xffffffff).toString(16);
}
String.prototype.getParams = function () {
    var params = {};
    var parser = document.createElement('a');
    parser.href = this;
    var query = parser.search.substring(1);
    var vars = query.split('&');
    for (const varX of vars) {
        var pair = varX.split('=');
        params[pair[0]] = decodeURIComponent(pair[1]);
    }
    return params;
};
String.prototype.getParam = function (param, defaultReturn) {
    const value = this.getParams()[param];
    if (typeof value !== 'undefined') {
        return value;
    }
    return defaultReturn;
};
String.prototype.stripHTML = function () {
    var tmp = document.createElement('div');
    tmp.innerHTML = this;
    return tmp.textContent || tmp.innerText || '';
};
String.prototype.basename = function () {
    return this.substring(this.lastIndexOf('/') + 1);
};
String.prototype.toHHMMSS = function () {
    const sec_num = parseInt(this, 10);
    let hours = Math.floor(sec_num / 3600);
    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    let seconds = sec_num - (hours * 3600) - (minutes * 60);
    if (hours < 10) {
        hours = "0" + hours;
    }
    if (minutes < 10) {
        minutes = "0" + minutes;
    }
    if (seconds < 10) {
        seconds = "0" + seconds;
    }
    return hours + ':' + minutes + ':' + seconds;
}
$.fn.isInViewport = function () {
    if ($(this).length === 0) {
        return false;
    }
    const elementTop = $(this).offset().top;
    const elementBottom = elementTop + $(this).outerHeight();
    const viewportTop = $(window).scrollTop();
    const viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};
let smallScreenGlobal = false;
let mediumScreenGlobal = false;

// Define media queries for small and medium screen sizes
let smallScreenMediaQuery = window.matchMedia('(max-width: 991px)');
let mediumScreenMediaQuery = window.matchMedia('(min-width: 992px) and (max-width: 1199px)');
const notMobileScreenMediaQuery = window.matchMedia('(min-width: 481px) and (max-width: 1199px)');
const onlyMobileScreenMediaQuery = window.matchMedia('(max-width: 480px)');

function smallMediaQueryHandler(mql) {
    if (mql.matches) {
        smallScreenGlobal = true;
    } else {
        smallScreenGlobal = false;
    }
}

function mediumMediaQueryHandler(mql) {
    if (mql.matches) {
        mediumScreenGlobal = true;
    } else {
        mediumScreenGlobal = false;
    }
}

// Attach listeners for media query change
smallScreenMediaQuery.addListener(smallMediaQueryHandler);
mediumScreenMediaQuery.addListener(mediumMediaQueryHandler);

// Run listeners once manually to set initial values
smallMediaQueryHandler(smallScreenMediaQuery);
mediumMediaQueryHandler(mediumScreenMediaQuery);
// Set DataTables to log errors on the console, not alert popup. (Task#23529)
// https://datatables.net/reference/option/DataTable.ext.errMode
$.fn.dataTable.ext.errMode = 'throw';

/**
 * Applies a search term to a datatable and then filters it's contents based on that.
 * @param table The datatable to search.
 * @param search_terms A string to filter by, or an array of strings to filter by. Use an empty
 *                     string to clear the search and return the table to normal.
 * @param currentContext The current jQuery context for the overall component div (e.g. $(this))
 */
const searchDatatable = (table, search_terms = '', currentContext) => {
    if (typeof search_terms === 'string') {
        search_terms = [search_terms];
    }
    // concats each search term into a single string and searches by that
    table.search(
        search_terms.map((search_term) => convertToSearchTerm(search_term))
            .join('')
    ).draw();

    const domPagination = (currentContext instanceof jQuery || typeof currentContext === 'object') ? $(currentContext).find('.dataTables_paginate'):undefined;

    if (domPagination !== undefined) {
        // hide the pagination if there's one page
        if (table.page.info().pages < 1) {
            domPagination.hide();
        } else {
            domPagination.show();
        }
    }
};


/**
 * Turns a string into a valid search term.
 * @param term The string that will be converted.
 * @returns {string}
 */
const convertToSearchTerm = (term) => {
    term = cleanSearchTerm(term);
    if (term) {
        return '(?=.*' + term + ')';
    }

    return term;
};


/**
 * Removes bad characters from a search term.
 * @param term The string to remove characters from.
 * @returns {string}
 */
const cleanSearchTerm = (term) => {
    return term.trim().replace(/\\/g, '\\\\')
        .replace(/\[/g, '\\[')
        .replace(/\//g, '\\/')
        .replace(/\^/g, '\\^')
        .replace(/\./g, '\\.')
        .replace(/\|/g, '\\|')
        .replace(/\?/g, '\\?')
        .replace(/\*/g, '\\*')
        .replace(/\+/g, '\\+')
        .replace(/\(/g, '\\(')
        .replace(/\)/g, '\\)')
        .replace(/\$/g, '\\$');
};


/**
 * Organizes the column headers into different types of columns and returns them in different
 * lists in a single object.
 *
 * @param tableHeader The DOM element with all the column headers.
 * @returns {{dates: [], not_sortables: []}}
 */
function getOrganizedColumns(tableHeader) {
    let columns = {
        dates: [],
        not_sortables: []
    };

    // iterates thru each column and puts it into the correct category.
    tableHeader.each(function (idx, item) {
        if (!$(item).data('sortable-column')) {
            columns.not_sortables.push(idx);
        }

        if ($(item).hasClass('date')) {
            columns.dates.push(idx);
        }
    });

    return columns;
}

/**
 * Gets all the content from a column and returns it sorted and without duplicates.
 *
 * @param table A datatable instance.
 * @param index The column index we are getting.
 * @returns {[]}
 */
const getUniqueColumnData = (table, index) => {
    let options = [];

    // sorts the data from the column at the given index
    if (!isNaN(index) && index >= 0) {
        // Data inside selected column
        options = table
            .columns(index)
            .data()
            .eq(0)
            .unique()
            .toArray()
            .sort();
    }
    return options;
}

/**
 * The dropdown filter will populate with the items in the rightmost column. If that column
 * has nothing in it, the filter will hide.
 *
 * @param table A Datatable.
 * @param domDropDownFilter DOM element of the filter.
 * @param filterColumn The column in the table to populate the filter with.
 * @param defaultOption The text of the very first option in the filter.
 */
const populateDropDownFilter = (table, domDropDownFilter, filterColumn, defaultOption, viewAll) => {
    const options = getUniqueColumnData(table, filterColumn);

    // populate the drop down filter with the above data
    for (let i = 0; i < options.length; i++) {
        domDropDownFilter.append($('<option value="' + options[i] + '">' + options[i] + '</option>'));
    }
    // hide filter if it has 0 options
    if (domDropDownFilter.find('option').length >= 1) {
        domDropDownFilter.show();
        if(viewAll) {
        	domDropDownFilter.prepend('<option value="viewAll" selected>' + viewAll + '</option>');

        } else {
			 domDropDownFilter.prepend('<option value="" selected>' + defaultOption + '</option>');
        }
        
    } else {
        domDropDownFilter.hide();
    }
}

const removePaginationDom = (currentContext) => {
 	currentContext.find('.dataTables_paginate').remove();
    currentContext.find('.dataTables_info').remove();
}
   

/**
 * Bean class to hold page information.
 * 
 * Version 1.0
 * Dependencies: none
 */
class MchpPageInfo {
    static PAGE_HOME = "home";
    static PAGE_GENERIC = "page";
    static PAGE_NOT_A_PAGE = null;
    static PAGE_PRODUCT = "product";
    static PAGE_DEV_TOOL = "development-tool";
    static PAGE_PARAMETRIC_SEARCH = "parametric-search";
    static PAGE_PRODUCT_COMPARASION = "product-comparison";
    static PAGE_DEV_TOOL_SELECTOR = "devtoolselector";
    static PAGE_APPLICATION_NOTE = "application-note";
    static PAGE_IP_CORE_TOOL = "ip-core-tools";
    static PAGE_VIDEO = "videos";
    static PAGE_REFERENCE_DESIGN = "reference-designs";
    static PAGE_PRODUCT_MATERIAL_COMPLIANCE = "product-material-compliance";
    static PAGE_NEW_PRODUCT_MATERIAL_COMPLIANCE = "new-product-material-compliance";
    static PAGE_ROHS = "rohs";
    static PAGE_BLOG = "blog";
    static PAGE_CASE_STUDY = "case-studies";

    // Pages with selectors
    static _pageWithSelector = [
        MchpPageInfo.PAGE_PRODUCT,
        MchpPageInfo.PAGE_DEV_TOOL,
        MchpPageInfo.PAGE_PARAMETRIC_SEARCH,
        MchpPageInfo.PAGE_PRODUCT_COMPARASION,
        MchpPageInfo.PAGE_DEV_TOOL_SELECTOR,
        MchpPageInfo.PAGE_APPLICATION_NOTE,
        MchpPageInfo.PAGE_IP_CORE_TOOL,
        MchpPageInfo.PAGE_VIDEO,
        MchpPageInfo.PAGE_REFERENCE_DESIGN,
        MchpPageInfo.PAGE_PRODUCT_MATERIAL_COMPLIANCE,
        MchpPageInfo.PAGE_NEW_PRODUCT_MATERIAL_COMPLIANCE,
        MchpPageInfo.PAGE_ROHS,
        MchpPageInfo.PAGE_BLOG,
        MchpPageInfo.PAGE_CASE_STUDY
    ];

    _path;
    _internalPath;
    _externalPath;
    _pageType;
    _pageSelector;

    /** 
     * Path constructor. Create a page info for a specific path.
     * 
     * @param {string} path path path
    */
    constructor(path) {
        if (path === null || path === undefined) {
            this._path = null;
        } else {
            this._path = path || '/';
        }
    }

    /**
     * Get list of known page types.
     * 
     * @return {string[]} list of page types
     */
    static getKnownPages() {
        return [...MchpPageInfo.pageWithSelector];
    }

    /**
     * Get the original path used to create the PageInfo.
     * 
     * @returns {string} original path
     */
    getOriginalPath() {
        return this._path;
    }

    /**
     * Verify if the ogiringal path is external.
     * External path starts with '/en-us' or '/'
     * 
     * @returns {boolean} true if path is external
     */
    isExternal() {
        return this._path?.startsWith('/en-us') || this._path === '/';
    }

    /**
     * Verify if the ogiringal path is internal.
     * Internal path starts with '/content/mchp/en-us'
     * 
     * @returns {boolean} true if path is internal
     */
    isInternal() {
        return this._path?.startsWith('/content/mchp/en-us');
    }

    /**
     * Verify if the original path is a valid page.
     * 
     * @returns {boolean} true if path is a page
     */
    isPage() {
        return this.isExternal() || this.isInternal();
    }

    /**
     * Verify if the page type uses selector.
     * 
     * @returns {boolean} true if page uses selector
     */
    isSelectorPage() {
        return MchpPageInfo._pageWithSelector.includes(this.getPageType());
    }

    /**
     * Verify if the page is of a specific type.
     * 
     * @param {string} type PageInfo type
     * 
     * @returns {boolean} true if page is of type
     */
    isOfType(type) {
        if (this._pageType) {
            return this.getPageType() === type;
        } else {
            return !type;
        }
    }
    
    /**
     * Get page external path.
     * 
     * @returns {string} external path
     */
    getExternalPath() {
        return this._externalPath;
    }

    /**
     * Get page internal path.
     * 
     * @returns {string} internal path
     */
    getInternalPath() {
        return this._internalPath;
    }

    /**
     * Get page type.
     * 
     * @returns {string} page type, or null
     */
    getPageType() {
        return this._pageType?.split(':')[0] || null;
    }

    /**
     * Get page selector.
     * 
     * @returns {string} page selector, or null
     */
    getPageSelector() {
        return this._pageSelector || null;
    }

}

// /* test */ module.exports = { MchpPageInfo }
// /* test */ const { MchpPageInfo } = require('./MchpPageInfo');

/**
 * Util class that uses a copy of dispatcher rules to translate internal and external path and identify page types.
 * 
 * Version 1.0
 * Dependencies: MchpPageInfo
 */
class MchpDispatcherUtil {
    /**
     * Dispatcher rules.
     * As defined in /dispatcher/src/conf.d/rewrites/microchip_rewrite.rules
     * Plus extra information as: page type, reverse source and reverse target
     */
    static _rules = [
        {
            name: 'Map the root folder to the home page',
            source: '^/?$',
            target: '/content/mchp/en-us.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_HOME,
            reverse: {
                source: '^/content/mchp/en-us.html$',
                target: '/',
            },
        },
        {
            name: "Remove any trailing slash, if it's there.",
            source: '^(.+)/$',
            target: '$1',
            flags: '',
            page: null,
            reverse: {
                source: '^(.+)/$',
                target: '$1',
            },
        },
        {
            name: 'Remove .html Extension',
            source: '^(.*).html$',
            target: '$1',
            flags: '[R,L]',
            page: null,
            reverse: {
                source: null,
                target: '$1',
            },
        },
        {
            name: 'handle case when product has a forward slash (2)',
            source: '^/en-us/product/([^/]+)/([^/]+)/?$',
            target: '/content/mchp/en-us/products/product.${lc:$1}-${lc:$2}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_PRODUCT + ':2',
            reverse: {
                source: '^/content/mchp/en-us/products/product.([^-]+)-([^-]+).html$',
                target: '/en-us/product/${lc:$1}-${lc:$2}',
            },
        },
        {
            name: 'handle case when product has a forward slash (3)',
            source: '^/en-us/product/([^/]+)/([^/]+)/([^/]+)/?$',
            target: '/content/mchp/en-us/products/product.${lc:$1}-${lc:$2}-${lc:$3}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_PRODUCT + ':3',
            reverse: {
                source: '^/content/mchp/en-us/products/product.([^-]+)-([^-]+)-([^-]+).html$',
                target: '/en-us/product/${lc:$1}-${lc:$2}-${lc:$3}',
            },
        },
        {
            name: 'Rewrite product page URLs, ensure the string passed to the dynamic page is lowercase',
            source: '^/en-us/product/(.*)$',
            target: '/content/mchp/en-us/products/product.${lc:$1}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_PRODUCT,
            reverse: {
                source: '^/content/mchp/en-us/products/product.(.*).html$',
                target: '/en-us/product/${lc:$1}',
            },
        },
        {
            name: 'Rewrite dev tool page URLs',
            source: '^/en-us/development-tool/(.*)$',
            target: '/content/mchp/en-us/development-tools-tools-and-software/devtool.${uc:$1}.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_DEV_TOOL,
            reverse: {
                source: '^/content/mchp/en-us/development-tools-tools-and-software/devtool.(.*).html$',
                target: '/en-us/development-tool/${uc:$1}',
            },
        },
        {
            name: 'Rewrite Paramchart page URLs',
            source: '^/en-us/parametric-search/(.*)$',
            target: '/content/mchp/en-us/parametric-search.html/${lc:$1}',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_PARAMETRIC_SEARCH,
            reverse: {
                source: '^/content/mchp/en-us/parametric-search.html/(.*)$',
                target: '/en-us/parametric-search/${lc:$1}',
            },
        },
        {
            name: 'Rewrite product comparison page',
            source: '^/en-us/product-comparison.(.*)$',
            target: '/content/mchp/en-us/product-comparison.$1.html',
            flags: '[PT]',
            page: MchpPageInfo.PAGE_PRODUCT_COMPARASION,
            reverse: {
                source: '^/content/mchp/en-us/product-comparison.(.*).html$',
                target: '/en-us/product-comparison.$1',
            },
        },
        {
            name: 'Rewrite DTS links',
            source: '^/en-us/development-tools-tools-and-software/devtoolselector/(.*)$',
            target: '/content/mchp/en-us/development-tools-tools-and-software/devtoolselector.html/$1',
            flags: '[PT]',
            page: MchpPageInfo.PAGE_DEV_TOOL_SELECTOR,
            reverse: {
                source: '^/content/mchp/en-us/development-tools-tools-and-software/devtoolselector.html/(.*)$',
                target: '/en-us/development-tools-tools-and-software/devtoolselector/$1',
            },
        },
        {
            name: 'Rewrite application-notes URLs',
            source: '^/en-us/application-notes/(.*)$',
            target: '/content/mchp/en-us/application-notes/an.$1.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_APPLICATION_NOTE,
            reverse: {
                source: '^/content/mchp/en-us/application-notes/an.(.*).html$',
                target: '/en-us/application-notes/$1',
            },
        },
        {
            name: 'Rewrite ip-core-tool URLs',
            source: '^/en-us/products/fpgas-and-plds/ip-core-tools/(.*)$',
            target: '/content/mchp/en-us/products/fpgas-and-plds/ip-core-tools/ipcore.$1.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_IP_CORE_TOOL,
            reverse: {
                source: '^/content/mchp/en-us/products/fpgas-and-plds/ip-core-tools/ipcore.(.*).html$',
                target: '/en-us/products/fpgas-and-plds/ip-core-tools/$1',
            },
        },
        {
            name: 'Rewrite youtube-video URLs',
            source: '^/en-us/about/media-center/videos/(.*)$',
            target: '/content/mchp/en-us/about/media-center/videos/vd.$1.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_VIDEO,
            reverse: {
                source: '^/content/mchp/en-us/about/media-center/videos/vd.(.*).html$',
                target: '/en-us/about/media-center/videos/$1',
            },
        },
        {
            name: 'Rewrite reference-design URLs',
            source: '^/en-us/tools-resources/reference-designs/(.*)$',
            target: '/content/mchp/en-us/tools-resources/reference-designs/rd.$1.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_REFERENCE_DESIGN,
            reverse: {
                source: '^/content/mchp/en-us/tools-resources/reference-designs/rd.(.*).html$',
                target: '/en-us/tools-resources/reference-designs/$1',
            },
        },
        {
            name: 'Rewrite product-material-compliance URLs',
            source: '^/en-us/about/corporate-responsibility/product-material-compliance.(.*)$',
            target: '/content/mchp/en-us/about/corporate-responsibility/product-material-compliance.${lc:$1}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_PRODUCT_MATERIAL_COMPLIANCE,
            reverse: {
                source: '^/content/mchp/en-us/about/corporate-responsibility/product-material-compliance.(.*).html$',
                target: '/en-us/about/corporate-responsibility/product-material-compliance.${lc:$1}',
            },
        },
        {
            name: 'Rewrite  new product-material-compliance URLs',
            source: '^/en-us/about/corporate-responsibility/our-products/product-material-compliance.(.*)$',
            target: '/content/mchp/en-us/about/corporate-responsibility/our-products/product-material-compliance.${lc:$1}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_NEW_PRODUCT_MATERIAL_COMPLIANCE,
            reverse: {
                source: '^/content/mchp/en-us/about/corporate-responsibility/our-products/product-material-compliance.(.*).html$',
                target: '/en-us/about/corporate-responsibility/our-products/product-material-compliance.${lc:$1}',
            },
        },
        {
            name: 'Rewrite ROHS search Page',
            source: '^/en-us/about/corporate-responsibility/environmental-health-and-safety.(.*)$',
            target: '/content/mchp/en-us/about/corporate-responsibility/environmental-health-and-safety.$1.html',
            flags: '[PT]',
            page: MchpPageInfo.PAGE_ROHS,
            reverse: {
                source: '^/content/mchp/en-us/about/corporate-responsibility/environmental-health-and-safety.(.*).html$',
                target: '/en-us/about/corporate-responsibility/environmental-health-and-safety.$1',
            },
        },
        {
            name: 'Rule to make Search URL case insensitive',
            source: '^/en-us/([Ss][Ee][Aa][Rr][Cc][Hh])$',
            target: '/content/mchp/en-us/${lc:$1}.html',
            flags: '[PT,NC]',
            page: null,
            reverse: {
                source: '^/content/mchp/en-us/([Ss][Ee][Aa][Rr][Cc][Hh]).html$',
                target: '/en-us/$1',
            },
        },
        {
            name: 'Prepend root path (/content/mchp/en-us) to request URI and add .html extension',
            source: '^/en-us/(.*)$',
            target: '/content/mchp/en-us/$1.html',
            flags: '[PT,L]',
            page: MchpPageInfo.PAGE_GENERIC,
            reverse: {
                source: '^/content/mchp/en-us/(.*).html$',
                target: '/en-us/$1',
            },
        },
    ];

    /**
     * Extra rules, not in dispatcher.
     */
    static _extraRules = [
        {
            name: 'Extra rule for Blog',
            source: '^/en-us/about/media-center/blog/(.*)$',
            target: '/content/mchp/en-us/about/media-center/blog/${lc:$1}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_BLOG,
            reverse: {
                source: '^/content/mchp/en-us/about/media-center/blog/(.*)\\.html$',
                target: '/en-us/about/media-center/blog/${lc:$1}',
            },
        },
        {
            name: 'Extra rule for Case Study',
            source: '^/en-us/education/case-studies/(.*)$',
            target: '/content/mchp/en-us/education/case-studies/${lc:$1}.html',
            flags: '[PT,L,NC]',
            page: MchpPageInfo.PAGE_CASE_STUDY,
            reverse: {
                source: '^/content/mchp/en-us/education/case-studies/(.*)\\.html$',
                target: '/en-us/education/case-studies/${lc:$1}',
            },
        },
    ];

    /**
     * Replace placehoders, with some transformations, as used by Dispatcher.
     * Replaces $n with the nth value.
     * Replaces ${lc:$n} with the nth value toLowerCase().
     * Replaces ${uc:$n} with the nth value toUpperCase().
     *
     * @param {string} str string with placeholders
     * @param {string[]} values list of values
     *
     * @returns {string} resolved string
     *
     * @example replaceSpecial('Hello $1 ${uc:$2} $3', ['John', 'f', 'Kennedy']) = 'Hello John F. Kennedy'
     */
    static _replaceSpecial(str, values) {
        // if str is empty, return as is
        if (!str) {
            return str;
        }

        if (typeof values === 'string') {
            values = [values];
        }

        // replace $n or ${fn:n} with nth value.
        const re = /(\$(\d)|\${(.+?):\$(\d)})/g;
        const result = str.replace(re, (match, g1, g2, g3, g4) => {
            const funcName = g3;
            const nth = g2 ?? g4;
            const idx = parseInt(nth) - 1;
            let value = values[idx] || '';
            if ('lc' === funcName) {
                // lowercase function
                value = value.toLowerCase();
            } else if ('uc' === funcName) {
                // uppercase function
                value = value.toUpperCase();
            }
            return value;
        });

        return result;
    }

    /**
     * Get information about a page.
     *
     * @param {string} path
     *
     * @returns {MchpPageInfo} PageInfo
     * @Nullable if input is null
     */
    static getPageInfo(path) {        
        let pageInfo = MchpDispatcherUtil._getDispatcherPageInfo(MchpDispatcherUtil._rules, path, new MchpPageInfo(path));

        if (pageInfo.isOfType(MchpPageInfo.PAGE_GENERIC)) {
            pageInfo = MchpDispatcherUtil._getDispatcherPageInfo(MchpDispatcherUtil._extraRules, path, pageInfo);
        }

        return pageInfo;
    }

    /**
     * Get information about a typed page.
     *
     * @param {string} pageType page type as in MchpPageInfo
     * @param {string} selectors selector to use
     *
     * @returns {MchpPageInfo} PageInfo
     * @Nullable if input is null or invalid
     */
    static getTypedPageInfo(pageType, selectors) {
        const rule = MchpDispatcherUtil._getPageRule(pageType);

        if (rule != null && selectors && selectors[0]) {
            return MchpDispatcherUtil._updatePageInfo(
                new MchpPageInfo(),
                rule,
                selectors
            );
        } else {
            return null;
        }
    }

    /**
     * Update a PageInfo with values from dispatcher rules.
     *
     * @param {string} path page path
     * @param {MchpPageInfo} pageInfo page info object
     *
     * @returns PageInfo filled with dispatcher information
     */
    static _getDispatcherPageInfo(rules, path, pageInfo) {
        const hasFlag = (rule, flag) =>
            rule.flags.slice(1, -1).split(',').includes(flag);

        // if is not a page path, internal and external is the same as the original path
        if (!pageInfo.isPage()) {
            pageInfo._internalPath = pageInfo._path;
            pageInfo._externalPath = pageInfo._path;
            return pageInfo;
        }

        // if path is empty, just return original pageInfo
        if (!path) {
            return pageInfo;
        }

        // if path is internal, use reverse dispatcher rules
        const reverse = pageInfo.isInternal();

        // interact over all dispatcher rules
        for (const rule of rules) {
            const source = reverse ? rule.reverse?.source : rule.source;
            const target = reverse ? rule.reverse?.target : rule.target;

            if (source && target) {
                const re = new RegExp(source, hasFlag(rule, 'NC') ? 'i' : '');
                const match = re.exec(path);

                // if match source, then...
                if (match) {
                    // use target to translate path
                    const findings = match.slice(1);
                    path = MchpDispatcherUtil._replaceSpecial(target, findings);

                    // update pageInfo with the rule
                    pageInfo = MchpDispatcherUtil._updatePageInfo(
                        pageInfo,
                        rule,
                        findings
                    );

                    if (hasFlag(rule, 'R')) {
                        // R=Redirect: re=process updated pageInfo
                        path = MchpDispatcherUtil._getDispatcherPageInfo(
                            rules,
                            path,
                            pageInfo
                        );
                    }

                    if (hasFlag(rule, 'L')) {
                        // L=Last: stop processing
                        return pageInfo;
                    }
                }
            }
        }

        return pageInfo;
    }

    /**
     * Private method to update PageInfo with dispatcher rule.
     *
     * @param {MchpPageInfo} pageInfo page info to update
     * @param {MchpDispatcherRule} rule rule to use
     * @param {string[]} groups group values extracted from source (normally the selector)
     *
     * @returns {MchpPageInfo} updated page info
     */
    static _updatePageInfo(pageInfo, rule, groups) {
        if (typeof groups === 'string') {
            groups = [groups];
        }
        if (rule.page) {
            // update page type
            pageInfo._pageType = rule.page;
            if (pageInfo.isSelectorPage()) {
                // normalize the selectors
                for (let i=0; i<groups.length; i++) {
                    groups[i] = MchpDispatcherUtil.normalizeSelector(pageInfo._pageType, groups[i]);
                }
                // update the selector
                pageInfo._pageSelector = groups.join('-');
            }
        }
        // use target to build internal path
        pageInfo._internalPath = MchpDispatcherUtil._replaceSpecial(
            rule.target,
            groups
        );
        // use reverse target to build external path
        pageInfo._externalPath = MchpDispatcherUtil._replaceSpecial(
            rule.reverse.target,
            groups
        );

        return pageInfo;
    }

    /**
     * Private method to find the dispatcher rule for a specific page type.
     *
     * @param {string} pageType page type to look for
     *
     * @returns {MchpDispatcherRule | null} rule found, or null
     */
    static _getPageRule(pageType) {
        if (!pageType) {
            return null;
        }
        
        const matchPageType = (rule, page) => page === rule.page;

        const pageRule = [...MchpDispatcherUtil._rules, ...MchpDispatcherUtil._extraRules].find((rule) =>
            matchPageType(rule, pageType)
        );

        return pageRule || null;
    }

    /**
     * Normalize the selector based on the page type.
     * 
     * @param {string} pageType page type
     * @param {string} selector selector
     * 
     * @return {string} normalized selector
     */
    static normalizeSelector(pageType, selector) {
        if (!selector) {
            return selector;
        }

        // don't change
        if ([MchpPageInfo.PAGE_VIDEO].includes(pageType)) {
            return selector;
        }

        // to upper case
        if ([MchpPageInfo.PAGE_DEV_TOOL].includes(pageType)) {
            return selector.toUpperCase();
        }

        // to lower case
        return selector.toLowerCase();        
    }

}

// /* test */ module.exports = { MchpDispatcherUtil };
// /* test */ const { document } = require('/Projects/AEM-code/AEM/tmp/aem-test-js/DOM.js');
// /* test */ const { MchpDispatcherUtil } = require('./MchpDispatcherUtil');
// /* test */ const { MchpPageInfo } = require('./MchpPageInfo');

/**
 * Class that represents the context of an environment.
 * 
 * Version 1.2.0
 * Dependencies: MchpPageInfo, MchpDispatcherUtil
 */
class MchpEnvContext {
    static _VERSION = '1.2.0';

    static DEV = 'DEV';
    static QA = 'QA';
    static STAGE = 'STAGE';
    static PROD = 'PROD';
    static AUTHOR = 'Author';
    static PUBLISHER = 'Publisher';
    static USE_DISPATCHER = true;
    static NO_DISPATCHER = false;
    static ABSOLUTE = true;
    static RELATIVE = false;

    /**
     * Current running environment.
     */
    _env;

    /**
     * Default environment.
     */
    static _def;

    /**
     * List of knwon environments.
     */
    static _envs = [
        {
            name: 'DEV',
            origin: 'http://localhost:4502',
            type: MchpEnvContext.DEV,
            instance: MchpEnvContext.AUTHOR,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'DEV_PUBLISHER',
            origin: 'http://localhost:4503',
            type: MchpEnvContext.DEV,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'QA_AUTHOR_OLD',
            origin: 'http://aem.microchip.com:4502',
            type: MchpEnvContext.QA,
            instance: MchpEnvContext.AUTHOR,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'QA_AUTHOR',
            origin: 'https://aem.microchip.com:8443',
            type: MchpEnvContext.QA,
            instance: MchpEnvContext.AUTHOR,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'QA_OLD',
            origin: 'http://chn-vm-aemqapub.mchp-main.com:4503',
            type: MchpEnvContext.QA,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'QA',
            origin: 'https://aem-qa.microchip.com:8443',
            type: MchpEnvContext.QA,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'STAGE_AUTHOR',
            origin: 'https://author-microchip-stage65e.adobecqms.net',
            type: MchpEnvContext.STAGE,
            instance: MchpEnvContext.AUTHOR,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        {
            name: 'STAGE_OLD',
            origin: 'https://microchip-stage65e.adobecqms.net',
            type: MchpEnvContext.STAGE,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.USE_DISPATCHER,
            isAbsolute: MchpEnvContext.ABSOLUTE,
        },
        {
            name: 'STAGE',
            origin: 'https://aem-stage.microchip.com',
            type: MchpEnvContext.STAGE,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.USE_DISPATCHER,
            isAbsolute: MchpEnvContext.ABSOLUTE,
        },
        {
            name: 'PROD_AUTHOR',
            origin: 'https://aem-author.microchip.com',
            type: MchpEnvContext.PROD,
            instance: MchpEnvContext.AUTHOR,
            isDispatcher: MchpEnvContext.NO_DISPATCHER,
            isAbsolute: MchpEnvContext.RELATIVE,
        },
        (MchpEnvContext._def = {
            name: 'PROD',
            origin: 'https://www.microchip.com',
            type: MchpEnvContext.PROD,
            instance: MchpEnvContext.PUBLISHER,
            isDispatcher: MchpEnvContext.USE_DISPATCHER,
            isAbsolute: MchpEnvContext.ABSOLUTE,
        }),
    ];

    _isAbsolute = undefined;

    /**
     * Compare an environment by origin or name.
     * compare origin with env name or env origin (without protocol).
     *
     * @returns {boolean} true if match environment
     */
    static _matchEnv(env, origin) {
        if (!origin) {
            return false;
        }

        origin = origin.toLowerCase();

        // compare name, case insensitive
        if (env.name.toLowerCase() === origin) {
            return true;
        }

        // remove protocols
        const host = origin.replace(/https?:\/\//, '') + '/';
        const thisHost = env.origin.replace(/https?:\/\//, '') + '/';

        // compare hosts, without protocol
        if (host.startsWith(thisHost)) {
            return true;
        }

        return false;
    }

    /**
     * Constructor with a name or an origin/host/domain.
     * If location is not informed, get from current document.location.
     *
     * @param {string | document.location} location environament name or origin/host/domain
     */
    constructor(location) {
        const currentLocation = document?.location;

        const origin = location?.origin || location || currentLocation.origin;

        this._setEnv(origin);
    }

    /**
     * Find the environment from the list of known environments.
     * 
     * @param {string} link 
     * 
     * @returns MchpEnvConfig of the found environment, or null
     */
    static _findEnv(link) {
        return MchpEnvContext._envs.find((item) =>
            MchpEnvContext._matchEnv(item, link)
        ) || null;
    }

    /**
     * Set the environment from the list of known environments.
     *
     * @param origin name or origin/host/domain
     */
    _setEnv(origin) {
        this._env = MchpEnvContext._findEnv(origin);
        this._isAbsolute = this._getEnv().isAbsolute;
    }

    /**
     * Get the current environment, or the default if
     * If selected environment is unknwon, returns the defaut (normally PROD).
     *
     * @returns {MchpEnvConfig} current environment
     */
    _getEnv() {
        return this._env || MchpEnvContext._def;
    }

    /**
     * Get MchpEnvContext version.
     *
     * @return {string} version
     */
    static getVersion() {
        return MchpEnvContext._VERSION;
    }

    /**
     * Return a list of known environments.
     *
     * @return {string[]} list of knwon environments
     */
    static getKnownEnvs() {
        return MchpEnvContext._envs.map((env) => env.name);
    }

    /**
     * Verify if the environment is knwon or not.
     *
     * @returns {boolean} true if is a known environment
     */
    isKnown() {
        return !!this._env;
    }

    /**
     * Verify is a known link.
     * 
     * @param {string} link link to verify
     * 
     * @returns true if is a known link
     */
    static _isKnownLink(link) {
        if (link === null || link === undefined) {
            return false;
        } else if (link.startsWith('http')) {
            return !!MchpEnvContext._findEnv(link);
        } else if (link === '' || link.startsWith('/')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get the environment name.
     *
     * @returns {string} environment name
     */
    getName() {
        return this._getEnv().name;
    }

    /**
     * Get the environment origin.
     *
     * @returns {string} environment origin
     */
    getOrigin() {
        return this._getEnv().origin;
    }

    /**
     * Get the environment type.
     *
     * @returns {string} environment type
     */
    getEnvType() {
        return this._getEnv().type;
    }

    /**
     * Get the environment instance.
     *
     * @returns {string} environment origin
     */
    getEnvInstance() {
        return this._getEnv().instance
    }

    /**
     * Get the environment description.
     * Name + Type:Instance - Origin
     *
     * @returns {string} environment description
     */
    getDescription() {
        return `${this.getName()} - ${this.getEnvType()}:${
            this.getEnvInstance()
        } - ${this.getOrigin()}`;
    }

    /**
     * Verify if environment is DEV.
     *
     * @returns {boolean} true if is DEV
     */
    isDev() {
        return MchpEnvContext.DEV === this.getEnvType();
    }

    /**
     * Verify if environment is QA.
     *
     * @returns {boolean} true if is QA
     */
    isQA() {
        return MchpEnvContext.QA === this.getEnvType();
    }

    /**
     * Verify if environment is STAGE.
     *
     * @returns {boolean} true if is STAGE
     */
    isStage() {
        return MchpEnvContext.STAGE === this.getEnvType();
    }

    /**
     * Verify if environment is PROD.
     *
     * @returns {boolean} true if is PROD
     */
    isProd() {
        return MchpEnvContext.PROD === this.getEnvType();
    }

    /**
     * Verify if environment instance is Author.
     *
     * @returns {boolean} true if instance is Author
     */
    isAuthor() {
        return MchpEnvContext.AUTHOR === this.getEnvInstance();
    }

    /**
     * Verify if environment instance is Publisher.
     *
     * @returns {boolean} true if instance is Publisher
     */
    isPublisher() {
        return MchpEnvContext.PUBLISHER === this.getEnvInstance();
    }

    /**
     * Verify if environment uses dispatcher.
     *
     * @returns {boolean} true if uses dispatcher
     */
    isDispatcher() {
        return this._getEnv().isDispatcher;
    }

    /**
     * Verify if environment require absolute link.
     *
     * @returns {boolean} true if require absolute link
     */
    isAbsolute() {
        return this._isAbsolute;
    }

    setAbsolute(value) {
        this._isAbsolute = !!value;
        return this;
    }

    /**
     * Normalize link and build URL.
     *
     * @param {string} link page link
     *
     * @returns {URL} URL, or null
     */
    static _normalizeURL(link) {
        if (link === null || link === undefined) {
            return null;
        }

        const FOO_HOST = 'http://foo';

        try {
            if (link.toLowerCase().startsWith('http')) {
                return new URL(link);
            } else if (link.startsWith('/') || link === '') {
                return new URL(FOO_HOST + link);
            }
        } catch (err) {
            console.warn('Faild to parse link:', link);
        }

        return null;
    }

    /**
     * Get PageInfo from page link.
     *
     * @param {string} link page link
     *
     * @returns {MchpPageInfo} PageInfo
     * @Nullable if link is unknown
     */
    static getPageInfo(link) {
        if (link === null || link === undefined) {
            return null;
        }

        if (MchpEnvContext._isKnownLink(link)) {
            const url = MchpEnvContext._normalizeURL(link);

            // get only the path.
            const path = url?.pathname || link || '/';

            return MchpDispatcherUtil.getPageInfo(path);
        }

        return null;
    }

    /**
     * Get PageInfo from the typed page and selector.
     *
     * @param {string} page page type
     * @param {string} selector page selector
     *
     * @return {MchpPageInfo} PageInfo
     * @Nullable if input is null
     */
    static getTypedPageInfo(page, selector) {
        return MchpDispatcherUtil.getTypedPageInfo(page, selector);
    }

    /**
     * Normalize a path to the current environment, using a PageInfo.
     *
     * @param {MchpPageInfo} pageInfo PageInfo
     *
     * @returns {string} normalized path for the running environment
     * @Nullable if input is null
     */
    normalizePageInfoLink(pageInfo) {
        if (pageInfo === null || pageInfo === undefined) {
            return null;
        }

        let path;

        // Get internal or external path.
        if (this.isDispatcher()) {
            path = pageInfo.getExternalPath(path);
        } else {
            path = pageInfo.getInternalPath(path);
        }

        // If no path from dispatcher, use original path.
        if (!path) {
            path = pageInfo.getOriginalPath();
        }

        // Remove any trailing slash, if any.
        path = path.replace(/\/$/, '');

        // Use origin or not.
        const origin = this.isAbsolute() ? this.getOrigin() : '';

        // Normalized local link.
        return origin + path;
    }

    /**
     * Normalize a page link to the current environment.
     * If link is unknown, return original link.
     *
     * @param {string} link page link
     *
     * @returns {string} normalized path for the running environment
     * @Nullable if input is null
     */
    normalizePageLink(link) {
        if (MchpEnvContext._isKnownLink(link)) {
            const url = MchpEnvContext._normalizeURL(link);

            if (url) {
                const path = url.pathname;
                const query = url.search;
                const fragment = url.hash;

                const pageInfo = MchpEnvContext.getPageInfo(path);
                link = this.normalizePageInfoLink(pageInfo);

                link = link + query + fragment;
            }
        }
        
        return link || null;
    }

    /**
     * Get the Typed link to the current environment.
     *
     * @param {string} page page type
     * @param {string} selector page selector
     *
     * @return {string} link to the current environment
     * @Nullable if input is null
     */
    getTypedPageLink(page, selector) {
        const pageInfo = MchpDispatcherUtil.getTypedPageInfo(page, selector);
        return this.normalizePageInfoLink(pageInfo);
    }
    /**
     * Get the Product page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getProductPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_PRODUCT, selector);
    }

    /**
     * Get the DevTool page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getDevToolPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_DEV_TOOL, selector);
    }

    /**
     * Get the ParametricSearch page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getParametricSearchPageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_PARAMETRIC_SEARCH,
            selector
        );
    }

    /**
     * Get the ProductComparison page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getProductComparisonPageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_PRODUCT_COMPARASION,
            selector
        );
    }

    /**
     * Get the DevToolSelector page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getDevToolSelectorPageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_DEV_TOOL_SELECTOR,
            selector
        );
    }

    /**
     * Get the ApplicationNote page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getApplicationNotePageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_APPLICATION_NOTE,
            selector
        );
    }

    /**
     * Get the IpCoreTool page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getIpCoreToolPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_IP_CORE_TOOL, selector);
    }

    /**
     * Get the VideoPage page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getVideoPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_VIDEO, selector);
    }

    /**
     * Get the ReferenceDesign page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getReferenceDesignPageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_REFERENCE_DESIGN,
            selector
        );
    }

    /**
     * Get the ProductMaterialCompliance page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getProductMaterialCompliancePageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_PRODUCT_MATERIAL_COMPLIANCE,
            selector
        );
    }

    /**
     * Get the NewProductMaterialCompliance page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getNewProductMaterialCompliancePageLink(selector) {
        return this.getTypedPageLink(
            MchpPageInfo.PAGE_NEW_PRODUCT_MATERIAL_COMPLIANCE,
            selector
        );
    }

    /**
     * Get the ROHS page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getROHSPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_ROHS, selector);
    }

    /**
     * Get the Blog page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getBlogPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_BLOG, selector);
    }

    /**
     * Get the Case Study page link to the current environment.
     *
     * @param {string} selector page selector
     *
     * @returns {string} link to the current environment
     * @Nullable if input is null
     */
    getCaseStudyPageLink(selector) {
        return this.getTypedPageLink(MchpPageInfo.PAGE_CASE_STUDY, selector);
    }
}

// /* test */ module.exports = { MchpEnvContext }
$(document).ready(function(e) {

    var vids = document.getElementsByTagName('video');

    // load first video element in main player as default
    var defaultvideocopy = $(vids[0]).clone();

    $('.main-player').append(defaultvideocopy);

    var v_cards = $('.videocard');
    v_cards.each(function () {
        var self = $(this);
        $(self).on('click', function (e) {
            e.preventDefault();

            var video = $(this).find('video');
            var videocardcopy = $(video).clone();
            $('.main-player video').replaceWith(videocardcopy);

            $('.mainplayer-playicon').css({
                'display': 'block',
            });

            $(self).css({
                'opacity':'0.5',
            })

        })
    })


    $('.main-player video').parent().click(function () {
        if($(this).children("video").get(0).paused){
            $(this).children("video").get(0).play();
            $(this).children(".mainplayer-playicon").fadeOut();
        }else{
            $(this).children("video").get(0).pause();
            $(this).children(".mainplayer-playicon").fadeIn();
        }
    });


});
$(document).ready(function () {
    const mchpbuttonwrapperselector = ".mchp-button-wrapper > .mchp-button";
    $('.disabled-button').click(function (event) {
        event.preventDefault();
        return false;
    });

    $(mchpbuttonwrapperselector).on('mousedown', function (e) {
        $(this).parent().css("border", "none")
    });


    $(mchpbuttonwrapperselector).on('onkeydown', function (e) {

        $(this).parent().removeAttr("style");
    });

    $(mchpbuttonwrapperselector).on('keyup', function (e) {
        if (e.which === 9) {
            $(this).parent().removeAttr("style");
        }

    });

    $(mchpbuttonwrapperselector).on('keyup', function (e) {
        if (e.which === 9 && !$(this).hasClass('disabled')) {
            $(this).parent().removeAttr("style");
        }

    });
});

    function removeWrapperBorder(e1) {
        $(e1).parent().css("border", "none")
    }

    function addWrapperBorder(e1) {
        $(e1).parent().removeAttr("style");
    }
function addToCartMCHPDevtoolCategory(cntrl, cpnId) {

    microchipDIRECT.addToCart(cpnId, 1);
}
$(document).ready(function (e) {
    const sideExpandMobile = $('.mchp-side-expand-mobile');
    const angleIconUp = '.fa-angle-up';
    const angleIconDown = '.fa-angle-down';

    $('.mchp-side-expand').on('click', function (e) {
        const sidenavContainer = $('.sidenav-container');
        sidenavContainer.find('.cmp-navigation__group').addClass('expanded');
        sidenavContainer.find('.fa-angle-right').removeClass('fa-angle-right').addClass('fa-angle-down');
    });

    $('.mchp-side-collapse').on('click', function (e) {
        const sidenavContainer = $('.sidenav-container');
        sidenavContainer.find('.cmp-navigation__group').removeClass('expanded');
        sidenavContainer.find(angleIconDown).removeClass(angleIconDown).addClass('fa-angle-right');

    });

    sideExpandMobile.on('click', function () {
        const sidenavContainer = $('.sidenav-container-mobile');
        sidenavContainer.toggleClass("show");
        if(sidenavContainer.hasClass("show")){
            sideExpandMobile.find(angleIconDown).removeClass('fa-solid fa-angle-down').addClass('fa-solid fa-angle-up');
        }else {
            sideExpandMobile.find(angleIconUp).removeClass('fa-solid fa-angle-up').addClass('fa-solid fa-angle-down');
        }
    });

    // NAVIGATION
    $('.mchp-tree-dropdown_chevron').on('click', function (e) {
        e.preventDefault(); // when menu item has children stop link activation

        const self = $(this);
        if (self.children().first().hasClass('fa-angle-down')) {
            self.parent().siblings('.cmp-navigation__group').removeClass('expanded');
            self.children(angleIconDown).removeClass('fa-angle-down').addClass('fa-angle-right');
        } else {
            self.parent().siblings('.cmp-navigation__group').addClass('expanded');
            self.children('.fa-angle-right').removeClass('fa-angle-right').addClass('fa-angle-down');
        }
    });
});
$(document).ready(function(){
    const table_container = $('.mchp-table-with-image-and-button-container');
    const table = $('.mchp-table-with-image-and-button-container table');
    const firstPixelWidthValue = parseInt($(table).attr('firstPixelWidthValue'));
    const secondPixelWidthValue = parseInt($(table).attr('secondPixelWidthValue'));
    const totalWidthValue = firstPixelWidthValue + secondPixelWidthValue;

    if(table_container.hasClass('scrollbar')){
        table.css('width', `${totalWidthValue}`);
    }
})
$(document).ready(function(){

    const PLAY_BUTTON = ".mchp-play-button-overlay";
    const AUTO_PLAY_ZERO = "autoplay=0";
    const AUTO_PLAY_ONE = "autoplay=1";
    const TARGET_LINK = "https://www.youtube.com";

    let playingYouTubeVideo;
    let playingVideo;

    let handleSlideClick = (slide, modal, modalCarousel) => {
        modal.show();
        $('body').css('overflow', 'hidden');
        const index = $(slide).data('slick-index');
        modalCarousel.slick('slickGoTo', index, true);
        let currentSlide = modalCarousel.find(`.mchp-modal-item[data-slick-index=${index}]`);

        const youtubeVideo = currentSlide.find('iframe')[0];
        let video = currentSlide.find('video')[0];

        if (video) {
            currentSlide.find(PLAY_BUTTON).hide();
            currentSlide.find('.mchp-video-carousel-card__img').hide();
            setTimeout(function () {
                video.play();
                playingVideo = video;
            }, 100);
        }

        if (youtubeVideo) {
            currentSlide.find(PLAY_BUTTON).hide();
            currentSlide.find('.mchp-video-carousel-card__img').hide();
            setTimeout(function () {
                if(youtubeVideo.src.includes(AUTO_PLAY_ZERO)){
                    youtubeVideo.src = youtubeVideo.src.replace(AUTO_PLAY_ZERO,AUTO_PLAY_ONE);
                }
                playingYouTubeVideo = youtubeVideo;
                }, 100);
            youtubeVideo.height = 562.500;
            youtubeVideo.width = 355;
            youtubeVideo.style = " border: none";
            youtubeVideo.contentWindow.postMessage('{"event":"command","func":"stopVideo","args":""}', TARGET_LINK);

        }
        if (modalCarousel.find('.mchp-modal-item').length === 1) {
            modalCarousel.slick('refresh');
        }
    }

    let processCustomThumbnail = (slide) => {
        let videoCard = $(slide).find('.mchp-video-carousel-card')[0];
        let customThumbnail = $(slide).find('.mchp-video-carousel-card__custom-thumbnail img').clone();

        if (customThumbnail.length > 0) {
            $(videoCard).find('.mchp-video-carousel-card__img').css('background-image', `url(${customThumbnail.attr('src')})`);
            $(videoCard).find('.mchp-video-carousel-card__img').html(customThumbnail);
        }
    }
    
    $('.smallmediacarousel').each(function (index, smc) {

        let modal = $(smc).find('.mchp-small-media-modal');
        let sliderHero = $(smc).find('.mchp-slider-hero');
        let sliderItems = $(smc).find('.mchp-small-media-items');
        let modalCarousel = $(modal).find('.mchp-modal-carousel');

        // to differentiate from other small media carousels on the same page.
        let slideHeroId = `slideHero${index}`;
        let sliderItemsId = `sliderItems${index}`;

        /* modal */
        modal.on('click', '.close-modal', function () {

            if (playingVideo) {
                playingVideo.pause();
            }
            if (playingYouTubeVideo) {
               if(playingYouTubeVideo.src.includes(AUTO_PLAY_ONE)){
                    playingYouTubeVideo.src = playingYouTubeVideo.src.replace(AUTO_PLAY_ONE,AUTO_PLAY_ZERO);
                }
                console.log(playingYouTubeVideo.src);
                playingYouTubeVideo.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', TARGET_LINK);
            }
            modal.hide();
            $('body').css('overflow', 'auto');
        });

        /* hero slider */
        sliderHero.attr('id', slideHeroId).not('.slick-initialized').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: false,
            fade: true,
            asNavFor: `#${sliderItemsId}`
        });
        sliderHero.find('.slick-slide').each(function (idx, slide) {
            processCustomThumbnail(slide);
        });
        sliderHero.on('click', '.mchp-slider-main', function () {
            handleSlideClick(this, modal, modalCarousel);
        });

        /* small carousel */
        sliderItems.attr('id', sliderItemsId).not('.slick-initialized').slick({
            slidesToShow: 3,
            slidesToScroll: 1,
            adaptiveHeight: false,
            infinite: true,
            speed: 300,
            focusOnSelect: true,
            asNavFor: `#${slideHeroId}`
        });
        sliderItems.find('.slick-slide').each(function (idx, slide) {
            processCustomThumbnail(slide);
        });
        sliderItems.on('click','.mchp-small-media-item.slick-slide' , function () {
            handleSlideClick(this, modal, modalCarousel);
        });

        /* modal carousel */
        modalCarousel.on('init', function() {
            let slick = $(this);
            setTimeout(function () {
                // fix issue with slick not working when only 1 slide
                if (slick.find('.mchp-modal-item').length === 1) {
                    slick.find('.slick-track').css('width', '');
                    slick.find('.slick-slide').css('width', '');
                }
            }, 500);
        });
        modalCarousel.find('video').removeAttr('style');
        modalCarousel.find('iframe').removeAttr('style');
        modalCarousel.not('.slick-initialized').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            adaptiveHeight: false,
            infinite: true,
            lazyLoad: 'ondemand',
            speed: 300,
            autoplay: false
        });
        modalCarousel.find('.slick-slide').each(function (idx, slide) {
            processCustomThumbnail(slide);
        });
        modalCarousel.on('click', PLAY_BUTTON, function (evt) {
            $(this).hide();
            $(evt.currentTarget.parentNode).find('.mchp-video-carousel-card__img').hide();

            let video = $(evt.currentTarget.parentNode).find('video')[0];
            if (video) {
                video.play();
                playingVideo = video;
            }

            const youTubeVideo = $(evt.currentTarget.parentNode).find('iframe')[0];
            if (youTubeVideo) {
                if(youTubeVideo.src.includes(AUTO_PLAY_ZERO)){
                    youTubeVideo.src = youTubeVideo.src.replace(AUTO_PLAY_ZERO,AUTO_PLAY_ONE);
                }
                playingYouTubeVideo = youTubeVideo;
                youTubeVideo.height = 562.500;
                youTubeVideo.width = 355;
                youTubeVideo.style = "border: none";
            }

        });

        function pausePlayingVideo(activeVideo){
            if (activeVideo) {
                activeVideo.pause();
            }
        }

        function pausePlayingYouTubeVideo(activeVideo){
            if (activeVideo) {
                if(activeVideo.src.includes(AUTO_PLAY_ONE)){
                    activeVideo.src = activeVideo.src.replace(AUTO_PLAY_ONE,AUTO_PLAY_ZERO);
                }
                activeVideo.contentWindow.postMessage('{"event":"command","func":"stopVideo","args":""}', TARGET_LINK);
            }
        }


        modalCarousel.on('click', '.slick-arrow', function (evt) {
            pausePlayingVideo(playingVideo);
            pausePlayingYouTubeVideo(playingYouTubeVideo);
        });
        /* carousel swipe over */
        modalCarousel.on('mouseup mousedown', '.mchp-modal-item .mchp-dynamic-video-carousel-card', function () {
            pausePlayingVideo(playingVideo);
            pausePlayingYouTubeVideo(playingYouTubeVideo);
        });
    });
});
$(document).ready(function () {

  const items = $(".mchp-card-items");

  items.each(function (idx, item) {
    const autoplay = $(item).data('autoplay');
    const autoplaySpeed = $(item).data('autoplayspeed');
    const autoPauseDisabled = $(item).data('autopausedisabled');
    const cardCarouselCardNumber = $(item).data('card-number');

    $(item).not('.slick-initialized').slick({
      slidesToShow: cardCarouselCardNumber,
      slidesToScroll: 1,
      adaptiveHeight: false,
      infinite: true,
      lazyLoad: 'ondemand',
      speed: 300,
      autoplay: autoplay,
      autoplaySpeed: autoplaySpeed,
      pauseOnFocus: !autoPauseDisabled,
      responsive: [
        {
          breakpoint: 1150,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3,
            infinite: true,
            dots: false
          }
        },
        {
          breakpoint: 900,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2
          }
        },
        {
          breakpoint: 635,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }
      ]
    });
  });

});
$(document).ready(function () {

  let list = $(".mchp-video-list");

  list.each(function (idx, listItem) {
    const carousel = $(listItem).find('.mchp-video-items');
    const autoplay = $(carousel).data('autoplay');
    const autoplaySpeed = $(carousel).data('autoplayspeed');
    const autoPauseDisabled = $(carousel).data('autopausedisabled');
    const videoCount = $(carousel).data('videocount');

    const DESKTOP_BREAKPOINT = videoCount === 4 ? 1400 : 1350;
    const TABLET_BREAKPOINT = 1070;
    const MOBILE_BREAKPOINT = 685;

    const updateClassName = (element, className, action) => {
      if (action === 'add' && !element.hasClass(className)) {
        element.addClass(className);
      }
      if (action === 'remove' && element.hasClass(className)) {
        element.removeClass(className);
      }
    }

    const updateCarouselOnResize = (width) => {
      const slickList = $(carousel).find('.slick-list');
      const mchpVideoList = $(listItem);

      const ADD = 'add';
      const REMOVE = 'remove';

      switch (videoCount) {
        case 4:
          if (width > DESKTOP_BREAKPOINT) {
            updateClassName(slickList, 'size-4', ADD);
          } else {
            updateClassName(slickList, 'size-4', REMOVE);
          }
          if (width > TABLET_BREAKPOINT) {
            updateClassName(mchpVideoList, 'size-4', ADD);
          } else {
            updateClassName(mchpVideoList, 'size-4', REMOVE);
          }
          break;
        case 3:
          if (width > TABLET_BREAKPOINT) {
            updateClassName(slickList, 'size-3', ADD);
          } else {
            updateClassName(slickList, 'size-3', REMOVE);
          }
          break;
        case 2:
          if (width < MOBILE_BREAKPOINT) {
            updateClassName(slickList, 'size-2', REMOVE);
          } else {
            updateClassName(slickList, 'size-2', ADD);
          }
          break;
        default:
          break;
      }
    }

    if (videoCount < 5) {
      const width = window.innerWidth;

      $(carousel).on('init', function () {
        updateCarouselOnResize(width);
      });

      $(window).on('resize', function () {
        const width = window.innerWidth;
        updateCarouselOnResize(width);
      });
    }

    $(carousel).not('.slick-initialized').slick({
      slidesToShow: 4,
      slidesToScroll: 1,
      adaptiveHeight: false,
      infinite: true,
      lazyLoad: 'ondemand',
      speed: 300,
      autoplay: autoplay,
      autoplaySpeed: autoplaySpeed,
      pauseOnFocus: !autoPauseDisabled,
      responsive: [
        {
          breakpoint: DESKTOP_BREAKPOINT,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3,
            infinite: true,
          }
        },
        {
          breakpoint: TABLET_BREAKPOINT,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2
          }
        },
        {
          breakpoint: MOBILE_BREAKPOINT,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }
      ]
    });
  });

});
$(document).ready(function () {
    let videoItem = $(".mchp-video-item");

    videoItem.each(function (index, item) {
        const featureTitle = $(item).find('.mchp-component-title').text().trim();
        const card = $(item).find('.mchp-video-carousel-card');
        const pageTitle = card.data('pagetitle');

        let videoTitle = $(card).find('.mchp-video-carousel-card__info .title');
        if (featureTitle !== pageTitle) {
            // title is set since it's not the page title. use it as video title
            videoTitle.text(featureTitle);
        }
        videoTitle.show();
    });
});

$(document).ready((e) => {
    let deals_container = $('.dealscontainer');

    let part_data_cards = deals_container.find('.partdatacard');
    part_data_cards.each((idx, card) => {
        // hide subtitle if empty string
        let subtitle = $(card).find('.mchp-pd-card-subtitle')[0];
        if ($(subtitle).text().trim() === '') {
            $(subtitle).hide();
        }

        // hide link if empty string
        let link = $(card).find('.mchp-pd-link-wrapper')[0];
        if ($(link).text().trim() === '') {
            $(link).hide();
        }
        setTimeout(function () {
            if ($('html').hasClass('skipCoral2Validation') || $(deals_container).hasClass('cq-Editable-dom')) {
                $(subtitle).show();
                $(link).show();
            }
        }, 10000);
    })
})

$(".mchp-two-columns .mchp-content-text__column > .content-text > p").each(function(){
	$( this ).replaceWith( $( this ).text() + "<br/><br/>" );
});
$(".mchp-content-text__column > .content-text").wrapInner("<p></p>");

//Cut off text after x lines by limiting the height to X(line-height) + margin
//Text can have an unknown number of p elements
//Each p element adds additional margin and changes the last number in the calculation
function setDesiredHeight(target) {
    if (target) {
        var $target = $(target);
        var $textContainer = $target.find('.hide-text-target');
        var children = $textContainer.children('p');
        var childCount = children.length;
        if (childCount) {
            //if the paragraphs are split between two columns, we need half as much vertical margin
            if ($target.parent().parent().hasClass('mchp-two-columns')) {
                childCount = Math.floor(Math.floor(childCount / 2));
            }
            //default values are based on what they are currently on the site
            //used only if we are unable to read the css for some reason
            var lineHeightPx = $(children[0]).css('line-height') || '24px';
            var fontSizePx = $(children[0]).css('font-size') || '15px';

            var lineHeight = parseInt(lineHeightPx, 10);
            var marginSize = parseInt(fontSizePx, 10);

            var allowedLines = 4;

            if ($target.hasClass('five')) {
                allowedLines = 5;
            } else if ($target.hasClass('six')) {
                allowedLines = 6;
            } else if ($target.hasClass('seven')) {
                allowedLines = 7;
            }

            var maxHeight = allowedLines * lineHeight + childCount * marginSize;
            $target.parent().css('max-height', maxHeight + 'px');
        }
    }
}

$(document).ready(function () {

    var textToTruncate = $('.hideContent');
    for (var i = 0; i < textToTruncate.length; i++) {
        setDesiredHeight(textToTruncate[i]);
    }

    $(".show-more a").on("click", function (e) {
        e.preventDefault();

        var $this = $(this);
        var $container = $this.closest('.show-more-container, .mchp-content-text__column');
        var $content = $container.parent().find('.content-text');
        var $arrowContainer = $this.find('i');
        var $textContainer = $this.find('span');
        var linkText = $textContainer.text();


        if (linkText === 'Read more') {
            $content.addClass('showContent').removeClass('hideContent');
            $content.parent().css('max-height', '');
            $arrowContainer.addClass('fa-angle-up').removeClass('fa-angle-down');
            $container.addClass('expand');
            linkText = 'Collapse';
        } else {
            $content.addClass('hideContent').removeClass('showContent');
            $arrowContainer.addClass('fa-angle-down').removeClass('fa-angle-up');
            $container.removeClass('expand');
            setDesiredHeight($content);
            linkText = 'Read more';
        }

        $textContainer.text(linkText);
    });
});
/**
 * Returns a new DataTable object.
 *
 * @param domTable The HTML table.
 * @param columns {{dates: array of date columns, not_sortables: array of unsortable columns}}
 * @param numItemsPerPage How many items to display per pagination.
 * @param currentContext The current jQuery context (e.g. $(this))
 *
 * @returns {jQuery}
 */
const createPageTable = (domTable, columns, numItemsPerPage,zeroRecordsDisplayText,currentContext) => {
    let pageTable = $(domTable).DataTable({
        order: [],
        autoWidth: false,
        pagingType: 'simple_numbers',
        pageLength: numItemsPerPage,
        columnDefs: [
            {targets: columns.not_sortables, orderable: false, className: 'dont_sort'},
            {targets: columns.dates, type: 'date'}
        ],
        search: {
            'regex': true,
            'smart': false
        },
        "oLanguage": {
             "sZeroRecords": zeroRecordsDisplayText
        },
        initComplete: function () {
            currentContext.show();
        }
    });

    // If there's only one page hide the pagination
    if (pageTable.page.info().pages === 1) {
        currentContext.find('.dataTables_paginate').hide();
    }

    return pageTable;
}


/**
 * Called when the page loads. Instantiates the table, the handlers and all
 * search functionality.
 */
$(document).ready(function () {
    $('.PageTable').each(function () {
        const $this = $(this);
        const domTable = $this.find('table:first');
        if (!domTable) {
            return;
        }

        const tableHeader = domTable.find("th");
        const numItemsPerPage = domTable.data('numItemsPerPage');
        const zeroRecordsDisplayText = domTable.data('zerorecordstext');
        const searchButton = $this.find('.PageTable--search-container')
            .find('.PageTable--search-button');
        let input = $this.find('.PageTable--search-container').find('input');

        let columns = getOrganizedColumns(tableHeader);
        const table = createPageTable(domTable, columns, numItemsPerPage,zeroRecordsDisplayText,$this);
        let searchTerm = '';

        // handler: typing in the search bar and pressing enter shows results
        input.on('keyup', function (e) {
            searchTerm = this.value;
            if (e.keyCode === 13) {
                searchDatatable(table, this.value, $this);
            }
        });
        // handler: clears the search bar and resets search results when the 'x' button is pressed
        input.on('search', function () {
            searchDatatable(table, '', $this);
        });
        // handler: gets search results when the search button is pressed
        searchButton.on('click', function () {
            searchDatatable(table, searchTerm, $this);
        });
    });
});

$(document).ready(function() {

    const mchpIconCarousel = $('.mchp-icon-carousel');
    const mchpIconView = $(mchpIconCarousel).find('.mchp-icon-view');
    const mchpIconList = $(mchpIconCarousel).find('.mchp-icon-list');

    const iconCards = mchpIconView.find('.iconcard');
    const size = mchpIconView.data('size');

    switch (size) {
        case 5:
            iconCards.addClass('size-5');
            break;
        case 6:
            iconCards.addClass('size-6');
            break;
    }

    const updateArrows = () => {
        const leftArrow = $(mchpIconCarousel).find('.arrows.left');
        const rightArrow = $(mchpIconCarousel).find('.arrows.right');

        if (0 !== $(mchpIconCarousel).length) {

            0 === Math.round($(mchpIconList).position().left) ? leftArrow.addClass('disabled').attr('disabled', true) : leftArrow.removeClass('disabled').removeAttr('disabled');

            const windowWidth = $(window).width();
            const micOffsetLeft = mchpIconCarousel.offset().left;
            const lastCardOffsetLeft = $(mchpIconList).find('.iconcard').last().offset().left;
            const cardWidth = $(mchpIconList).find('.iconcard').outerWidth();

            const leftOffset = Math.round((windowWidth - micOffsetLeft) - (lastCardOffsetLeft + cardWidth) + 5);
            const marginRight = parseInt(mchpIconView.css('margin-right'));
            leftOffset >= marginRight ? rightArrow.addClass('disabled').attr('disabled', true) : rightArrow.removeClass('disabled').removeAttr('disabled');
        }

        if (leftArrow.hasClass('disabled') && rightArrow.hasClass('disabled')) {
            leftArrow.addClass('hidden');
            rightArrow.addClass('hidden');
        } else {
            leftArrow.removeClass('hidden');
            rightArrow.removeClass('hidden');
        }
    }

    const moveIconNav = (dir) => {
        if (0 !== $(mchpIconCarousel).length) {
            const iconWidth = mchpIconList.find('.iconcard').outerWidth();

            const leftPosition = (0 !== Math.round(mchpIconList.position().left) || 'left' !== dir);
            const leftIconCardPosition = mchpIconList.find('.iconcard').last().offset().left + iconWidth;
            const leftOffset = mchpIconCarousel.offset().left;
            const marginRight = parseInt(mchpIconView.css('margin-right'));

            mchpIconList.data('moving') || leftPosition &&
                (Math.round(($(window).width() - leftOffset) - (leftIconCardPosition)) + 5 >= marginRight && 'right' === dir || (mchpIconList.data('moving', !0),
                    mchpIconList.animate({
                        left: Math.round(mchpIconList.position().left) + iconWidth * ('left' === dir ? 1 : -1)
                    }, 200, function() {
                        mchpIconList.data('moving', !1),
                            updateArrows()
                    })))
        }
    }

    (function() {
        if (0 !== $(mchpIconCarousel).length) {
            $('.iconcard', mchpIconCarousel).each(function(i) {
                setTimeout(function() {
                    $(this).addClass('start')
                }.bind(this), 150 * i)
            });
            updateArrows();
        }
    })();

    $(window).on('resize', function() {
        if (0 !== $(mchpIconCarousel).length) {
            $(mchpIconList).css('left', 0);
            updateArrows();
        }
    });

    $(mchpIconCarousel).on('click', '.arrows', function() {
        const direction = $(this).hasClass('left') ? 'left' : 'right';
        moveIconNav(direction);
    });
});

(function (document, $) {
    "use strict";

    // when dialog gets injected
    $(document).on("foundation-contentloaded", function (e) {
        // if there is already an inital value make sure the according target element becomes visible
        checkboxShowHideHandler($(".cq-dialog-checkbox-showhide", e.target));
    });

    $(document).on("change", ".cq-dialog-checkbox-showhide", function (e) {
        checkboxShowHideHandler($(this));
    });

    function checkboxShowHideHandler(el) {
        el.each(function (i, element) {
            if($(element).is("coral-checkbox")) {
                // handle Coral3 base drop-down
                Coral.commons.ready(element, function (component) {
                    showHide(component, element);
                    component.on("change", function () {
                        showHide(component, element);
                    });
                });
            } else {
                // handle Coral2 based drop-down
                var component = $(element).data("checkbox");
                if (component) {
                    showHide(component, element);
                }
            }
        })
    }

    function showHide(component, element) {
        // get the selector to find the target elements. its stored as data-.. attribute
        var target = $(element).data("cqDialogCheckboxShowhideTarget");
        var $target = $(target);

        // get toggle link
        var toggleLink = $('.togglelink');
        toggleLink.addClass('hide');

        if (target) {
            $target.addClass("hide");
            toggleLink.removeClass("hide")
            if (component.checked) {
                $target.removeClass("hide");
                toggleLink.addClass("hide");
            }
        }
    }
})(document, $);

const filterItems = ["Dynamic Dev Tool Page", "Dynamic Product Page"];
    const mchpmegamenu = '.mchp-mega-menu';
    const menuactive = 'menu-active';
    const searchIcon = $('.search-icon');
    const searchSuggestion = $(".mchp-searchbar-suggestion");
    const searchText = $('.searchbar-content');
    const searchInputEl = $(".mchp-searchbar-input");
    const clearsearch = $('.searchbar').find('.search-clear');
    const hideContentCl = 'hide-content';
    const userProfileDropdown = '#myDropdown';
    const cmpBreadcrumb = '.cmp-breadcrumb';
    const mchpJumplinks = '.mchp-jumplinks';
    const headeralertwrapper = '.mchp-headeralert-wrapper';
    const showClassName = 'show';
    const megaMenuCategoryClassName = '.category-details';
$(function () {



    //opens category page on mouseover
    $('.all-categories-item').on('click', openCategory);
    $('.mchp-navigation_item').on('click', openMenu);

    $(mchpmegamenu).on('click', closeOnMouseOut);
    $('[id^=paramcharticon]').on('click', generateLinkDown);

    //Closes any open mega menus and opens the appropriate mega menu
    function openMenu(e) {
        closeAllMegaMenuItems();
        closeSearchBoxItems();
        let menuItem = $(e.currentTarget);
        let menuLink = menuItem.find('.mchp-navigation_link');
        const megaMenu = menuItem.next(mchpmegamenu);
        filterMegaMenuItems(megaMenu);
        if(!$('.header .mchp-headeralert-wrapper').hasClass(showClassName)) {
           $(mchpmegamenu).css('top','100%');
          }
        if (megaMenu.length) {
            megaMenu.removeClass(hideContentCl);
            menuLink.addClass(menuactive);
            adjustSubMenuHeight();
        }
        if($(userProfileDropdown).hasClass(showClassName)) {
            $(userProfileDropdown).removeClass(showClassName);
          }
    }
        function closeSearchBoxItems() {
                try {
                      searchIcon.removeClass('active');
                      searchSuggestion.hide();
                      searchText.hide();
                      clearsearch.addClass(hideContentCl);
                  } catch(err) {
                             console.error('Unable to close search results list');
                            }
              }

    function adjustSubMenuHeight(){

      if($(cmpBreadcrumb).length && $(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")){
                              	$(mchpmegamenu).css('top', '64%');
      }else if ($(cmpBreadcrumb).length && $(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                                  $(mchpmegamenu).css('top', '57%');
      } else if($(cmpBreadcrumb).length && !$(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                   $(mchpmegamenu).css('top', '70%');
        } else if($(cmpBreadcrumb).length && !$(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")) {
            $(mchpmegamenu).css('top', '76%');
        }
    }

    function filterMegaMenuItems(megaMenu) {
        megaMenu.children('.all-categories').each((i, child) => {
            const categoryList = $(child).find('.all-categories-list');
            categoryList.children('li').each((j, item) => {
                const listItem = $(item).find('.all-categories-item');
                listItem.children('span').each((k, text) => {
                    const innerText = text.innerText;
                    if (filterItems.includes(innerText)) {
                        categoryList.children('li').eq(j).remove();
                    }
                })
            })
        })
    }

    //Closes any mega menus on the page
   function closeAllMegaMenuItems() {
           try {
                 $(mchpmegamenu).addClass(hideContentCl);
                 $('.menu-active').removeClass(menuactive);
                 searchSuggestion.hide();
                 $(megaMenuCategoryClassName).hide();
                 } catch (err) {
                  console.error('Unable to close all menus');
                 }
      }

    //Sets up a mouseout event that will close the menu
    //Fired when the user first mouses over the mega menu
    function closeOnMouseOut(e) {
        $(e.currentTarget);
    }

    $('body').on('click', () => {
        closeAllMegaMenuItems();
    });


    //Opens the category that was hovered/touched
    function openCategory(e) {
        let categoriesLink = $(e.currentTarget);
        let categoryId = getCategoryId(categoriesLink.attr('href'));

        const currentMegaMenu = categoriesLink.closest(mchpmegamenu);
        let categoriesPanels = $('.category-panel', currentMegaMenu);

        //Loops over and shows the correct menu panel
        //Hides all other panels
        $.each(categoriesPanels, (i) => {
            let currentPanel = $(categoriesPanels[i]);
            if (getCategoryId(currentPanel.attr('data-category')) == categoryId) {
                currentPanel.removeClass(hideContentCl);
            } else {
                currentPanel.addClass(hideContentCl);
            }
        });
    }

    //Use the last two parts of the href as an identifier
    //hrefs may not match exactly due to changes made by the dispatcher
    function getCategoryId(href) {
        href = href || '';
        href = href.replace('.html', '');

        let hrefParts = href.split('/');
        if (hrefParts.length > 1) {
            href = `${hrefParts[hrefParts.length - 2]}/${hrefParts[hrefParts.length - 1]}`;
        }

        return href;
    }

    function generateLinkDown(){
        let url;

        const href = window.location.href;
        const siteArray = href.split('/');

        const authorHostNames = ['http://localhost:4502', 'http://aem.microchip.com:4502', 'http://chn-vm-aemqapub.mchp-main.com:4503', 
        'https://aem-qa.microchip.com:8443', 'https://author-microchip-stage65e.adobecqms.net', 'https://aem-author.microchip.com'];
        const doubleSlash = "//";
        const contentMchp = "/content/mchp";
        const enUS = '/en-us';
        const paramchartpath = '/parametric-search.html';
        const chartId = '/' + $(this).attr('data-chartid');

        if(authorHostNames.includes(siteArray[0] + doubleSlash + siteArray[2])){
            url = siteArray[0] + doubleSlash + siteArray[2] + contentMchp + enUS + paramchartpath + chartId;
        }else{
            url = siteArray[0] + doubleSlash + siteArray[2] + enUS + paramchartpath + chartId;
        }

        window.open(url);
    }


});

$(document).ready(function () {
    $(".close-submenu").click(function () {
        $(this).parent().addClass(hideContentCl);
        $('.category-details').hide();
    });
    $(".cmp-mchp-menu-container").click(function (e) {
        if (e.target === this) {
            $(this).closest(mchpmegamenu).addClass(hideContentCl);
            $('.mchp-navigation_link').removeClass(menuactive);
        }
    });
    if ($('#allParamChartIconConfiguration').text()==="false") {
        $('.param-chart-icon-nav-link').hide();
    }
});

$(function () {

    let allSubMenus = $('.mchp-navigation_list', '.mchp-mobile-menu');
    let isCurrentlyScrolling;

    $('.mchp-navigation_link', '.mchp-mobile-menu').on('touchend', openSubMenu);
    $('.mchp-navigation_link', '.mchp-mobile-menu').on('click', openSubMenu);

    $('.mchp-navigation_link', '.mchp-mobile-menu').on('touchmove', () => { isCurrentlyScrolling = true;});
    $('.mchp-navigation_link', '.mchp-mobile-menu').on('touchstart', () => { isCurrentlyScrolling = false;});

    $('.hamburger-holder').on('touchstart', restoreMenu);
    $('.hamburger-holder').on('click', restoreMenu);

    // Opens one of the submenus in the main mobile Mega menu.
    // event: the click event with included details on the clicked item.
    function openSubMenu(e) {
        if (isCurrentlyScrolling) {
            return;
        }

        let menuItem = $(e.currentTarget);
        let categoryId = getCategoryId(menuItem.attr('href'));

        let activeSubMenu = menuItem.closest('.mchp-navigation_list');
        let activeId = getCategoryId(activeSubMenu.attr('data-category'));

        let openingNewMenu = false;

        //Loops over all submenus and look for the one that matches the target href
        $.each(allSubMenus, (i) => {
            let currentSubMenu = $(allSubMenus[i]);
            let currentCategoryId = getCategoryId(currentSubMenu.attr('data-category'));
            if (!currentSubMenu.hasClass('hide-content')) {
                //This is the active menu
                //The active menu is excluded from the check below
            }

            //This is the menu to be opened
            else if (currentCategoryId == categoryId) {
                currentSubMenu.removeClass('hide-content');
                openingNewMenu = true;

                //Attach the current menu id as a 'back' option
                if (!menuItem.hasClass('back-link')) {
                    currentSubMenu.find('.back-link').attr('href', activeId);
                }
            }
        });

        //If you close the active menu, it will cancel any links
        //Only close the active menu if you're opening a new menu
        if (openingNewMenu) {
            activeSubMenu.addClass('hide-content');
        }

        //Return false cancels any linking
        //Opening a new menu takes precedent over following a page link
        return !openingNewMenu;
    }

    //Hides any open menus and opens the main menu
    //Used when closing the menu, to restore the menu for its next use
    function restoreMenu() {
        $.each(allSubMenus, (i) => {
            let currentSubMenu = $(allSubMenus[i]);
            let currentCategoryId = currentSubMenu.attr('data-category');
            if (currentCategoryId == 'main') {
                currentSubMenu.removeClass('hide-content');
            } else {
                currentSubMenu.addClass('hide-content');
            }
        });
    }
    //Use the last two parts of the href as an identifier
    //hrefs may not match exactly due to changes made by the dispatcher
    function getCategoryId(href) {
        href = href || 'main';
        href = href.replace('.html', '');

        let hrefParts = href.split('/');
        if (hrefParts.length > 1) {
            href = `${hrefParts[hrefParts.length - 2]}/${hrefParts[hrefParts.length - 1]}`;
        }

        return href;
    }

});
$(document).ready(function() {

    const mediaQueryFooter = window.matchMedia('(min-width: 630px)')
    const mchpComponentList = $('.accordion-list > .mchp-component-list');
    handleMediaSizeChanges(mediaQueryFooter);

    function initAccordion() {
        const maxHeight = 'max-height';

        $('.accordion-label').click(function(event) {
            event.preventDefault();
            if (!mediaQueryFooter.matches) {
                var content = $(this).next('.mchp-component-list');
                var others = $('.accordion-list > .mchp-component-list').not(content);

                // Check if the accordion header is active
                if ($(this).hasClass('active')) {
                    // If it is, close the content section and remove the active class
                    $(this).removeClass('active');
                    content.slideUp(300, function() {
                        $(this).css(maxHeight, '0');

                    });
                } else {
                    // If it isn't, close other sections, open the content section, and add the active class
                    others.slideUp(300, function() {
                        $(this).css(maxHeight, '0');
                    });
                    $('.accordion-label').removeClass('active');
                    $(this).addClass('active');
                    content.slideDown(300, function() {
                        $(this).css(maxHeight, 'none');

                    });
                }
            }
        });
    }

    function handleMediaSizeChanges(mediaQuery) {

        if (mediaQuery.matches) {
            const accordionLabelActive = document.getElementsByClassName('accordion-label active');
            for (let i = 0; i < accordionLabelActive.length; i++) {
                accordionLabelActive[i].classList.remove('active');
            }
            for (let i = 0; i < mchpComponentList.length; i++) {
                mchpComponentList[i].style.display = "block";
                mchpComponentList[i].style.maxHeight = "none";
            }


        } else {

            for (let i = 0; i < mchpComponentList.length; i++) {
                mchpComponentList[i].style.display = "none";
                mchpComponentList[i].style.maxHeight = "0";
            }
        }
    }

    // Call the initAccordion function after the document has finished loading
    $(window).on('load', function() {
        initAccordion();
    });

    mediaQueryFooter.addListener(handleMediaSizeChanges)

});
$(function () {
  "use strict";

  const mobileCloseEle = '.mobile-close';
  const mchpNavLinkHolder = '.mchp-nav-link-holder';
  const megaMenuEleActive = '.mchp-top-bar .is-active';
  const mchpTopBarHidden = '.mchp-top-bar .is-hidden';
  const mchpTopBarHideChildren = '.mchp-top-bar .hidden-show-children';
  const myMicrochipMenuEle = 'myDropdown';
  const mchpTopBarHidenChildrenClass = 'hidden-show-children';
  const menuCloseTablet = '.mchp-mobile-menu';
  const hideContent = 'hide-content';
  const mobileSearchDropdown = ".mchp-header #search-drop-down";
  const mchpHeaderSearchWrapperClassName = ".mchp-header-search-wrapper";
  const mobileSearchDropdownSelectedOption = mobileSearchDropdown + " option:selected";
  const searchDropdown = "#search-drop-down";
  const mchpHeaderAlertWrapper = ".mchp-headeralert-wrapper";
  const mchpNavigationList = ".mchp-navigation_list";
  const searchDropdownSelectedOption = searchDropdown + " option:selected";
  const mchpHeaderClass = '.mchp-header';
  const mchpHeaderTabletViewSpaceCLass = 'mchp-header-tablet';
  const mchpHeaderMobileViewSpaceCLass = 'mchp-header-mobile';

  const searchIcon = $('.search-icon');
  const searchSuggestion = $(".mchp-searchbar-suggestion");
  const searchText = $('.searchbar-content');
  const headerIcons =  $(".header-icons");
  const hamburgerHolder = $(".hamburger-holder");
  const userDropdown = $(".user-icon");
  const userdropdownId = '#myDropdown';
  const body = 'body';
  const mchpMegaMenuClassName = '.mchp-mega-menu';
  const clearsearch = $('.searchbar').find('.search-clear');
  let mobileDevice = false;
   const listItems = document.querySelectorAll('.child-items');
   const subMenu = document.querySelectorAll('.category-panel .close-submenu');
   let mainItem = "";
   getMobileDevices();
  window.onload = function () {
      $(menuCloseTablet).addClass(hideContent);
      $('#sitewide-search-submit').prop("disabled", true);
  };
  if(mobileDevice) {
       $(mchpHeaderClass).addClass(mchpHeaderTabletViewSpaceCLass);
     }

  hamburgerHolder.on('click', function () {
      $(menuCloseTablet).removeClass(hideContent);
      hamburgerHolder.addClass('is-hidden');
      headerIcons.addClass('is-active');
      $('.dropdown-account').removeClass('show');
      $(mchpHeaderSearchWrapperClassName).removeClass(hideContent);
      $(mobileCloseEle).addClass('is-active');
      $(mchpNavLinkHolder).addClass('is-active');
      setVisibilityOnMobile();
      searchSuggestion.hide();
  });

  $(userDropdown).on('click', function () {
      $('#' + myMicrochipMenuEle).toggleClass('show');
      $('.user-icon em').toggleClass("fa-chevron-down fa-chevron-up");
      if(mobileDevice) {
        $('.mchp-header .mchp-header-search-wrapper').toggleClass(hideContent);
             if( $('.mchp-header .mchp-header-search-wrapper').hasClass(hideContent)) {
                  $(mchpHeaderClass).removeClass(mchpHeaderTabletViewSpaceCLass);
              } else {
                  $(mchpHeaderClass).addClass(mchpHeaderTabletViewSpaceCLass);
               }
            }
        setVisibilityOnMobile();
  });

    function setVisibilityOnMobile() {
       if(window.matchMedia("(max-width: 480px)").matches) {
              $(mobileSearchDropdown).css('width','100%');
              $(mchpHeaderClass).removeClass(mchpHeaderTabletViewSpaceCLass);
              if($('#' + myMicrochipMenuEle).hasClass('show')) {
                $(mchpHeaderClass).removeClass(mchpHeaderMobileViewSpaceCLass);
             } else {
                $(mchpHeaderClass).addClass(mchpHeaderMobileViewSpaceCLass);
             }
          } else if (window.matchMedia("(min-width: 481px) and (max-width: 1199px) ").matches) {
              $(mchpHeaderClass).removeClass(mchpHeaderMobileViewSpaceCLass);
                 if($('#' + myMicrochipMenuEle).hasClass('show')) {
                   $(mchpHeaderClass).removeClass(mchpHeaderTabletViewSpaceCLass);
                 } else {
                   $(mchpHeaderClass).addClass(mchpHeaderTabletViewSpaceCLass);
                   }
              }
         adjustPopupMaskHeight();
      }

       function adjustPopupMaskHeight() {
           if(mobileDevice){
            $(userdropdownId).css('top','100%');
           } else if(!mobileDevice) {
            if ($(cmpBreadcrumb).length) {
              if($(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")){
                  $(userdropdownId).css('top', '47%');
              } else if ($(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                  $(userdropdownId).css('top', '37%');
              } else if(!$(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                  $(userdropdownId).css('top', '44.3%');
              }else if(!$(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")) {
                  $(userdropdownId).css('top', '55%');
              }
          } else if (!$(cmpBreadcrumb).length) {
              if($(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")){
                  $(userdropdownId).css('top', '56.1%');
              } else if ($(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                  $(userdropdownId).css('top', '45%');
              } else if(!$(mchpJumplinks).length && !($(headeralertwrapper).hasClass("show"))) {
                  $(userdropdownId).css('top', '61.17%');
              }else if(!$(mchpJumplinks).length && $(headeralertwrapper).hasClass("show")) {
                  $(userdropdownId).css('top', '70.9%');
              }
          } else {
              //
          }
        }
       }

  if(!mobileDevice) {
      const headerAlertHeight = ($(mchpHeaderAlertWrapper).length > 0) ? $(mchpHeaderAlertWrapper).height() + parseInt($(mchpHeaderAlertWrapper).css('padding'),10)*2 : 0;
  $(mchpMegaMenuClassName).css('top', headerAlertHeight + $(".mchp-bg-container").height() + $(mchpNavigationList).height() + parseInt($(mchpNavigationList).css('padding'),10)*2 +"px");
  }

  $(mobileCloseEle).on('click', closeMobileMenu);
  searchIcon.on('click', function() {
  $('#' + myMicrochipMenuEle).removeClass("HideMyMicrochipMenu").addClass("HideMyMicrochipMenu");
  showSearchPanel();
  });

  //The menu will close if the user clicks outside the menu
  $(body).on('click', bodyCloseMenu);
  $('.mchp-navigation_list').on('click', (e) => {
      e.stopPropagation();
  });
  hamburgerHolder.on('click', (e) => {
      e.stopPropagation();
  });

  function closeMobileMenu() {
      $(menuCloseTablet).addClass(hideContent);
      $(megaMenuEleActive).removeClass('is-active');
      $(mchpTopBarHidden).removeClass('is-hidden');
      $(mchpTopBarHideChildren).removeClass(mchpTopBarHidenChildrenClass);
      $('#' + myMicrochipMenuEle).addClass("HideMyMicrochipMenu");
      closeSearchBox();
  }

  function closeSearchBox() {
    try {
          searchIcon.removeClass('active');
          searchSuggestion.hide();
          searchText.hide();
          clearsearch.addClass(hideContent);
      } catch (err) {
          console.error('Unable to close search results list');
      }
  }

  function showSearchPanel() {
      hamburgerHolder.removeClass('is-hidden');
      headerIcons.removeClass('is-active');
  }


  function bodyCloseMenu(event) {
      $(menuCloseTablet).addClass(hideContent);
      $(megaMenuEleActive).removeClass('is-active');
      $(mchpTopBarHidden).removeClass('is-hidden');
      $(mchpTopBarHideChildren).removeClass(mchpTopBarHidenChildrenClass);

      const tgtEl = event.target;

      if ((tgtEl.nodeName === "A" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'user-icon'))
          ||
          (tgtEl.nodeName === "IMG" && (tgtEl.attributes || tgtEl.attributes.alt && tgtEl.attributes.alt.value === 'microchip-user-icon'))
      ) {
          closeSearchBox();
      } else if (tgtEl.nodeName === "IMG"
          && (tgtEl.attributes || tgtEl.attributes.class && (tgtEl.attributes.class.value === 'search-icon active' || tgtEl.attributes.class.value === 'search-icon'))) {
          $('#' + myMicrochipMenuEle).addClass("HideMyMicrochipMenu");
      } else if (tgtEl.nodeName === "I" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'fas fa-times')) {
          closeUserPopupAndSearchBox();
      } else if ((tgtEl.nodeName === "DIV" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'mchp-searchbar'))
          ||
          (tgtEl.nodeName === "INPUT" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'mchp-searchbar-input'))
          ||
          (tgtEl.nodeName === "DIV" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'mchp-searchterm-container'))
          ||
          (tgtEl.nodeName === "DIV" && (tgtEl.attributes || tgtEl.attributes.class && tgtEl.attributes.class.value === 'mchp-searchbar-suggestion'))
      ) {
          // dont close the searchbar popup if opened
      } else {
          closeUserPopupAndSearchBox();
      }
  }

  function closeUserPopupAndSearchBox() {
      $('#' + myMicrochipMenuEle).addClass("HideMyMicrochipMenu");
      closeSearchBox();
  }

  $(window).on('resize', function (evt) {
      // The jumplinks bar is only visible on desktop so the header height can change if you switch from desktop
      // to mobile/tablet or vice versa on a page with jumplinks. So just always reset the header padding on resize.
      getMobileDevices();
      if (evt.target.outerWidth >= 1200 && $(mobileCloseEle).is(':visible')) {
          $(megaMenuEleActive).removeClass('is-active');
          $(mchpTopBarHidden).removeClass('is-hidden');
          $(mchpTopBarHideChildren).removeClass(mchpTopBarHidenChildrenClass);
      }
  });

  $(window).on('change', function (evt) {
      if(notMobileScreenMediaQuery.matches) {
    const container = $(mobileSearchDropdown);
          if(container.is(evt.target)){
      $(mobileSearchDropdown).css('width',75+(($(mobileSearchDropdownSelectedOption).text().length)*8)+"px");
          }
      } else if(onlyMobileScreenMediaQuery.matches) {
       $(mobileSearchDropdown).css('width','100%');
      } else {
          const container = $(searchDropdown);
          if(container.is(evt.target)){
      $(searchDropdown).css('width',75+(($(searchDropdownSelectedOption).text().length)*8)+"px");
          }
      }
  });
  $(window).on('load', function (evt) {
        setSearchDropdownWidth();
        getMobileDevices();
        setVisibilityOnMobile();
   });
    $(window).on('resize', function (evt) {
        setSearchDropdownWidth();
         if(!mobileDevice) {
                $(mchpHeaderSearchWrapperClassName).removeClass(hideContent);
                $(mchpHeaderClass).removeClass(mchpHeaderTabletViewSpaceCLass);
                $(mchpHeaderClass).removeClass(mchpHeaderMobileViewSpaceCLass);
                 headerIcons.removeClass('is-active');
            } else if(onlyMobileScreenMediaQuery.matches) {
                $(mobileSearchDropdown).css('width','100%');
            } else {
                $(mchpHeaderClass).removeClass(mchpHeaderMobileViewSpaceCLass);
                if($('#' + myMicrochipMenuEle).hasClass('show')) {
                   $(mchpHeaderClass).removeClass(mchpHeaderTabletViewSpaceCLass);
                    $(mchpHeaderSearchWrapperClassName).addClass(hideContent);
                  } else {
                  $(mchpHeaderClass).addClass(mchpHeaderTabletViewSpaceCLass);
                }
            }
           setVisibilityOnMobile();
    });

    function setSearchDropdownWidth() {
         if(notMobileScreenMediaQuery.matches ) {
               $(mobileSearchDropdown).css('width',75+(($(mobileSearchDropdownSelectedOption).text().length)*8)+"px");
          } else {
              $(searchDropdown).css('width',75+(($(searchDropdownSelectedOption).text().length)*8)+"px");
            }
         }


      listItems.forEach((item, index) => {
        item.addEventListener('click', (e) => {
          mainItem = e.currentTarget;
          subMenu.forEach((div) => {
            div.setAttribute('tabindex', '-1');
          });
          subMenu[index].setAttribute('tabindex', '0');
          subMenu[index].focus();
          $(megaMenuCategoryClassName).show();
        });
          $('.category-panel ul li').on( 'keydown', function( e ) {
              if( e.which === 9 ) {
                  const lengthOfli = $(this).closest(".category-panel .subcategories-list").find("li").length;
                  if($(this).is($(this).closest(".category-panel .subcategories-list").find("li")[lengthOfli-1])){
                      $(this).closest('.category-panel').find('.close-submenu').click();
                      mainItem.setAttribute('tabindex', '0');
                      mainItem.focus();
                  }
              }
          } );
      });
  // Assigns roles to various HTML elements to satisfy ADA reguirements
  $(document).ready(function() {
      $(".header").attr("role", "banner");
      $(".mchp-nav-container").attr("role", "navigation");
      $(".basicbanner").attr("role", "banner");
      $(".search").attr("role", "search");
      $(".mc-breadcrumb").attr("role", "breadcrumb");
      $(".chatcontainer").attr("role", "chat");
      $(".videofeature").attr("role", "video");
      $("form").attr("role", "form");
      $(".mchp-footer").attr("role", "footer");
      $(".paramchart-left-nav").attr("role", "navigation");
      $(".leftNavContainer").attr("role", "navigation");
      $("#myDropdown .sub-box ul li").last().click(function() {
          window.localStorage.removeItem('AccessToken');
          window.localStorage.removeItem('IdToken');
          window.localStorage.removeItem('favDocuments');
      });
      getMobileDevices();
      getCartCountAndTotal();
      setAccessAndIdToken();
    });

     function setAccessAndIdToken() {
         const authenticationKey = window.localStorage.getItem('oidc.user:https://stagelogin.microchip.com/ssologin/:AuthenticatedUserapi') || window.localStorage.getItem('oidc.user:https://login.microchip.com/ssologin/:AuthenticatedUserapi');
         if (authenticationKey) {
             try {
                 const { access_token, id_token } = JSON.parse(authenticationKey);
                 window.localStorage.setItem('AccessToken', access_token);
                 window.localStorage.setItem('IdToken', id_token);
             } catch (error) {
                 console.error('Error parsing Authentication Key:', error);
             }
         }
     }

     function getMobileDevices() {
         if(window.matchMedia("(max-width: 1199px)").matches) {
              mobileDevice = true;
             } else {
              mobileDevice = false;
           }
        }
       $(document).keydown(function(e) {
               escKeyHandler(e);
              });

        function escKeyHandler(e) {
                   // ESCAPE key pressed
          if (e.keyCode === 27) {
                  $('#' + myMicrochipMenuEle).removeClass("show");
                  $(mchpMegaMenuClassName).addClass(hideContent);
                  searchSuggestion.hide();
                  $(megaMenuCategoryClassName).hide();
                   }
          };
});

function getCartCountAndTotal () {
    const microchipCartDetailsAPIEndpoint = $(".header .cmp-cart-section").data("microchipcartdetailsapiendpoint");
    $.ajax({
        url: microchipCartDetailsAPIEndpoint,
        type: "GET",
        cache: false,
        crossDomain: true,
        xhrFields: { withCredentials: true },
        success: function (responsedata) {
            $(".header .cmp-cart-section .header-icon-cart-count").html(responsedata.ItemCount);
            if (responsedata.Total) {
                $(".header .cmp-cart-section .cart-total").html(responsedata.Total);
            }
            if (responsedata.Items !== null && responsedata.Items !== undefined && responsedata.Items.length > 0 ) {
                $(".header .cart-popup table tbody tr").remove();
                responsedata.Items.forEach(function(item) {
                    var newRow = $("<tr><td><img src='" + item.ImageUrl + "'><a href='" + item.ProductUrl + "'>" + item.Product + " </a></td><td>" + item.Quantity + "</td></tr>");
                    $(".header .cart-popup table tbody").append(newRow);
                });
            }

        }
    });
}

$(".cmp-cart-section").on({
    mouseenter: function(){
        $(".cart-popup-container").css("display", "block");
    },
    mouseleave: function(){
        const cartPopupContainer = $(".cart-popup-container");
        setTimeout(function () {
            if (cartPopupContainer.is(":hover")) {
                cartPopupContainer.hover(function(){
                    $(this).css("display", "block");
                }, function(){
                    $(this).css("display", "none");
                });
            } else {
                 cartPopupContainer.css("display", "none");
            }
        }, 100);
    }
});



const devAEM = 'http://localhost:4502';
const qaAEM = 'aem.microchip.com';
const qaAEMPublishLatest = 'aem-qa.microchip.com';
const stageAEM = 'aem-stage.microchip.com';
const nonAEMQADomain='https://test.microchip.com';
const nonAEMStageDomain= 'https://stageapps.microchip.com';
const loginPageName = 'default.aspx'; //TODO - change to GatedLogin.aspx' if come back to popup approach;
const popupIdSelector = '#login-popup';
const popupFrameIdSelector = '#gated-login-frame';
const gatingDelayTime = 100; // in milliseconds

let onMobile = false;
let onProd = true;
let rootPath = location.protocol + "//" + location.host + '/';
let apiRootPath = location.protocol + "//" + location.host + '/';

//TODO make path case insensitive
//All base path list, under which any asset which be subject to gating checks/flows
//it can have both aem and ww1 path
//breaking assignment code into 2 lines, just to satisfy code quality rule of not crossing 180 chars per line
const pathToSecure =
`/content/dam/mchp/documents,/content/dam/mchp/softwarelibrary,/content/dam/mchp/en/documents,
://ww1.microchip.com/downloads/Secure,://ww1.microchip.com/downloads/secure,
://ww1.microchip.com/downloads/aemDocuments/documents/fpga/media-content/fpga`;

const aemAssetBasePath = "/content/dam/mchp/";
const wwwRegisterSiteName = "ssologin";
let wwwRegisterUrl = rootPath + wwwRegisterSiteName;

let openDownloadFlag = false;
let secureDownloadFlag = false;
let currentGatingType = 'HARDGATE';
let currentAssetName, currentAssetLink;
let signinText = "Please sign in or register if you would like to receive more information on <<AssetName>> ";

let ProdApiAppName = "Microchip.Com.Api"; //In prod it is named as Webdata - so change accordingly
let postSuccessCallback;

let currentClickedElementNeedingLogin = null;
let isUserLoggedIn = false;

$(function() {
"use strict";

setTimeout(() => {

    setSharedInformation();

    if (!isLoggedIn()) {
        setupGating();
    }

    applyGating();
        }, gatingDelayTime);
});

//this shall be value inside "data-gating-callback" attribute of any anchor needing function call post login/register
//Note: this is for demo purpose only so in future we are always aware which kind of methods will be suppored as callback ones
function callBackDemo(elementClicked) {

	console.log(elementClicked);

	//NOTE: callback logic can invoke any of other custom const/let methods,
	//but callback function itself can't be const/let function

}

// only runs when user is on - NON-PROD aem author domains
// helps to mimic presence of cookie post login/register(as would be in PROD) hence avoids cross site cookie permission issue, helps in testing
const setLoginCookieForCurrentAEMDomainInNonProdEnvt = function(email,userguid) {

	if (!onProd) {
		document.cookie = "wwwmicrochipuser=" + email + "; expires=" + new Date(new Date().setDate(new Date().getDate() + 1)).toISOString() + "; path=/";
		document.cookie = "asdfdiuglkjhrsu=" + userguid + "; expires=" + new Date(new Date().setDate(new Date().getDate() + 1)).toISOString() + "; path=/";
	}
}

const setSharedInformation = function() {
	const source = window.location.origin.toLowerCase().trim();
	apiRootPath = 'https://www.microchip.com/';
	rootPath = 'https://login.microchip.com/';

	if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
		onMobile = true;
	}

	if (source.indexOf(devAEM.toLowerCase().trim()) > -1) {
		onProd = false;
		rootPath = 'https://testlogin.microchip.com/';
		apiRootPath = 'https://test.microchip.com/';
	} else if (source.indexOf(qaAEM.toLowerCase().trim()) > -1 || source.indexOf(qaAEMPublishLatest.toLowerCase().trim()) >-1 || source.indexOf(nonAEMQADomain.toLowerCase().trim()) > -1){
		onProd = false;
		rootPath = 'https://testlogin.microchip.com/';
		apiRootPath = 'https://chn-vm-tweb/';
	} else if (source.indexOf(stageAEM.toLowerCase().trim()) > -1 || source.indexOf(nonAEMStageDomain.toLowerCase().trim()) > -1) {
		onProd = false;
		rootPath = 'https://stagelogin.microchip.com/';
		apiRootPath = 'https://stageapps.microchip.com/';
	}

	if (onProd) {
		ProdApiAppName = "Webdata";
	}

	wwwRegisterUrl = rootPath + wwwRegisterSiteName;
}

const AssetTypes = {
	DownloadableAnchors: "Downloadable Anchors",
	NonDownloadableAnchorsWithCallBack: "Non Downloadable Anchors With CallBack", //like for symbols dropdown items
    DownloadableAnchorsWithCallBack: "Downloadable Anchors With CallBack", //like for search page results
    AnchorsWithOpenClickHandlerHavingDownload:"AnchorsWithOpenClickHandlerHavingDownload", //Prelogin
	AnchorsWithSecuredClickHandlerHavingDownload:"AnchorsWithSecuredClickHandlerHavingDownload" //Postlogin
};


const generateNonce = function(length) {
    let text = "";
    const allowed = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for(let i = 0; i < length; i++) {
        text += allowed.charAt(Math.floor(Math.random() * allowed.length));
    }
    return text;
}

const isLoggedIn = function() {

	isUserLoggedIn = !(readCookie('wwwmicrochipuser') === null || readCookie('wwwmicrochipuser') === undefined || localStorage.getItem("IdToken") === null);

	return isUserLoggedIn;
}

const setupGating = function() {

	window.addEventListener('message', gatedLoginResponseReceiver, false);
	configureLoginPopup();
}

const configureLoginPopup = function() {
	$(popupIdSelector).on('shown.bs.modal', function() {

		setTimeout(function() {
			$(popupIdSelector + ' .modal.hide.fade')[0].scrollIntoView();
		}, 6000);
	});
}

//takes anchor[]
const applyGating = function() {
	gateElements();
}

const gateElements = function() {
    const assetAnchorsSelector = findAssetAnchorsSelector();
    attachClickHandler(assetAnchorsSelector);
}

//returns anchor[]
const findAssetAnchorsSelector = function(shallBlock) {

	let assetAnchorsSelector = '';

		const assetToGateSelectorPattern = 'a[href*="<pathPlaceholder>"]';
		const onlineDocToGateSelectorPattern = 'a[secured-onlinedoc*="yes"]';

		let assetToGateSelector = '';
		$.each(pathToSecure.replaceAll('\n','').split(','), function(index, item) {
			assetToGateSelector += assetToGateSelectorPattern.replace('<pathPlaceholder>', item) + ',';
		});

		//Add Online Docs link to secure
		assetToGateSelector += onlineDocToGateSelectorPattern + ',';
		assetAnchorsSelector = assetToGateSelector + ' [data-gating-callback]';

	return assetAnchorsSelector;
}

//assign click handler for each gated links passing current href as param
const attachClickHandler = function(assetAnchorsSelector) {

    //unbind click handler attached from gating js flows-
    //...only those ones, which are attached by .on will be removed and re-added
    //to handle for cases like site-search which re-invokes applygating method.
    //TODO - co-ordinate with search members and get call to gating flow removed as wont be needed as per new gating approach
    $(document.body).off('click', assetAnchorsSelector,gatedElementClickHandler);

    $(document.body).on('click', assetAnchorsSelector, {
	}, gatedElementClickHandler);
}

const gatedElementClickHandler = function(event) {

	const assetAnchor = $(this);
	const isMediumSecuredOnly = assetAnchor.attr('is-medium-secure-only');
	let canBeGated = true;

	// Click-Wrapped assets with only salesforce form enabled cannot be gated.
	if (typeof isMediumSecuredOnly !== "undefined" && isMediumSecuredOnly === "yes") {
		canBeGated = false;
	}

	if (canBeGated) {
		assetAnchor.attr('name', "HARDGATE");
		assetAnchor.attr('data-gating-type', "HARDGATE");
		assetAnchor.attr('data-href', assetAnchor.attr('href'));

		try {
			if (!isLoggedIn()) {
				event.preventDefault();
				event.stopPropagation();

				// if it is downloadable type of gated link, then check if secured or not, else straight just invoke show login flow.
				if (hasDataCallBackDefined(assetAnchor)) {
					checkSecureCallBack(true, assetAnchor);
				}else if (hasDataCallBackOpenDownloadDefined(assetAnchor)){
					checkSecureCallBack(false, assetAnchor);
				} else if (hasDataCallBackSecureDownloadDefined(assetAnchor)) {
						isSecuredAsset(assetAnchor, checkSecureCallBackSecured);
			} else {
					isSecuredAsset(assetAnchor, checkSecureCallBack);
				}

			} else {
				event.preventDefault();
				event.stopPropagation();
				CommonLoggedInHandler(assetAnchor, true);
			}
		} catch (error) {
			alert('Unable to download due to some technical error! Please re-try later.');
		}
	}
};

const checkSecureCallBackSecured = function(isSecured, assetAnchor) {

	//if secured, handle via login shown else call common handler
	if (isSecured) {
        secureDownloadFlag = false;
		checkSecureCallBack(true, assetAnchor);
	} else {
        DownloadAsset(assetAnchor);
        secureDownloadFlag = true;
        checkSecureCallBack(true, assetAnchor);
	}
}

//resolves promise and further client method needs to call needed callback
const getJsonData = (apiUrl) => {
	return new Promise((resolve, reject) => {
		$.ajax({
			url: apiUrl,
			type: 'GET',
			success: function(data) {
				resolve(data);
			},
			error: function(error) {
				reject(error);
			},
		});
	});
};

const isSecuredAsset = function(assetAnchor, secureCheckCallBackFunction) {

	let isSecured = assetAnchor.attr('data-gating-type') === "HARDGATE";
	const assetFullPath = assetAnchor.attr('data-href');

	const isAemAsset = assetFullPath.indexOf(aemAssetBasePath) >= 0 ? true : false;

	if (!isAemAsset) {
		secureCheckCallBackFunction(isSecured, assetAnchor);
	}
	//else-if aem asset then call servlet - post ajax; in success response; call callback method
	//aem assets don't follow a given path format to differentiate secure vs non-secure ones,
	//hence need to call server to check mchp:secure metadata for same
	else {
		//for aem assets, consider default as secured true for default between "secured VS NOT"
    	isSecured = true; //set from ajax below

		const assetPath = assetFullPath.substring(assetFullPath.indexOf('/content/mchp'));

		getJsonData('/bin/gating/validateifsecuredasset?url=' + assetPath)
			.then((data) => {

				if (data !== null && data !== undefined && data.isSecured !== null && data.isSecured !== undefined) {
					isSecured = data.isSecured;
				} else {
					//decide what should be default "secured VS NOT, if server gave unexpected data/error - keep inline with server's default
					isSecured = true;
				}

				secureCheckCallBackFunction(isSecured, assetAnchor);
			})
			.catch((error) => {
				secureCheckCallBackFunction(isSecured, assetAnchor);
			});
	}
};

const setResetPrePostLoginData = function(shallClean, assetAnchor) {

	if (shallClean) {
		currentAssetName = '';
		currentAssetLink = '';

		currentClickedElementNeedingLogin = null;
	} else {
		const gatingType = assetAnchor.attr('name').trim();
		currentGatingType = gatingType;

		currentAssetName = (assetAnchor.attr('title') !== undefined) ? assetAnchor.attr('title').trim() : assetAnchor.text().trim();
		currentAssetLink = assetAnchor.attr('data-href');
		currentClickedElementNeedingLogin = assetAnchor;
	}
};


const openGatingPopup = function(assetAnchor) {

	let loginUrl = '';

	if (!hasDataCallBackDefined(assetAnchor)) {
		signinText = "Please sign in or register to download <<AssetName>> ";

		let assetLink = assetAnchor.attr('data-href');
		assetLink = (assetLink.indexOf('/') === 0) ? window.location.origin + assetLink : assetLink;
		loginUrl = wwwRegisterUrl+'/connect/authorize/callback?client_id=AEM&redirect_uri='+wwwRegisterUrl+'/GatedLogin/GatedLogin&nonce='+generateNonce(18);
		loginUrl = loginUrl + '&response_type=id_token token&scope=AuthenticatedUserapi openid&acr_values=IsFromGating:true&state=' + assetLink;
	} else {
		signinText = "Please sign in or register to access this feature <<AssetName>> ";
		loginUrl = wwwRegisterUrl+'/connect/authorize/callback?client_id=AEM&redirect_uri='+wwwRegisterUrl+'/GatedLogin/GatedLogin&nonce='+generateNonce(18);
		loginUrl = loginUrl + '&response_type=id_token token&scope=AuthenticatedUserapi openid&acr_values=IsFromGating:true';
	}

	const anchor = document.createElement('a');
	Object.assign(anchor, {
			target: '_blank',
			href: loginUrl,
			rel: 'opener'
		})
		.click();
};
const invokeCallBack = function(assetAnchor){
	const gatingCallBack = assetAnchor.attr('data-gating-callback');

	if (gatingCallBack !== null && gatingCallBack !== undefined) {
		invokePredefinedCallBack(assetAnchor, gatingCallBack);
	}
}

const trackingAndDownload = function(assetAnchor, isInvokedFromLogin){
	TrackDownload(assetAnchor, isInvokedFromLogin);
    DownloadAsset(assetAnchor);
}

const checkSecureCallBack = function(isSecured, assetAnchor) {

	//if secured, handle via login shown else call common handler
	if (isSecured) {
		setResetPrePostLoginData(false, assetAnchor);
		openGatingPopup(assetAnchor);
	} else {
		CommonLoggedInHandler(assetAnchor, true); //pass isInvokedFromLogin, true always, as anyways tracking will not be done, as it is not secured asset
	}
}

const checkSecureCallBackOpen = function(isSecured, assetAnchor) {
	//if secured, handle via login shown else call common handler
	if (isSecured) {
		setResetPrePostLoginData(false, assetAnchor);
		openGatingPopup(assetAnchor);
	} else {
            if (hasDataCallBackOpenDownloadDefined(assetAnchor)) {
				openDownloadFlag = true;
			}
		CommonLoggedInHandler(assetAnchor, true); //pass isInvokedFromLogin, true always, as anyways tracking will not be done, as it is not secured asset
	}
}
const CommonLoggedInHandler = function(assetAnchor, isInvokedFromLogin) {

	const assetType = getAssetType(assetAnchor);

	if (assetType === AssetTypes.DownloadableAnchors) {
        openDownloadFlag = false;
		trackingAndDownload(assetAnchor, isInvokedFromLogin);
	} else if (assetType === AssetTypes.NonDownloadableAnchorsWithCallBack) {
			invokeCallBack(assetAnchor);

	} else if (assetType === AssetTypes.AnchorsWithSecuredClickHandlerHavingDownload) {
		invokeCallBack(assetAnchor);
        if (secureDownloadFlag === false) {
			trackingAndDownload(assetAnchor, isInvokedFromLogin);
		}
        secureDownloadFlag = false;
	} else if (assetType === AssetTypes.AnchorsWithOpenClickHandlerHavingDownload) {
		invokeCallBack(assetAnchor);
        if (!isLoggedIn()) {
			isSecuredAsset(assetAnchor, checkSecureCallBackOpen);
		}
        else {
			trackingAndDownload(assetAnchor, isInvokedFromLogin);
		}
        setResetPrePostLoginData(true, null);
	}

	//clean/reset page for gating context
	setTimeout(() => {
               if (assetType !== AssetTypes.AnchorsWithOpenClickHandlerHavingDownload){
        setResetPrePostLoginData(true, null);}
	}, 300);

}

const gatedLoginResponseReceiver = function(event) {

	//make sure call came from .Com based wwwregister post login/registrations
	if (rootPath.toLowerCase().trim().indexOf(event.origin.toLowerCase().trim()) > -1) {

		try {

			//if it is invoked from source/apps, which we are not interested in
			//then it may throw an error as it may not be a json string, rather might be a json object already
			const messageObject = JSON.parse(event.data);

			//post login/register page dom load
			if (messageObject.loadedWWWRegisterWindow !== null && messageObject.loadedWWWRegisterWindow !== undefined && messageObject.loadedWWWRegisterWindow === true) {

				const url = messageObject.url;
				if (url.toLowerCase().indexOf('registerstep1.aspx') >= 0) {
					$(popupIdSelector).addClass('wider');
				} else {
					$(popupIdSelector).removeClass('wider');
				}

			}
			//else post login/register action
			else if (messageObject.loginState !== null && messageObject.loginState !== undefined) {

				isUserLoggedIn = messageObject.loginState;
				const loggedInUserEmail = messageObject.loggedInUserEmail;
				const loggedInUserGuid = messageObject.loggedInUserGuid;
				const isNewlyRegisteredUser = (messageObject.isNewlyRegisteredUser !== null && messageObject.isNewlyRegisteredUser !== undefined) ?
				messageObject.isNewlyRegisteredUser : false;
				localStorage.setItem('AccessToken', messageObject.accessToken);
				localStorage.setItem('IdToken', messageObject.idToken);
				PostLoginRegisterCommonHandler(isUserLoggedIn, isNewlyRegisteredUser, loggedInUserEmail, loggedInUserGuid);
			}
		} catch (exp) {
			//ignore as there are unknown errors
		}
	} else {
		return;
	}
}

const PostLoginRegisterCommonHandler = function(isLogInRegisterSucceeded, isNewlyRegisteredUser, loggedInUserEmail, loggedInUserGuid) {
	closeGatingPopup();

	setLoginCookieForCurrentAEMDomainInNonProdEnvt(loggedInUserEmail, loggedInUserGuid);

    if (hasDataCallBackOpenDownloadDefined(getCurrentGatedElement()) && isLogInRegisterSucceeded ) {
		openDownloadFlag = true;
	}

	CommonLoggedInHandler(getCurrentGatedElement(), !isNewlyRegisteredUser);

}

const closeGatingPopup = function() {

	const popupElement = $(popupIdSelector);
	//TODO - fix issue in close, currently not closing rather just reloading frame....
	popupElement.modal('hide');

	//Falback - if above doesnt work, it will work and keep modal closed
	popupElement.find('a[href="#close-modal"]').click();

}

const getCurrentGatedElement = function() {

	const currentElement = currentClickedElementNeedingLogin;
	return currentElement;
}


const DownloadSecuredAsset = function(anchor) {

	const downloadLink = anchor.attr('data-href');
	downloadGatedFile(downloadLink);
}

const downloadGatedFile = function(filePath) {

	var link = document.createElement('a');
	link.href = filePath;
	link.download = filePath.substr(filePath.lastIndexOf('/') + 1);

	//TODO - keep it under close watch, if generated popup block but allows download then let it be,
	//else if blocks download as well, then remove it
	//try to bring it back, as of now removed as invokes popup blocking - //link.target = "_blank";

	link.click();
}

const DownloadAsset = function(anchor) {
	DownloadSecuredAsset(anchor);
}

//track only when are secured ones
const TrackDownload = function(assetAnchor, isInvokedFromLogin) {
	isSecuredAsset(assetAnchor, function(isSecured) {

		if (isSecured) {
			//to capture user download history to DB - "uvw_GetTrackingDownloadsReport"
			TrackDownloads(assetAnchor, isInvokedFromLogin);
		}
	});
}

const TrackDownloads = function(assetAnchor, isInvokedFromLogin) {
	try {
		if (isLoggedIn()) {

			const currentAssetLinkTemp = assetAnchor.attr('data-href') === undefined ? assetAnchor.attr('href') : assetAnchor.attr('data-href');

			let docName = (assetAnchor.attr('title') !== undefined && assetAnchor.attr('title') !== "") ? assetAnchor.attr('title').trim() : assetAnchor.text();
			if (docName === undefined || docName.trim() === 'Download') {
				docName = currentAssetLinkTemp.substr(currentAssetLinkTemp.lastIndexOf('/') + 1);
			}

			var trackingDownloadsInfo = {
				emailAddress: readCookie('wwwmicrochipuser'),
				DocumentName: docName.trim(),
				//TODO - check if it is needed in new system?? mostly not - //contentID: documentIDForTrackDownload,
				link: currentAssetLinkTemp.trim(),
				sourcePageLink: window.location.href,
				isExistingUser: isInvokedFromLogin
			};
			CaptureTrackDownloads(trackingDownloadsInfo);

		}
	} catch (error) {
		console.log(error);
	}
}


const CaptureTrackDownloads = function(trackingDownloadsInfo) {
	try {
		$.ajax({
			type: "POST",
			//For prod it is "webdata" and for rest all environments it's "microchip.com.api"
			url: apiRootPath + ProdApiAppName + '/api/Tracking/TrackDownloads',
			//the url to call
			data: JSON.stringify(trackingDownloadsInfo),
			dataType: 'json',
			contentType: 'application/json'
		}).
		success(function(response) {
			//do we need anything here?
		}).fail(function(err) {
			console.log(err);
		});
	} catch (error) {
		console.log(error);
	}
}

//returns boolean
const getAssetType = function(assetAnchor) {

	const gatingCallBack = assetAnchor.attr('data-gating-callback');
	var assetValue = assetAnchor.attr('href');
    if(assetValue != null || assetValue !== undefined){
        if(!(assetValue.startsWith("http://") || assetValue.startsWith("https://") || assetValue.startsWith("www") || assetValue.startsWith("/"))){
                    assetValue = "#";
            };
    }
	const gatingCallBackSecure = assetAnchor.attr('data-gating-callback-secure');

	if (gatingCallBack === null || gatingCallBack === undefined || openDownloadFlag === true) {

		return AssetTypes.DownloadableAnchors;
	} else if (assetValue === '#' || assetValue === null || assetValue === undefined){
		return AssetTypes.NonDownloadableAnchorsWithCallBack;
	}
	else  {
		if (gatingCallBackSecure === "true" ) {
	   	    return AssetTypes.AnchorsWithSecuredClickHandlerHavingDownload;
	   	}
		else {
		    return AssetTypes.AnchorsWithOpenClickHandlerHavingDownload;
		}
	}
};

const hasDataCallBackDefined = function(assetAnchor) {
	return getAssetType(assetAnchor) === AssetTypes.NonDownloadableAnchorsWithCallBack;
};

const hasDataCallBackOpenDownloadDefined = function(assetAnchor) {
	return getAssetType(assetAnchor) === AssetTypes.AnchorsWithOpenClickHandlerHavingDownload;
};

const hasDataCallBackSecureDownloadDefined = function(assetAnchor) {
	return getAssetType(assetAnchor) === AssetTypes.AnchorsWithSecuredClickHandlerHavingDownload;
};

const invokePredefinedCallBack = function(element, predefinedCallBack) {

	try {
		//for this to work, callback method of given page must be globally defined and accessible on windows object,
		//and should not be defined/declared with const or let keywords
		//like function callBack(elementClicked){
		window[predefinedCallBack](element);

	} catch (error) {
		console.log(error);
		if (error.message.indexOf('is not a function') >= 0) {
			//TODO - find ways by which error may come and handle by some alternate call approach
		}

	}
};

const readCookie = function(name) {
	var nameEQ = encodeURIComponent(name) + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) === ' ') {
			c = c.substring(1, c.length);
		}
		if (c.indexOf(nameEQ) === 0) {
			return decodeURIComponent(c.substring(nameEQ.length, c.length));
		}
	}
	return null;
}

$(document).ready(function() {

    //Event Handler to move the cursor to top of the table when clicked on pagination
    $(document).on('page.dt','.dataTables_wrapper', function() {
        var tableHeader = $(this).find('table');
        $('html, body').animate({ scrollTop: tableHeader.offset().top - 270 }, 'fast');
    });
});

function wrapHeaderTitle(thead) {
    $(thead).find('th').each(function() {
        var title = $(this).html();
        if(!title.startsWith("<div>")) {
            $(this).html('<div>'+ title +'</div>');
        }
    });
}


$(document).ready(function () {
    const videoFeatures = $(".videofeature");
    let autoplayVideoFound = false;
    const VIDEO_ELEM = 'video';

    const autoplayVideo = (() => {
        let video = null;
        const parsedHash = new URLSearchParams(
            window.location.hash.substr(1) // skip the first char (#)
        );

        if (parsedHash.has(VIDEO_ELEM) && !autoplayVideoFound) {
            video = parsedHash.get(VIDEO_ELEM);
        }

        return video;
    })();

    videoFeatures.each(function (index, videoFeature) {

        const updateVideoPlayer = (idx, thumbnail, autoPlay = false, showOverlay = false) => {
            player_container.find('.video_player').hide();
            playingVideo && playingVideo.pause();
            const player = player_container.find(`#video_${index}_${idx}`);
            const vidElem = player.find(VIDEO_ELEM)[0];
            player.show();
            if (autoPlay) {
                vidElem.style.opacity = 1;
                vidElem.style.visibility = 'unset';
                overlay.hide();
                vidElem.play();
                playingVideo = vidElem;
            } else if (showOverlay) {
                player_container.append(overlay);
                overlay.find('.thumbnail').html(thumbnail);
                setTimeout(function () {
                    overlay.find('.mchp-play-text').fadeIn();
                },300);
            }
        }

        const appendVideo = (video, idx) => {
            const new_player = $(`<div id="video_${index}_${idx}" class="video_player" style="display: none;"></div>`)
            new_player.append(video);
            player_container.append(new_player);
        }

        const updateContent = (title, pageTitle, description, buttons) => {
            if (pageTitle !== title.text().trim()) {
                // title is not default page title
                $(content_container).find('.mchp-component-title').html(title.html());
            } else {
                $(content_container).find('.mchp-component-title').html(originalTitle.html());
            }

            if (description.text().trim()) {
                // not empty
                $(content_container).find('.mchp-text-container').html(description.html());
            } else {
                $(content_container).find('.mchp-text-container').html(originalDescription.html());
            }

            if (buttons.text().trim()) {
                // not empty
                $(content_container).find('.mchp-button-container').html(buttons.html());
            } else {
                $(content_container).find('.mchp-button-container').html(originalButtons.html());
            }

            hideSecondaryButton(content_container);
        }

        const hideSecondaryButton = (container) => {
            const secondary_button = $(container).find('.mchp-secondary-button');
            if (secondary_button.find('div').find('div').length === 0) {
                // empty div, button not used
                setTimeout(function () {
                    secondary_button.hide();
                }, 200);
            }
        }

        const getPlayer = (container) => {
            let player = container.find('.video_player:visible')[0];
            if (player) {
                return player;
            }
            return container.find('.video_player')[0];
        }

        let playingVideo;
        const container = $(videoFeature).find('.mchp-player-container');

        const editMode = container.data('wcmmode') === 'edit';
        if (editMode) {
            // no need to proceed on edit mode
            return;
        }

        const player_container = $(videoFeature).find('.mchp-player', '.mchp-player-container__right');
        const content_container = $(videoFeature).find('.mchp-player-container__left');
        const video_items = $(videoFeature).find('.mchp-video-item');
        const img_style = $(player_container).data('img-style');
        const player_overlay_thumbnail = $(player_container).find('img','.mchp-player-overlay');

        const playlist = $(container).data('playlist');
        const playbuttonText = $(container).data('playbutton-text');
        const overlay = $('<div class="mchp-player-overlay"><div class="thumbnail"></div></div>');
        const playButton = $(`<button aria-label="Play Button" class="mchp-play-button ${playbuttonText ? 'withText' : ''} "><i class="fas fa-play"></i></button>`);
        const playText = playbuttonText ? $(`<div class="mchp-play-text">${playbuttonText}</div>`) : '';
        overlay.append(playButton);
        overlay.append(playText);

        const originalTitle = $(content_container).find('.mchp-component-title').clone();
        const originalDescription = $(content_container).find('.mchp-text-container').clone();
        const originalButtons = $(content_container).find('.mchp-button-container').clone();

        // position thumbnail as cover or contain
        $(player_overlay_thumbnail).css('object-fit', img_style);
        $(player_overlay_thumbnail).attr("alt",$(content_container).find('.mchp-component-title h3').html());
        /***
         * The image must be set to 100% to fit the div.
         * Uncomment to revert changes.
         *
        if (img_style === 'cover') {
            $(player_overlay_thumbnail).css('width', '100%');
        } else {
            $(player_overlay_thumbnail).css('width', 'unset');
        }
         ***/
        
        // handle clicking overlay play button
        player_container.on('click', '.mchp-play-button', function (evt) {
            overlay.hide();
            const vidPlayer = getPlayer(player_container);
            playingVideo = $(vidPlayer).find(VIDEO_ELEM)[0];
            playingVideo.style.opacity = 1;
            playingVideo.style.visibility = 'unset';
            playingVideo.play();
        });

        if (playlist) {
            player_container.empty();
            video_items.each((idx, item) => {
                const video_card = $(item).find('.mchp-video-carousel-card')[0];
                const pageTitle = $(video_card).data('pagetitle');
                const vid = $(video_card).find(VIDEO_ELEM)[0];
                const videoFile = $(vid).data('videoFile');
                const custom_thumbnail = $(item).find('.mchp-video-carousel-card__custom-thumbnail img').clone();

                if (custom_thumbnail.length > 0) {
                    $(video_card).find('.mchp-video-carousel-card__img').css('background-image', `url(${custom_thumbnail.attr('src')})`);
                    $(video_card).find('.mchp-video-carousel-card__img').html(custom_thumbnail);
                }

                const thumbnail = $(video_card).find('img').clone();

                const title = $(item).find('.mchp-component-title');
                const description = $(item).find('.mchp-text-container');
                const buttons = $(item).find('.mchp-button-container');

                appendVideo(vid, idx);

                $(video_card).on('click', function () {
                    updateVideoPlayer(idx, thumbnail, true);
                    updateContent(title, pageTitle, description, buttons);
                })

                setTimeout(function () {
                    if ($(item).hasClass('mchp-video-item--first')) {
                        updateVideoPlayer(idx, thumbnail, false, true);
                        updateContent(title, pageTitle, description, buttons);
                        player_container.find(VIDEO_ELEM).on('loadeddata', function () {
                            $(this).css({'max-height': 'unset'});
                        });
                    }
                }, 10);

                if (videoFile === autoplayVideo) {
                    autoplayVideoFound = true;
                    setTimeout(function () {
                        updateVideoPlayer(idx, thumbnail, true, false);
                        updateContent(title, pageTitle, description, buttons);
                        player_container.find(VIDEO_ELEM).on('loadeddata', function () {
                            $(this).css({'max-height': 'unset'}).attr("tabindex", -1).focus();
                        });
                    }, 100);
                }
            });
        } else {
            const custom_thumbnail = player_container.find('.mchp-video-carousel-card__custom-thumbnail img').clone();
            const thumbnailSingle = custom_thumbnail.length > 0 ? custom_thumbnail : player_container.find('img', '.mchp-video-player__img').clone();
            if (thumbnailSingle.length > 0) {
                const videoSingle = player_container.find(VIDEO_ELEM)[0];
                const videoFileSingle = $(videoSingle).data('videoFile');
                appendVideo(videoSingle, 0);
                if (videoFileSingle === autoplayVideo) {
                    autoplayVideoFound = true;
                    setTimeout(function () {
                        updateVideoPlayer(0, thumbnailSingle, true, false);
                        player_container.find(VIDEO_ELEM).on('loadeddata', function () {
                            $(this).attr("tabindex", -1).focus();
                        });
                    }, 100);
                } else {
                    updateVideoPlayer(0, thumbnailSingle, false, true);
                }
            }

            hideSecondaryButton(videoFeature);
        }

    });
});

$(document).ready(function () {
    let tabComponents = $('.cmp-tabs');
    const PROCESSED_TAB_CLASS = 'mchp-tab--processed';
    const tableContainerSelector='.TabsTable--container';
    const table1Selector=".TabsTable-section-1--table";
    const table2Selector=".TabsTable-section-2--table";
    const dataTables_wrapperSelector='.dataTables_wrapper'
    // traverse all tab components
    tabComponents.each(function (index, tabcomp) {

        let tabs = $(tabcomp).find('li');
        let panels = $(tabcomp).find('.cmp-tabs__tabpanel');

        // traverse clickable tab items and attach on click handler
        tabs.each(function (index, tab) {

            $(tab).on('click', function (e) {
                let self = $(this);
                const tabIndex = self.index();
                const tabPanel = panels[tabIndex];

                if (self.hasClass(PROCESSED_TAB_CLASS) || tabIndex === 0) {
                    // ignoring processed tabs and first tab
                    return;
                } else {
                    // mark tab as processed
                    self.addClass(PROCESSED_TAB_CLASS);
                }

                setTimeout(function () {

                    let cardCarousels = $(tabPanel).find('.cardcarousel');
                    let videoCarousels = $(tabPanel).find('.mchp-video-list');

                    cardCarousels.each(function (index, carousel) {
                        let slickDiv = $(carousel).find('.mchp-card-items.slick-initialized');
                        slickDiv.slick('refresh');
                    });

                    videoCarousels.each(function (index, carousel) {
                        let slickDiv = $(carousel).find('.mchp-video-items.slick-initialized');
                        slickDiv.slick('refresh');
                    });
                }, 0);
            });
        });
    });
const createSearchTableForDesktop = (domTable, containerComp,numOfDocuments) => {
		const dataTable = $(domTable).DataTable({
			order: [],
			info:false,
			autoWidth: false,
			searching: true,
			pageLength: numOfDocuments,
			paging: true,
			columnDefs: [{
					targets: [1, 2],
					orderable: true
				},
				{
					targets: [0, 3, 4, 5],
					orderable: false,

				},
				{
					targets: [2],
					type: 'date'
				}

			],
			search: {
				'regex': true,
				'smart': false
			},

            drawCallback: function() {
              tabsTableInitLink(this);
            }


		});



		return dataTable;
	}






	const createSearchTableForMobile = (domTable, containerComp,numOfDocuments) => {
		const dataTable = $(domTable).DataTable({
			order: [],
			info:false,
			autoWidth: true,
			searching: true,
			pageLength: numOfDocuments,
			paging: true,
			columnDefs: [{
					targets: [0, 1],
					orderable: true
				}


			],
			search: {
				'regex': true,
				'smart': false
			},

			drawCallback: function() {
               tabsTableInitLink(this);
            }


		});



		return dataTable;
	}

    const tabsTableInitLink = (domTable) => {
        const akamaiLinks = $(domTable).find('.clipboard');

         akamaiLinks.each(function (index, element) {
            const $element = $(element);
            $element.on('click', function (e) {
                navigator.clipboard.writeText($(this).data('link'));
            });
        });
    }




	$('.TabsTable').each(function(index, tablecomp) {
		const $this = $(this);

		const tableContainer = $this.find(tableContainerSelector);
		const domTable1 = $this.find(table1Selector);
		const domTable2 = $this.find(table2Selector);
		if (!domTable1 && domTable2) {
			return;
		}

		const searchButton = $this.find('.TabsTable--search-container').find('.TabsTable--searchbar-button');
		const input = $this.find('.TabsTable--search-container').find('input');
		const numofDocuments=$this.find(tableContainerSelector).data('num-of-documents');

		const table1 = createSearchTableForDesktop(domTable1, tableContainer, numofDocuments);
		const table2 = createSearchTableForMobile(domTable2, tableContainer,   numofDocuments);
        $(tableContainer).hide();
		const categories = $this.find('.document-categories');
		const reset = $(this).find('.reset');
		const result_message = $(this).find('.result_message');
		const count = $(this).find('.result_count');
		const search_text = $(this).find('.search_text');
		const checkboxSelector='input[type="checkbox"]:checked';


		let searchTerm = '';
		const options = table1.columns(0).data().eq(0);
		let options_arr = [];
		if (options) {
			options_arr = options.unique()
				.toArray().sort();
			options_arr.forEach(function(option) {
                if(option !== "") {
				$(categories).append('<label><input type="checkbox" class="document-categories-filter" value="' + option + '">' +
					'<span>' + option + '</span></label>');
                }
			});


		}

		$(categories).find('input:checkbox').on('change', function() {
			const checkedCheckboxes = [];
			$(categories).find(checkboxSelector).each(function() {
				checkedCheckboxes.push($(this).attr('value'));
			});
			const stats = checkedCheckboxes.join('|');
			table1.column(0).search(stats, true, false, false).draw(false);
			table2.column(1).search(stats, true, false, false).draw(false);
			table1.page(0).draw(false);
            table2.page(0).draw(false);
			if (input.val() !== "") {
				result_message.show();
				count.html("");
				search_text.html("");
				count.append(table1.page.info().recordsDisplay + ' Results');
				search_text.append('"' + searchTerm + '"');
			} else {
				result_message.hide();
			}

		});

		$(reset).on('click', function(e) {
			if (reset.is(":checked")) {
				$(categories).find(checkboxSelector).each(function() {

					if ($(this).attr('value') !== ""){
						$(this).prop('checked', false);
						}

				});

			}

		});






		input.on('keyup', function(e) {
			searchTerm = this.value;
			if (e.keyCode === 13 || searchTerm.length>=3) {

				$(tableContainer).show();
				searchDatatable(table1, this.value, $this);
				searchDatatable(table2, this.value, $this);
				table1.page(0).draw(false);
				table2.page(0).draw(false);

				if (searchTerm !=="") {
					result_message.show();
					count.html("");
					search_text.html("");
					count.append(table1.page.info().recordsDisplay + ' Results');
					search_text.append('"' + searchTerm + '"');
				} else {
					result_message.hide();
				}



			}

		});



		searchButton.on('click', function() {
			$(tableContainer).show();
			searchDatatable(table1, searchTerm, $this);
			searchDatatable(table2, searchTerm, $this);
			table1.page(0).draw(false);
            table2.page(0).draw(false);
			if (input.val() !=="") {
				result_message.show();
				count.html("");
				search_text.html("");
				count.append(table1.page.info().recordsDisplay + ' Results');
				search_text.append('"' + input.val() + '"');
			} else {
				result_message.hide();
			}


		});





		$(document).on('click', function(event) {

         if(($(event.target).closest(tableContainerSelector).length===0
          &&$(event.target).closest('.TabsTable--searchbar').length===0 &&
          ! event.target.matches('.paginate_button'))|| $(event.target).hasClass('close-button')) {
                  $(tableContainer).hide();
                  $(input).val("");
                  $(categories).find(checkboxSelector).each(function() {
                  $(this).prop('checked', false);
                  });
                  table1.column(0).search("", true, false, false).draw(false);
                  table2.column(1).search("", true, false, false).draw(false);
                  table1.page(0).draw(false);
                  table2.page(0).draw(false);
                  result_message.hide();

                 }

                    });








	});



	function handleMediaSizeChanges(mediaQuery) {
		if (mediaQuery.matches) {
            $(table2Selector).closest(dataTables_wrapperSelector).css('display', 'none');
            $(table1Selector).closest(dataTables_wrapperSelector).css('display', 'block');
        } else {
            $(table2Selector).closest(dataTables_wrapperSelector).css('display', 'block');
            $(table1Selector).closest(dataTables_wrapperSelector).css('display', 'none');
        }
	};



	const mediaQueryTable = window.matchMedia('(min-width: 960px)');
	handleMediaSizeChanges(mediaQueryTable);

	mediaQueryTable.addEventListener('change',handleMediaSizeChanges);



});

















$(document).ready(function () {
    let textImages = $(".textimage");

    textImages.each(function (index, textImage) {

        let secondary_button = $(textImage).find('.mchp-secondary-button');

        if (secondary_button.find('div').find('div').length === 0) {
            // empty div, button not used
            setTimeout(function () {
                secondary_button.hide();
            }, 200);
        }
    });
});

/**
 * Turns a comma-separated list of numbers (in a string) as an array of numbers
 * @param columns The string that is a list of numbers
 * @returns {undefined|Number[]}
 */
var isTableLoaded = false;

const parseSelectedColumns = (columns) => {
    if (columns) {
        return columns.toString().replace(' ', '').split(',')
            .map((column) => {
                if (column === "") {
                    return;
                } else {
                    return column - 1;
                }
            });
    }else{
        return;
    }
};


/**
 * Changes the styles for the table if it has merged cells.
 * @param hasMergedCells Apply the changes if this is true
 * @param domTable The HTML table to change styles on.
 */
const mergeColumns = (hasMergedCells, domTable) => {
    if (hasMergedCells) {
        const tableRows = $(domTable).find('tr');
        tableRows.each(function (index, row) {
            if (row.cells.length === 1) {
                $(row).addClass('merged-cells__td');
            } else {
                $(row).addClass('has-mergedcells__td');
            }
        });
    }

    let colCount = 0;
    $(domTable).find('tr:nth-child(1) td').each(function () {
        if ($(this).attr('colspan')) {
            colCount += +$(this).attr('colspan');
        } else {
            colCount++;
        }
    });

    $(domTable).find('tr:nth-child(1) td').each(function () {
        if (colCount === 2) {
            $(domTable).find('tr:nth-child(1)').addClass('two-columns');
        }
    });
};


/**
 * Displays header if author chose first row as a header.
 * @param domTable the html table
 */
const showHeader = (domTable) => {
    const domFirstRow = $(domTable).find('tr').first();
    const domHead = $('<thead></thead>');
    if (domFirstRow.find('th').length > 0) {
        domHead.append(domFirstRow);
    }
    else {
        domHead.append($(domFirstRow).clone());
        domHead.hide();
    }
    domTable.prepend(domHead);
};


/**
 * Creates a new table
 *
 * @param domTable The DOM table to get a datatable backing.
 * @param columns {{ dates: int[], not_sortables: int[] }}
 *                An object with several arrays, each array having the index of a column.
 * @returns {jQuery} Returns a new datatable, or null if it couldn't be created (this usually is
 *                  because the html table has merged cells).
 */
const createSimpleTable = (domTable, columns, numRowsPerPage, scrollX,zerorecordsDisplayText) => {
    try {
        let columnOrder = [];
        if(typeof(columns.default_sort) === "undefined"){
            columnOrder = [];
        }else{
            columnOrder = [[columns.default_sort, columns.sorting_type]]
        }
        // Initialize datatable
        return $(domTable).DataTable({
            columnDefs: [
                {
                    targets: columns.not_sortables,
                    orderable: false,
                    className: 'dont_sort'
                },
                {targets: columns.dates, type: 'date'},
            ],
            search: {
                'regex': true,
                'smart': false
            },
            order: columnOrder,
            paging: true,
            pageLength: numRowsPerPage,
            pagingType: 'simple_numbers',
            dom: '<"top"fi>rt<"bottom"lp><"clear">',
            preDrawCallback: function() {
                resizeTableImages(this);
            },

            "scrollX": scrollX,
             headerCallback: function(thead, data, start, end, display) {
                if (!isTableLoaded) {
                    wrapHeaderTitle(thead);
                    isTableLoaded = true;
                }
             },
              "oLanguage": {
                    "sZeroRecords": zerorecordsDisplayText
             }
        });
    }
    // ignored, if it fails it will render as a regular table without sorting/filtering
    catch(error) { return; }
}

const resizeTableImages = (domTable) => {
    const $table = $(domTable);
    const images = $table.find('img');

    images.each(function (imx, image) {
        const $img = $(image);
        const td = $img.parents('td');
        const widthValue = td.attr('width');

        if (typeof widthValue !== 'undefined') {
            const width = widthValue.indexOf('%') ? widthValue : `${widthValue}px`;
            $img.css({'width': width, 'height': 'auto'});
        }
        // remove table cell's width attribute since it can conflict with the table header width
        td.attr('width', '');
    });
}

/**
 * Called when the page loads. Instantiates the table, the handlers and all
 * search functionality.
 */
$(document).ready(function () {

    // this class is the component class that gets auto added
    $('.simpletable').each(function (idx, tdiv) {

        // collect table options
        const tableOptions = $(tdiv).find('.table-options');
        const filterColumnIndex = $(tableOptions).data('filtercolumn') - 1;
        const cellstyle = $(tableOptions).data('cellstyle');
        const horizontalString = $(tableOptions).data('horizontal');
        const filterType = $(tableOptions).data('filterType');
        const sortingTypeData = $(tableOptions).data('defaultsortdescending');
        let sortingType = "";
        let scrollX = false;


        /*
            Set SimpleTable to Scrollbar or Wrap
            using Overflow cq:dialog option
        */

        // Set to scrollbar table width is pixels and scrollbar added
        if (horizontalString === "scrollbar") {
            scrollX = true;
        // Set to wrap table is set to 100% no matter how many columns
        } else if (horizontalString === "wrap") {

            $.fn.columnCount = function() {
                return $('th', $(this).find('tbody')).length;
            };

            var colctr = $(tableOptions).columnCount();

            $(this).find('td, th').removeAttr("width").width(Math.floor(100/colctr) + "%");

        } else {
            // if user does not make use of Overflow tab in cq:dialog, table will default to none and width will split across all columns to 100%
            $.fn.columns = function() {
                return $('th', $(this).find('tbody')).length;
            };
            var numCol = $(tableOptions).columns();
            $(this).find('td, th').removeAttr("width").width(Math.round(100/numCol) + "%");
        }



        if(sortingTypeData === true){
            sortingType = "desc";
        }else if(sortingTypeData === false){
            sortingType = "asc";
        }

        const columns = {
            not_sortables: parseSelectedColumns($(tableOptions).data('dontsortfield')),
            dates: parseSelectedColumns($(tableOptions).data('datefield')),
            default_sort: parseSelectedColumns($(tableOptions).data('defaultsortingcolumn')),
            sorting_type: sortingType,
        };

        const numOfRows = $(tableOptions).data('numOfRows');
        const domFilterContainer = $(tdiv).find('.SimpleTable--filter-container')
        const domDropDownFilter = $(tdiv).find('.SimpleTable--filter');
        const domSearchbarInput = $(tdiv).find('.SimpleTable--searchbar-field');
        const domSearchbarButton = $(tdiv).find('.SimpleTable--searchbar-button');
        const zerorecordsDisplayText = $(tableOptions).data('zerorecordstext');

        // The table tag is used nowhere in the html, but it gets inserted by the component
        // author dialog.
        const domTable = $(tdiv).find('table');
        const captionNum = Math.floor(Math.random()*100);
        $(tdiv).find('.mchp-title').attr('id','simpletable-caption-'+captionNum);
        domTable.attr('aria-labelledby', 'simpletable-caption-'+captionNum);
        showHeader(domTable);
        mergeColumns($(domTable).find('td[colspan]').length > 0, domTable);

        // resize images inside table before dataTable initialization
        // so they look okay in case initialization fails
        resizeTableImages(domTable);
        const table = createSimpleTable(domTable, columns, numOfRows, scrollX,zerorecordsDisplayText);

        if (table && table.page.info() && table.page.info().pages === 1) {
            $(tdiv).find('.dataTables_paginate').hide();
        }

        // disable filtering since the table couldn't be created
        if (table === null) {
            console.log("Simple table searching and filtering have been disabled (this could be because there are merged cells).")
            domFilterContainer.hide();
            return;
        }

        // populate filter
        if (filterType === 'show-all' || filterType === 'show-filter') {
            populateDropDownFilter(table, domDropDownFilter, filterColumnIndex, "Select Option");
        }

        if (filterType === 'hide-all') {
            domFilterContainer.hide();
        }

        // add handlers
        let selected_filter = '';
        let input_val = '';

        // typing in the search bar and pressing enter
        domSearchbarInput.on('keyup', function (e) {
            input_val = this.value;
            if (e.keyCode === 13) {
                searchDatatable(table, [input_val, selected_filter], tdiv);
            }
        });
        // clears search bar and resets search results when the x is pressed
        domSearchbarInput.on('search', function () {
            input_val = '';
            searchDatatable(table, [input_val, selected_filter], tdiv);
        });
        // searches when the search button is pressed
        domSearchbarButton.on('click', function () {
            searchDatatable(table, [input_val, selected_filter], tdiv);
        });
        // called when an option in the drop down is selected
        domDropDownFilter.on('change', function (e) {
            selected_filter = e.target.value;
            searchDatatable(table, [input_val, selected_filter], tdiv);
        });

		// set the row's background styling
        if (cellstyle) {
            $(domTable).find('tbody').addClass('striped-bg');
        }
		else {
            $(domTable).find('tbody').removeClass('striped-bg');
        }
       

    });
});
const RESET_STRING = 'Microchip';

/**
 * Creates a new datatable.
 *
 * @param columns {{ dates: int[], not_sortables: int[] }}
 *                An object with several arrays, each array having the index of a column.
 * @param defaultSortColumn Either undefined or an integer. Represents the index of the column to
 *                          sort by on page load.
 * @param isDefaultSortAscending If defaultSortColumn is not undefined, then have that column sort
 *                               in ascending order or descending order by default. If this is a
 *                               date, set to false to get most recent at the top.
 * @param domTable The HTML table.
 * @param numDocsPerPage Number of documents to display in each pagination of the table.
 * @param currentContext The current jquery context.
 * @returns {*} A datatable object.
 */
const createDocumentTable = (columns, defaultSortColumn, documentCategorySorting, isDefaultSortAscending, domTable,
    options, currentContext) => {
    let orderOptionValue = [];

    const documentCategoryColumn = (documentCategorySorting === true ? defaultSortColumn : 0);
	let result = 'asc';
    if(documentCategorySorting === false)
    	{
   		  result = (isDefaultSortAscending ? 'asc' : 'desc');
		}
    let old_width;
    let horizontal_scroll;

    /*Update needed for defaultSortColumn being 1
     */

    if (defaultSortColumn) {
        orderOptionValue = [
            [defaultSortColumn, result]
        ];
    }
    const dataTable = $(domTable).DataTable({
        autoWidth: false,
        searching: true,
        lengthChange: false,
        info: false,
        order: orderOptionValue,
        pageLength: options.numOfDocuments,
        pagingType: 'simple_numbers',
        dom: '<"top"fli>rt<"bottom"flp><"clear">',
        paging:options.showPagination,
        columnDefs: [{
                targets: [documentCategoryColumn],
                render: function(data, type, row, meta) {
                    if (type === 'sort') {
                        switch (data) {
                            case 'Data Sheets':
                                return 0;
                            case 'Errata':
                                return 1;
                        }

                    }

                    return data;
                },
                orderable: true
            },

            {
                targets: columns.not_sortables,
                orderable: false,
                className: "dont_sort"
            },
            {
                targets: columns.dates,
                type: 'date'
            }

        ],
        search: {
            'regex': true,
            'smart': false
        },
        preDrawCallback: function() {
            horizontal_scroll = $('.dataTables_wrapper').scrollLeft();
            old_width = $('.striped-bg').width();
        },
        drawCallback: function() {
            const new_width = $('.striped-bg').width();
            const newScrollLeft = horizontal_scroll * new_width / old_width;
            $('.dataTables_wrapper').scrollLeft(newScrollLeft);
            documentTableInitShasum(this);
             const favDocuments = JSON.parse(localStorage.getItem("favDocuments"));
                 if(favDocuments) {
                     fillIconForFavDocuments(favDocuments);
                 }
        },
        initComplete: function() {
            currentContext.show();
        },
        "oLanguage": {
            "sZeroRecords": options.zerorecordstext
        }
    });


    return dataTable;

}

const documentTableInitShasum = (domTable) => {
    const shasumLinks = $(domTable).find('.download-shasum');

    shasumLinks.each(function (index, element) {
        const $element = $(element);
        const downloadLink = $element.find('a.download');
        const clipboardLink = $element.find('a.clipboard');
        const shasum = $element.data('shasum');

        $(downloadLink).on('click', function (e) {
            e.stopPropagation();
            e.preventDefault();
            window.open(`/bin/mchp/shasum?value=${shasum}`, '_blank');
        });

        $(clipboardLink).on('click', function (e) {
            const textArea = document.createElement('textarea');
            textArea.style.opacity = 0;
            textArea.style.width = '2em';
            textArea.style.height = '2em';
            textArea.value = shasum;
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            e.stopPropagation();
            e.preventDefault();
        });
    });
}

/**
 * Gets the values from the column at the selected index and creates a list of radio buttons
 * to filter by.
 *
 * @param dataTable The datatable object to get a column from and filter on.
 * @param filterColumn The index of the column.
 * @param domRadioButtons The radio button container.
 */
const populateRadioButtons = (dataTable, filterColumn, domRadioButtons,radioBtnHidden) => {
    // append each unique item from the select column as a radio button
    // add reset button to end of list
    const options = getUniqueColumnData(dataTable, filterColumn);
    options.push(RESET_STRING);
    var hideRadioBtn = (radioBtnHidden === false) ? "" : "hidden";
    options.forEach(function(val) {
        const isChecked = val === RESET_STRING ? 'checked' : '';
        domRadioButtons.append(`
            <div class="radio-options">
    <input class="radio-filter ${hideRadioBtn}" type="radio" name="radio-btn"
                       id="${val}" value="${val}" ${isChecked}>
                <label for="${val}">${val}</label>
            </div>
        `);
    });
}

const showDocumentVersionDetails = (documentId) => {
    var documentVersionDetailsPagePath = configDocumentVersionDetailsPagePath ? configDocumentVersionDetailsPagePath : '/en-us/document-versions';
    if("localhost"===location.hostname||location.hostname.includes("author")||location.hostname.includes("aem.microchip.com")){
        documentVersionDetailsPagePath = '/content/mchp' + documentVersionDetailsPagePath + '.html';
    }
    documentVersionDetailsPagePath += '?documentId=' + documentId;
    window.open(documentVersionDetailsPagePath, '_blank');
}
/**
 * Called when the page loads. Instantiates the table, the handlers and all
 * search functionality.
 */
$(document).ready(function() {
    $('.DocumentTable').each(function() {

        const $this = $(this);
        const domTable = $this.find('table:first');

        if (!domTable) {
            return;
        }

        const domTableHeader = domTable.find("th");
        let domDropDownFilter = $this.find('.DocumentTable--search-container')
            .find('.DocumentTable--filter');
        let domSearchBar = $this.find('.DocumentTable--search-container')
            .find('.DocumentTable--searchbar-input');
        let domSearchButton = $this.find('.DocumentTable--search-container')
            .find('.DocumentTable--searchbar-button');
        const documentCategorySorting = $this.data('document-category');
        const domRadioButtons = $this.find('.DocumentTable-radio-btns');
        const numOfDocuments = $this.data('numOfDocuments');
        const defaultSortColumn = $this.data('defaultSortColumn');
        const isDefaultSortAscending = $this.data('defaultSortAscending');
        const columns = getOrganizedColumns(domTableHeader);
        const filterType = $this.data('filter-type');
        const legacyFilterType = $this.data('legacy-filter-type');
        const filterColumn = $this.data('filter-column') - 1;
        const hideFilterColumn = $this.data('hide-filter-column');
        const radioBtnHidden = $this.data('radio-btn-hidden');
		const options = {};
        options.numOfDocuments = numOfDocuments;
        options.showPagination = $this.find('tbody tr').length > numOfDocuments;
        options.zerorecordstext= $this.data('zerorecordstext');

        const dataTable = createDocumentTable(columns, defaultSortColumn - 1, documentCategorySorting,
            isDefaultSortAscending, domTable, options, $this);

 		// handler for changing the drop down filter option.
		domDropDownFilter.on('change', function(e) {
            selectedFilter = e.target.value;
             if (selectedFilter && selectedFilter === 'viewAll') {
				selectedFilter = '';
            }
            searchDatatable(dataTable, [searchTerm, selectedFilter], $this);
        });

        // try to hide the filter column
        if (hideFilterColumn) {
            try {
                dataTable.columns([filterColumn]).visible(false);
            } catch (e) {
                console.error("Error reported by hiding filtered column :", hideFilterColumn);
            }
        }

        // populate radio button filter
        if (filterType === 'radio' || legacyFilterType === 'show' || filterType === 'radio-search') {
            populateRadioButtons(dataTable, filterColumn, domRadioButtons,radioBtnHidden);
        }
        // populate drop down filter
        if (filterType === 'filter' || filterType === 'filter-search') {
            populateDropDownFilter(dataTable, domDropDownFilter, filterColumn, "Select Option", "View All");
        }

        let selectedFilter = '';
        let searchTerm = '';


        // handler for typing in the searchbar
        domSearchBar.on('keyup', function(e) {
            searchTerm = this.value;
            if (e.keyCode === 13) {
                searchDatatable(dataTable, [searchTerm, selectedFilter], $this);
            }
        });
        // handler for pressing the 'x' button on the search bar.
        domSearchBar.on('search', function() {
            searchTerm = '';
            searchDatatable(dataTable, [searchTerm, selectedFilter], $this);
        });
        // handler for pressing the search button
        domSearchButton.on('click', function() {
            searchDatatable(dataTable, [searchTerm, selectedFilter], $this);
        });

        // handler for selecting radio buttons.
        $(domRadioButtons).find('input[name=radio-btn]').on('change', function(evt) {
            selectedFilter = evt.target.value === RESET_STRING ? '' : evt.target.value;
            searchDatatable(dataTable, [searchTerm, selectedFilter], $this);
        });

    });
});
/**
 * Returns a new datatable
 *
 * @param domTable Table element in the DOM
 * @param columns {{ dates: int[], not_sortables: int[] }}
 *                An object with several arrays, each array having the index of a column.
 * @param numItemsPerPage Number of items to display per pagination
 * @param currentContext The current jQuery context (e.g. `$(this)`)
 * @returns {jQuery}
 */
const createEventTable = (domTable, columns, numItemsPerPage,zeroRecordsDisplayText,currentContext) => {
    let table = $(domTable).DataTable({
        autoWidth: false,
        searching: true,
        lengthChange: false,
        info: false,
        pageLength: numItemsPerPage,
        order: [],
        columnDefs: [
            {targets: columns.not_sortables, orderable: false}
        ],
        pagingType: 'simple_numbers',
        search: {
            'regex': true,
            'smart': false
        },
        "oLanguage": {
             "sZeroRecords": zeroRecordsDisplayText
         },
        initComplete: function () {
            currentContext.show();
        },
        render: function (data, type, row) {
            if (type === 'sort') {
                return Date.parse(data);
            }
            return data;
        }
    })
    // default sorting on the date column
    if (columns.dates.length > 0) {
        table.order([columns.dates[0], "desc"]).draw();
    }
    // If there's only one page hide the pagination
    if (table.page.info().pages === 1) {
        currentContext.find('.dataTables_paginate').hide();
    }
    return table;
}


/**
 * Called when the page loads. Instantiates the table, the handlers and all
 * search functionality.
 */
$(document).ready(function () {
    $('.EventTable').each(function () {
        const $this = $(this);
        const domTable = $this.find('table:first');
        if (!domTable) {
            return;
        }

        const domTableHeader = domTable.find("th");
        const numItemsPerPage = $this.data('numItemsPerPage');
        const zeroRecordsDisplayText = $this.data('zerorecordstext')
        const columns = getOrganizedColumns(domTableHeader);
        const table = createEventTable(domTable, columns, numItemsPerPage,zeroRecordsDisplayText,$this);
        const domFilterContainer = $this.find('.EventTable--search-container');
        let domDropDownFilter = domFilterContainer.find('.EventTable--filter');
        let domSearchBar = domFilterContainer.find('.EventTable--searchbar-input');
        let domSearchButton = domFilterContainer.find('.EventTable--searchbar-button');
        let selectedFilter = '';
        let searchTerm = '';

        populateDropDownFilter(table, domDropDownFilter, table.columns().header().length - 1,
            "All Regions");

        // handler: typing in the search bar and pressing enter shows results
        domSearchBar.on('keyup', function (e) {
            searchTerm = this.value;
            if (e.keyCode === 13) {
                searchDatatable(table, [searchTerm, selectedFilter], $this);
            }
        });
        // handler: clears the search bar and resets results when 'x' button is pressed
        domSearchBar.on('search', function () {
            searchTerm = '';
            searchDatatable(table, [searchTerm, selectedFilter], $this);
        });
        // handler: pressing search button
        domSearchButton.on('click', function () {
            searchDatatable(table, [searchTerm, selectedFilter], $this);
        });
        // handler: selecting a drop down filter
        domDropDownFilter.on('change', function (e) {
            selectedFilter = e.target.value;
            searchDatatable(table, [searchTerm, selectedFilter], $this);
        });
    });
});


function injectIdToFormContainer() {
  const unsafeEmbedDiv = document.querySelector('.unsafe-embed');
  if (unsafeEmbedDiv) {
    unsafeEmbedDiv.id = 'formContainer';
    unsafeEmbedDiv.classList.add('mktosfformsmaster');
  }
}

injectIdToFormContainer();

const formContainer = document.getElementById('formContainer');
if (formContainer !== null) {
  window.addEventListener('resize', function () {
    const formContent = formContainer.querySelector('.form-content');
    if (formContent) {
      const formContentHeight = formContent.scrollHeight;
      formContainer.style.height = formContentHeight + '200px';
    }
  });
}

let observe;

if (window.attachEvent) {
  observe = function (element, event, handler) {
    element.attachEvent('on' + event, handler);
  };
} else {
  observe = function (element, event, handler) {
    element.addEventListener(event, handler, false);
  };
}

function init() {
  const textareas = document.querySelectorAll('textarea');

  textareas.forEach(text => {
    text.classList.add('txtareaexpand');

    text.style.minHeight = '50px';

    function resize() {
      text.style.height = 'auto';
      text.style.height = text.scrollHeight + 'px';
    }

    function delayedResize() {
      window.setTimeout(resize, 0);
    }

    observe(text, 'change', resize);
    observe(text, 'cut', delayedResize);
    observe(text, 'paste', delayedResize);
    observe(text, 'drop', delayedResize);
    observe(text, 'keydown', delayedResize);

    text.style.removeProperty('resize');
    text.style.removeProperty('height');

    text.focus();
    text.select();
    resize();
  });
}

window.addEventListener('load', function () {
  init();
});
//The actual targets of the links get moved up to account for the height of the fixed header

$(function () {
    let headerHeight = $('.mchp-header').height();
    let $pageLinkTargets = $('.page-link-target');

    $pageLinkTargets.each( (index) => {
        let linkTarget = $pageLinkTargets[index];
        $(linkTarget).css('top', `${-1 * headerHeight}px`);

    });

});
//The actual targets of the links get moved up to account for the height of the fixed header

$(function () {
    const headerHeight = $('.mchp-header').height();
    const $jumplinksTargets = $('.jumplinks-target');
    const $jumpLinks = $('.mchp-jumplinks a');
    const allTargets = [];


    $jumplinksTargets.each( (index) => {
        const linkTarget = $($jumplinksTargets[index]);
        linkTarget.css('top', `${-1 * headerHeight}px`);
        allTargets.push(linkTarget.attr('id'));
    });

    $jumpLinks.each( (index) => {
        const jumpLink = $($jumpLinks[index]);
        const href = jumpLink.attr('href').replace('#', '').replace(/%20/g, ' ');

        if (!allTargets.includes(href)) {
            jumpLink.addClass('hide-content');
        }
    });

});
$('.disabled-button').click(function(event){
    event.preventDefault();
    return false;
});

function showCustomTooltip(tooltipElement){
    const activeTooltip = "active-tooltip";
    const hideTooltip = "hide-tooltip";
    if(tooltipElement.hasClass(hideTooltip)){
        tooltipElement.removeClass(hideTooltip);
        tooltipElement.addClass(activeTooltip);
    }else{
        tooltipElement.removeClass(activeTooltip);
        tooltipElement.addClass(hideTooltip);
    }
}

$(document).ready(function () {
    const pageUrl = window.location.href;
    const pageTitle = document.title;

    const facebookUrl = `https://www.facebook.com/sharer.php?u=${pageUrl}`;
    const twitterUrl = `https://twitter.com/intent/tweet?url=${pageUrl}&text=Check+out+this+page+I+found+on+microchip.com.&hashtags=microchip`;
    const linkedInUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${pageUrl}&title=${pageTitle}` +
        '&summary=Check+out+this+page+I+found+on+microchip.com.&source=microchip.com';
    const emailUrl = `mailTo:?subject=${pageTitle}&body=Check out this page I found on microchip.com:%0D${pageUrl}%0D`;
    const smsUrl = `sms:?body=Check out this page I found on microchip.com:%0D${pageUrl}`;

    function assignUrl(buttons, url) {
        buttons.each((index) => {
            const button = buttons[index];
            $(button).attr('href', url);
        });
    }

    const facebookButtons = $('.facebook-button');
    const twitterButtons = $('.twitter-button');
    const linkedInButtons = $('.linkedin-button');
    const emailButtons = $('.email-button');
    const smsButtons = $('.sms-button');
    const shareButton = $('.generic-button');
    const tooltipElement = $('.blog-buttonshare .tooltip-copy');

    assignUrl(facebookButtons, facebookUrl);
    assignUrl(twitterButtons, twitterUrl);
    assignUrl(linkedInButtons, linkedInUrl);
    assignUrl(emailButtons, emailUrl);
    assignUrl(smsButtons, smsUrl);

    const $temp = $("<input>");

	shareButton.on('click', function() {
      $("body").append($temp);
      $temp.val(pageUrl).select();
      document.execCommand("copy");
      showCustomTooltip(tooltipElement);
        setTimeout(function(){
            tooltipElement.removeClass('active-tooltip');
            tooltipElement.addClass('hide-tooltip');
        }, 3000)
      $temp.remove();
    });
});

$(document).ready(function () {
    const blockDiagrams = $('.mchp-block-diagram');
    const lbxCloseButton = '.lightbox-close-button';
    const LIGHTBOX_MODAL_SELECTOR = '#custom-lightbox-modal';
    const lightboxModals = $(LIGHTBOX_MODAL_SELECTOR);
    const FOCUS_NODE = 'focus-node';
    const STANDARD_ATTRIBUTES = ['title', 'label', 'description', 'bloqqTable', 'eventtype', 'tinymce', 'comparePartNumbersProperty'];
    const MOUSE_ENTER = 'mouseenter';
    const MOUSE_LEAVE = 'mouseleave';
    const MOUSE_CLICK = 'click';
    const MOUSE_NONE = 'none';
    const INTERACTIVE_NODE = 'interactive-node';
    const POINTER_EVENTS = 'pointer-events';
    const NO_SELECTION_TEXT = 'No Selection';
    const CUSTOM_LIGHTBOX_TRANSPARENT_DIV_ID = 'custom-lightbox-transparent-div';
    const RESULT_TITLE_CLASS = 'result-title';
    const SVG_DIAGRAM_CLS = '.mchp-svg-diagram';
    let currentTitle = "";
    

    let SYMBOL_CLICKED = false; 

    let CLICKED_NODE = undefined;
    const NODE_CLICKED_CLASS = 'node-clicked';

    if (typeof window.CACHED_PARTS === 'undefined') {
        window.CACHED_PARTS = {};
    }

    const tokenApi = 'https://www.microchip.com/webdata/api/MchpApiSecurity/GetMchpWWWApiSecureToken';
    const parametricApi = 'https://www.microchip.com/webdata/api/ParametricConfig/GetDeviceInfoWithParametrics?devicefamily=';
    const localApi = '/etc.clientlibs/mchp/clientlibs/clientlib-site/resources/dummydata/';
    const useLocal = window.location.protocol !== 'https:';

    const shopping_cart_icon = '<i class="fa fa-shopping-cart"></i>';
    const pdf_icon = '<i class="fas fa-file-pdf"></i>';
    const caret_down_icon = '<i class="fas fa-angle-down"></i>';


    blockDiagrams.each(function (index, blockDiagram) {

        const diagram = $(blockDiagram).find(SVG_DIAGRAM_CLS);
        const diagramInfo = $(blockDiagram).find('.mchp-diagram-info');

        $.get(diagram.data('svg-path'), function (data) {
            const docElement = data.documentElement;
            const disableInteraction = diagram.data('disableInteraction') || false;
            if(docElement !== null && typeof docElement !== 'undefined') {
                diagram.html(new XMLSerializer().serializeToString(data.documentElement));
                initGraph(diagram, diagramInfo, disableInteraction);
            }
        });
    });

    /*
     * Initializes the SVG for interaction
     */
    const initGraph = (diagram, diagramInfo, disableInteraction) => {
        const svg = diagram.find('svg');
        const groups = svg.find('g');
        const popup = diagram.parent().find('.diagram-popup');
        const globalEventType = svg.attr('globaleventtype') || 'click';

        svg.removeAttr('content');

        linksOpenNewTab(svg);

        initLinksPopup(diagram, svg, groups, popup);
        $(window).on('resize', function () {
            initLinksPopup(diagram, svg, groups, popup);
        });

        if (globalEventType === 'none' || disableInteraction) {
            preventClickingLinks(svg);
            return;
        }

        groups.each(function (index, item) {
            tagInteractiveNodes(item);
        });

        const interactiveNodes = svg.find(`.${INTERACTIVE_NODE}`);

        initHandlers(diagram, svg, groups, popup, diagramInfo, interactiveNodes);
        initInteractiveNodes(diagram, svg, groups, popup, diagramInfo, interactiveNodes, globalEventType);

        // comment out or remove to start the diagram with the info panel hidden
        setTimeout(function () {
            const iNodes = svg.find(`.${INTERACTIVE_NODE}`);
            iNodes.each(function (index, node) {
                const $node = $(node);
                const eventType = getEventType($node, globalEventType);

                if (eventType === MOUSE_CLICK) {
                    $node.trigger(eventType);
                    return false;
                }
                return true;
            });
        }, 1000);

                   // New code for double-click event
                   svg.on('dblclick', function (event) {
                    event.preventDefault(); // Prevent default double-click behavior

                    // Capturing the current title here ensures it's the most recent
                    currentTitle = diagramInfo.find(`.${RESULT_TITLE_CLASS}`).text();

                    // Disable the right-side content
                    const title = diagramInfo.find(`.${RESULT_TITLE_CLASS}`);
                    const hr = diagramInfo.find('.mchp-title-hr');
                    title.text(currentTitle);
                    hr.show();
    
                    const clonedSvg = svg.clone();
    
                    const lightboxOverlay = $('<div id="custom-lightbox-overlay"></div>');
                    const lightboxModal = $('<div id="custom-lightbox-modal"></div>');
                
                    lightboxModal.append(clonedSvg);
                    lightboxModal.append('<div class="lightbox-close-button">×</div>');
                    lightboxOverlay.append(lightboxModal);
                    $('body').append(lightboxOverlay);

                    // Setup MutationObserver right after appending lightboxModal to body
                    const observer = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                                const modalJQuery = $(LIGHTBOX_MODAL_SELECTOR);
                                modalJQuery.css({
                                    'top': '50%',
                                    'left': '50%',
                                    'transform': 'translate(-50%, -50%)'
                                });
                            }
                        });
                    });

                    const modal = document.querySelector(LIGHTBOX_MODAL_SELECTOR);
                    observer.observe(modal, {
                        attributes: true, // Configure observer to watch for attribute changes
                        attributeFilter: ['style'] // Specifically watch for changes to the 'style' attribute
                    });

                    // Get position and dimensions of the clicked image
                    const svgPosition = svg.offset();
                    const svgHeight = svg.height();
                    // Calculate the midpoint of the clicked image
                    const svgMidpointY = svgPosition.top + svgHeight / 2;
                    const lightboxHeight = lightboxModal.height();
                    // Center the lightbox with respect to the midpoint of the clicked image
                    const offsetY = svgMidpointY - lightboxHeight / 2;

                    lightboxModal.css({
                        top: offsetY + 'px',
                    });
                    
                    const transparentDiv = $('<div id="custom-lightbox-transparent-div"></div>');
                    $('body').append(transparentDiv);
    
                    document.getElementById('custom-lightbox-overlay').classList.add('show');
    
                    
                    reapplyEventHandlers(clonedSvg, true);

                    // Close the lightbox when the close button is clicked
                    lightboxModal.find(lbxCloseButton).on('click', function () {

                        title.text(currentTitle);

                        hr.show();
                        lightboxOverlay.remove();
                        transparentDiv.remove();
                        $(document).off('click', `#${CUSTOM_LIGHTBOX_TRANSPARENT_DIV_ID}`); 
                    });
                });

                $(document).on('click', function(event) {
                    const lightboxModal = $('#custom-lightbox-modal');
                    const lightboxCloseButton = $('.lightbox-close-button');

                    // Check if the target of the click is not the lightbox, its descendants, or the Red X
                    if (
                        !lightboxModal.is(event.target) &&
                        lightboxModal.has(event.target).length === 0 &&
                        !lightboxCloseButton.is(event.target)
                    ) {
                        closeLightboxAndTransparentDiv(); // Close the lightbox and remove the transparent div

                        // Ensure the horizontal rule and title are correctly maintained
                        title.text(currentTitle);
                        hr.show();
                    }
                });

                // Close the lightbox when the close button is clicked
                lightboxModals.on('click', lbxCloseButton, function () {
                    closeLightboxAndTransparentDiv();
                });

                // Function to close the lightbox and clean up
                function closeLightboxAndTransparentDiv() {
                        const overlay = document.getElementById('custom-lightbox-overlay');

                        // First, check if the overlay exists and remove the 'show' class
                        if (overlay) {
                            overlay.classList.remove('show');
                        }

                        // Now remove the overlay and the transparent div from the DOM
                        $('#custom-lightbox-overlay').remove();
                        $('#custom-lightbox-transparent-div').remove();

                        // Restore title and show hr immediately before async state reset
                        title.text(currentTitle);
                        hr.show();

                        // Remove the click event handlers after the lightbox is closed
                        $(document).off('click', lightboxModals);
                        $('#custom-lightbox-modal .lightbox-close-button').off('click');

                    }

                      // Function to reapply event handlers to SVG elements
                      function reapplyEventHandlers(svgElement, isInLightbox) {
                        const INTERACTIVE_NODE_CLASS = 'interactive-node';
                        const POINTER_EVENTS_NONE = 'none';
                        const POINTER_EVENTS_AUTO = 'auto';
                        const CURSOR_DEFAULT = 'default';
                        const CURSOR_POINTER = 'pointer';
                
                        svgElement.find(`.${INTERACTIVE_NODE_CLASS}`).off(MOUSE_CLICK).off(MOUSE_ENTER).off(MOUSE_LEAVE);
                
                        svgElement.find(`.${INTERACTIVE_NODE_CLASS}`).css(POINTER_EVENTS, isInLightbox ? POINTER_EVENTS_NONE : POINTER_EVENTS_AUTO)
                            .css('cursor', isInLightbox ? CURSOR_DEFAULT : CURSOR_POINTER)
                            .hover(
                                function () {
                                    if (!isInLightbox) {
                                        $(this).css('opacity', '1');
                                    }
                                },
                                function () {
                                    if (!isInLightbox) {
                                        $(this).css('opacity', '0.8');
                                    }
                                }
                            ).on(MOUSE_CLICK, function (event) {
                                event.stopPropagation(); // Prevent click event propagation within the lightbox
                
                                const title = $(this).data('label');
                                const contents = $(this).data('tinymce');
                    
                            // Check if the section contains HTML content or an external link
                            if (contents && !isInLightbox) {
                                const newTab = window.open('', '_blank');
                                newTab.document.open();
                    
                                // Set the title of the new tab
                                newTab.document.title = title;
                    
                                // Write the contents and apply custom styling
                                newTab.document.write(`
                                    <html>
                                    <head>
                                        <style>
                                            body {
                                                background-color: #f0f0f0;
                                                padding: 20px;
                                            }
                                            
                                            .content-container {
                                                max-width: 600px;
                                                background-color: #ffffff;
                                                box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
                                                padding: 20px;
                                                font-family: Arial, sans-serif;
                                                font-size: 14px;
                                                line-height: 1.5;
                                            }
                                            
                                            a {
                                                color: blue;
                                                text-decoration: none;
                                            }
                                            
                                            a:hover {
                                                text-decoration: underline;
                                            }
                                        </style>
                                    </head>
                                    <body>
                                        <div class="content-container">
                                            <h1>${title}</h1>
                                            ${contents}
                                        </div>
                                    </body>
                                    </html>
                                `);
                    
                                newTab.document.close();
                            } else if (!isInLightbox) {
                                const link = $(this).data('link');
                                if (link) {
                                    window.open(link, '_blank');
                                }
                            }
                        });
                    }  
    }

    // make links open new tab
    const linksOpenNewTab = (container) => {
        const links = container.find('a');
        links.attr('target', '_blank');
    }

    const preventClickingLinks = (container) => {
        const links = container.find('a');

        links.on('click', function (e) {
            e.preventDefault();
        });
    }

    const getScale = (svg) => {
        const svgWidth = svg.width();
        const svgRealWidth = parseInt(svg.attr('width'));

        return svgWidth/svgRealWidth;
    }

    const initLinksPopup = (diagram, svg, groups, popup) => {
        const diagramOffset = diagram.offset();

        groups.each(function (){
            const group = $(this);
            const foreignObject = group.find('foreignObject');

            if (foreignObject.length === 1) {
                const rect = group.find('rect');
                const offset = rect.offset();

                group.on(MOUSE_CLICK, function () {
                    popup.hide();
                    const scale = getScale(svg);
                    const width = rect.width() * scale;
                    const height = rect.height() * scale;
                    const links = foreignObject.find('a');
                    const content = ['<div class="close-container"><button type="button" class="close">&times;</button></div>'];

                    if (links.length === 0) {
                        return;
                    }

                    if (typeof offset === 'undefined') {
                        return;
                    }

                    links.each(function (index, item) {
                        content.push(`<div class="link"><a href="${item.href}" target="_blank">${item.text}</a></div>`);
                    });
                    popup.html(content.join(''));
                    const popupWidth = popup.outerWidth();

                    const svgWidth = svg.width() - 100;
                    let adjustment = 0;
                    if (svgWidth < offset.left && scale < 1) {
                        adjustment = (width - popupWidth) / 2;
                    }
                    if (offset.left < 100 && scale < 1) {
                        adjustment = (popupWidth - width) / 2;
                    }

                    popup.css('top', height + offset.top - diagramOffset.top);
                    popup.css('left', (width - popupWidth)/2 + offset.left - diagramOffset.left + adjustment);
                    if (scale < 1) {
                        popup.css('margin-top', 20 * scale);
                    }
                    popup.show();

                    popup.on('click', 'button.close', function () {
                        popup.hide();
                    });

                });
            }
        });

        $(window).on('resize', function () {
            popup.hide();
        });

        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            const svgLinks = svg.find('a');
            svgLinks.on('click', function (e) {
                e.preventDefault();
            });
        }
    }

    const initInteractiveNodes = (diagram, svg, groups, popup, diagramInfo, interactiveNodes, globalEventType ) => {
        const resultDetails = diagramInfo.find('.result-details');
        interactiveNodes.each(function (index) {
            const node = $(this);
            const eventType = getEventType(node, globalEventType);

            if (eventType === 'none') {
                node.removeClass(INTERACTIVE_NODE);
                return;
            }

            const result = processNodeData( node.data());

            const {list, customTable, tinyMce, products} = result;

            if (list.length === 0 && typeof customTable === 'undefined' && typeof tinyMce === 'undefined'
                && products.length === 0 ) {
                node.removeClass(INTERACTIVE_NODE);
                return;
            }

            if (products) {
                prefetchProducts(products);
            }

            node.on(eventType, function () {
                interactiveNodes.removeClass(FOCUS_NODE);
                node.addClass(FOCUS_NODE);

                setViewerTitle(diagramInfo, node);
                setViewerDescription(diagramInfo, node);
                clearPanelContent(resultDetails, diagramInfo);

                if (list.length > 0) {
                    // need to reverse because 'node.data()' returns a reversed order of data
                    // compared to the order in the diagram
                    list.reverse();
                    const ol = ['<ul>', list.join(''), '</ul>'].join('');
                    resultDetails.html(ol);
                }

                if (customTable) {
                    resultDetails.append(customTable);
                }
                if (tinyMce) {
                    resultDetails.append(tinyMce);
                    updateTinyMceTable(resultDetails.find('table'));
                }
                if (products.length > 0) {
                    initCompareProducts(products, diagramInfo);
                }

                if (diagramInfo.is(':hidden')) {
                    popup.hide();
                    diagramInfo.show('slide', {direction: 'right'});
                    initLinksPopup(diagram, svg, groups, popup);
                    diagram.removeClass('full-view');
                }
            });

            if (eventType === MOUSE_ENTER) {
                node.on(MOUSE_CLICK, function () {
                    SYMBOL_CLICKED = true;
                    node.addClass(NODE_CLICKED_CLASS);
                    CLICKED_NODE = node;
                });

                node.on(MOUSE_ENTER, function () {
                    if (SYMBOL_CLICKED) {
                        if (!node.hasClass(NODE_CLICKED_CLASS) && (typeof CLICKED_NODE !== 'undefined')) {
                            CLICKED_NODE.removeClass(NODE_CLICKED_CLASS);
                            CLICKED_NODE.removeClass(FOCUS_NODE);
                            CLICKED_NODE = undefined;
                            SYMBOL_CLICKED = false;
                        }
                    }
                });

            }

        });
    }

    const initCompareProducts = (products, diagramInfo) => {
        const compareSection = diagramInfo.find('.compare-products');
        let infoIsReady = true;
        products.forEach(function (product, idx) {
            // try to check if available already in window.CACHED_PARTS
            const partNumber = getProductName(product);

            if (!window.CACHED_PARTS[partNumber]) {
                infoIsReady = false;
            }
        });

        if (infoIsReady) {
            renderCompareSection(products, compareSection);
            if (products.length > 1) {
                addCompareButton(products, diagramInfo);
            }
        }
    }

    const renderCompareSection = (products, container) => {
        const content = [];
        products.forEach(function(product) {
            const pname = getProductName(product);
            if (typeof window.CACHED_PARTS[pname].deviceFamily === 'string') {
                content.push(productTemplate(product));
            }
        });

        container.html(content.join(''));
    }

    const addCompareButton = (products, diagramInfo) => {
        const partsArray = [];
        products.forEach(function (product) {
            partsArray.push(getProductName(product));
        });
        const compareButton = `
<div class="compare-button">
    <a href="https://www.microchip.com/en-us/product-comparison.${partsArray.join('.')}.compare" target="_blank">
        <div>Compare</div>
    </a>
</div>
        `;

        diagramInfo.append(compareButton);
    }

    const productTemplate = (product) => {
        const pname = getProductName(product);
        const p = window.CACHED_PARTS[pname];
        const description = product.value || p.description;
        const documents = p.documents;
        let datasheet = '';

        documents?.some(function (docu) {
            const docuType = docu.displayType.toLowerCase().replaceAll(' ', '');
            if (docuType === 'datasheets') {
                datasheet = `
<a href="${docu.url}" target="_blank">
    ${pdf_icon}Data Sheet
</a>
                `;
            }
            return !!datasheet;
        });

        return `
<div class="product">
    <div class="product-info">
        <div>
            <div class="partnumber">
                <a href="https://www.microchip.com/en-us/product/${p.title}">${p.deviceFamily}</a>
            </div>
            <div class="part-description">
                ${description}
            </div>
        </div>
        <div class="toggle">${caret_down_icon}</div>
    </div>
    <div class="collapsible">
        <ul>
            <li>
                <a href="https://www.microchipdirect.com/product/search/all/${p.deviceFamily}" class="red"
                 target="_blank">
                    ${shopping_cart_icon}Order now
                </a>
            </li>
            <li>${datasheet}</li>
        </ul>
    </div>
</div>
        `;
    }

    const clearPanelContent = (resultDetails, diagramInfo) => {
        resultDetails.html('');
        diagramInfo.find('.compare-button').remove();
        diagramInfo.find('.compare-products').html('');
    }
    
    const getProductName = (product) => {
        return product.name.toLowerCase();
    }

    const prefetchProducts = (products) => {
        products.forEach(function (product) {
            fetchProductInfo(product);
        });
    }

    const fetchProductInfo = (product) => {
        const productCode = getProductName(product);
        const CONTENT_TYPE = 'application/json; charset=utf-8';

        if (typeof window.CACHED_PARTS[productCode] !== 'undefined') {
            return;
        }

        const productApi = useLocal ? localApi + productCode : parametricApi + productCode;

        if (useLocal) {
            $.ajax({
                type: "GET",
                url: `${productApi}.json`,
                contentType: CONTENT_TYPE,
            }).done(function (response) {
                CACHED_PARTS[productCode] = response;
            });
        } else {
            $.ajax({
                type: "POST",
                url: tokenApi,
                contentType: CONTENT_TYPE
            }).done(function (response) {
                $.ajax({
                    type: "GET",
                    url: productApi,
                    contentType: CONTENT_TYPE,
                    beforeSend: function (xhr) {
                        //Include the bearer token in Authorization header
                        xhr.setRequestHeader("Authorization", 'Bearer ' + response.token);
                    }
                }).done(function (part_info) {
                    window.CACHED_PARTS[productCode] = part_info;
                })
            });
        }
    }

    /*
     * Tests a node if has data and tag it as an interactive node
     *
     * @param item, item to test
     */
    const tagInteractiveNodes = (item) => {
        const allData = $(item).data();
        const foreignObject = $(item).find('foreignObject');
        const links = foreignObject.find('a');

        if (Object.keys(allData).length === 0 && links === 0) {
            $(item).find('rect').attr(POINTER_EVENTS, 'none');
            return;
        }
        if (Object.keys(allData).length === 1) {
            if (allData.hasOwnProperty('label')) {
                $(item).find('rect').attr(POINTER_EVENTS, 'none');
                // ignore
                return;
            }
        }
        $(item).addClass(INTERACTIVE_NODE);
        $(item).removeAttr('content');
    }

    const initHandlers = (diagram, svg, groups, popup, diagramInfo, interactiveNodes) => {
        diagramInfo.on('click', '.hide-button', function() {
            setTimeout(() => diagram.addClass('full-view'), 100);
            popup.hide();
            diagramInfo.hide('slide', {direction: 'right', duration: 300, complete: function () {
                    initLinksPopup(diagram, svg, groups, popup);
                }
            });
            interactiveNodes.removeClass(FOCUS_NODE);
        });

        diagramInfo.on('click', '.toggle', function () {
            const toggle = $(this);
            const icon = toggle.find('.fa-angle-down');
            const collapsible = toggle.closest('.product').find('.collapsible');
            collapsible.toggle('300', 'swing', function () {
                icon.toggleClass('expand');
            });
        });

          // Event delegation for hover effects
            svg.on('mouseenter', `.${INTERACTIVE_NODE}`, function () {
                $(this).css('opacity', '1');
            }).on('mouseleave', `.${INTERACTIVE_NODE}`, function () {
                $(this).css('opacity', '0.8');
            });
    }

    const setViewerTitle = (diagramInfo, node, clear = false) => {
        const resultTitle = diagramInfo.find(`.${RESULT_TITLE_CLASS}`);
        if (clear) {
            resultTitle.html(NO_SELECTION_TEXT);
            return;
        }
        const label = node.data('label') ? node.data('label').trim().replace(/<br>/g, ' ') : '';
        const title = node.data('title') ? node.data('title').trim() : label;

        title ? resultTitle.html(title) : resultTitle.html('&nbsp;');

        linksOpenNewTab(resultTitle);
    }

    const setViewerDescription = (diagramInfo, node, clear = false) => {
        const resultDescription = diagramInfo.find('.result-description');
        if (clear) {
            resultDescription.hide();
            return;
        }
        const description = node.data('description') ? node.data('description').trim() : '';

        if (description) {
            resultDescription.html(description);
            resultDescription.show();
            linksOpenNewTab(resultDescription);
        } else {
            resultDescription.hide();
        }
    }

    const processNodeData = (data) => {
        const list = [];
        let customTable;
        let tinyMce;
        let products = [];

        for (const key in data) {
            if (!data.hasOwnProperty(key) || STANDARD_ATTRIBUTES.indexOf(key) >= 0) {
                if (key === 'bloqqTable') {
                    customTable = generateCustomTable(data[key]);
                }
                if (key === 'tinymce') {
                    const div = document.createElement('div');
                    const content = data[key];
                    div.innerHTML = content;
                    if (div.innerText.trim() !== '') {
                        tinyMce = content;
                    }
                }
                if (key === 'comparePartNumbersProperty') {
                    products = data[key] || [];
                }
                continue;
            }
            const val = data[key];
            list.push(generateListItems(key, val));
        }

        return {list: list, customTable: customTable, tinyMce: tinyMce, products: products};
    }

    /*
     * @return a list item <li> from the data attribute key:value pair
     */
    const generateListItems = (key, val) => {
        let className = 'capitalize';
        let anchor = 'Link';

        if (key.includes('_', 1)) {
            key = key.replace(/_/g, '-');
            className = '';
        } else {
            key = key.replace(/[A-Z]/g, m => ' ' + m.toLowerCase());
        }

        if (key === 'url') {
            anchor = val;
        }

        val = isLink(val) ? convert2Link(val, anchor) : val;
        return `<li><div><h4 class="${className}">${key}</h4><div class="content">${val}</div></div></li>`;
    }

    // tests a value if it is a link
    const isLink = (val) => val.indexOf('http://') === 0 || val.indexOf('https://') === 0;

    // converts a given URL into a proper link
    const convert2Link = (url, text) => `<a href="${url.replace('http://', 'https://')}" target="_blank">${text}</a>`;

    /*
     * Converts a JSON representation of a table into an html table
     *
     * @param data, a JSON representation of a table
     * @return an html table as string
     */
    const generateCustomTable = (data) => {
        let html = '';
        let hasHeaders = false;

        if (data.length) {
            html = '</tbody>';

            for (let i = 0; i < data.length; i++) {
                const row = generateTableRow(data[i]);

                if (isRowHeader(data[i][0])) {
                    html = '<thead>' + row.replace('===', '') + '</thead><tbody>';
                    hasHeaders = true;
                } else {
                    html += row;
                }
            }

            html = `<table class="results-table custom-table ${hasHeaders ? 'with-headers' : ''}">${html}</tbody></table>`;
        }
        return html;
    }

    const generateTableRow = (rowData) => {
        let row = '<tr>';
        for (let i = 0; i < rowData.length; i++) {
            let val = rowData[i];
            val = isLink(val) ? convert2Link(val, 'Click Here') : val;
            row += `<td>${val}</td>`;
        }
        row += '</tr>';

        return row;
    }

    const isRowHeader = (val) => {
        return val.indexOf('===') === 0;
    }

    /*
     * Converts the first row of the TinyMCE table to a header if needed
     *
     * @param table, a Jquery table element
     * @return updated/same table
     */
    const updateTinyMceTable = (tables) => {
        tables.each(function () {
            const table = $(this);
            const firstRow = table.find('tr:first');
            const cols = firstRow.find('td');
            let isHeader = false;

            cols.each(function () {
                const text = $(this).text().toLowerCase();

                if (['part number', 'popular products', 'product web page', 'description'].indexOf(text) > -1) {
                    isHeader = true;
                }
            });
            if (!isHeader) {
                return;
            }

            const updatedRow = `<thead>${firstRow.html()}</thead>`;
            firstRow.remove();
            table.addClass('with-headers');
            table.prepend(updatedRow);
        });
    }

    // returns the interactive event type of a node
    const getEventType = (node, defaultType) => {
        const eventTypeNames = {
            click: MOUSE_CLICK,
            hover: MOUSE_ENTER,
            none: MOUSE_NONE,
        }
        const eventType = node.data('eventtype') ? node.data('eventtype') : defaultType;

        return eventTypeNames[eventType];
    }

        // Disable result-panel functionality when mousing over the SVG
        $(SVG_DIAGRAM_CLS).on('mouseenter', function () {
            blockDiagrams.find('.result-panel').addClass('disable-result-panel');
        }).on('mouseleave', function () {
            blockDiagrams.find('.result-panel').removeClass('disable-result-panel');
        });

       //set alt val if empty
       var imgSrc = $(SVG_DIAGRAM_CLS).find('img').attr('src');
       if (imgSrc !== undefined) {
          var fileName = imgSrc.substring(imgSrc.lastIndexOf('/') + 1, imgSrc.lastIndexOf('.'));
          var alt = $(SVG_DIAGRAM_CLS).find('img').attr('alt');
          if (alt === undefined || alt === "") {
                  $(SVG_DIAGRAM_CLS).find('img').attr('alt', fileName);
          }
       }
});

const hide_content = "hide-content";
$(document).ready(function () {
    var geturl = window.location;
    var target = geturl.protocol + "//" + geturl.host + "/bin/mchp/devtoolsearch.json";
    var modal = document.getElementById("buy-now-modal");
    var continueShoppingAndCartButton = $('.product-cart-footer a');
    continueShoppingAndCartButton.on('click', function (){
        modal.classList.toggle(hide_content);
    });
    if(typeof microchipDIRECT !== 'undefined' && microchipDIRECT !==  undefined) {
      microchipDIRECT.URL = $('.mchp-direct-url-base')[0].innerHTML;
    }
    var closeButton = $('.close-icon-wrapper a');
    closeButton.on('click', function() {
        modal.classList.toggle(hide_content);
    });
    var addToCartButton = $("span:contains('Add to Cart')").closest('a').get(0);
    if(addToCartButton != null){
        var url = window.location.pathname.split('/');
        const ending = url[url.length - 1];
        var partnumber;
        if(ending.split('.').length !== 3){
            partnumber = ending;
        }
        else{
            partnumber = ending.split('.')[1];
        }

        $.ajax({
            url: target,
            type: 'GET',
            data: {partNumber: partnumber},
            dataType: "json",
            success: function(response) {
                    if(response.length < 1 || response[0].applicationExample === "true" || response[0].webPurchaseable === "false" || response[0].marketoId){
                        addToCartButton.classList.add("hide-content");
                    }
                    else{
                        addToCartButton.classList.add("addtocart");
                        addToCartButton.setAttribute("tabindex","0")
                        addToCartButton.setAttribute("partNumber", partnumber);
                        addToCartButton.setAttribute("onclick", "microchipDIRECT.addToCart('" + partnumber + "',1); getCartCountAndTotal();");
                        addToCartButton.setAttribute("onkeypress", "microchipDIRECT.addToCart('" + partnumber + "',1); getCartCountAndTotal();");
                    }
            },
            error: function(xhr) {
                console.log("error getting devtool");
            }
        })

    }
    if(typeof microchipDIRECT !== 'undefined'){
        microchipDIRECT.handleAddToCart = function (resp){
            var productInfo = document.getElementById("productInfoBody");
            var pn = document.getElementById("partNum");
            var quantity = document.getElementById("quantity");
            var ppu = document.getElementById("pricePerUnit");
            var totalAmount = document.getElementById("totalAmount");
            var msg = document.getElementById("respMessage");
            msg.textContent = resp.Msg;

            resetQuantity(resp);

            if(resp.IsValid){

                if(productInfo.classList.contains(hide_content)){
                    productInfo.classList.toggle(hide_content);
                }
                pn.textContent = resp.CPN;
                quantity.textContent = resp.Quantity;
                ppu.textContent = resp.PerUnitPricingValue;
                totalAmount.textContent = resp.TotalPricingValue;
                var img = document.getElementById("image");
                img.src = "";
                $.ajax({
                    url: target,
                    type: 'GET',
                    data: {partNumber: resp.CPN},
                    dataType: "json",
                    success: function(response) {
                        if(response.length >= 1){
                            if(response[0].images.length > 0){
                                img.src = response[0].images[0];
                                img.alt = 'product image of ' + resp.CPN;
                            }
                        }
                        else{
                           var image = $('img[alt="product image of ' + resp.CPN +'"]').get(0);
                                if(image != null){
                                    img.src = image.src;
                                }
                        }
                    },
                    error: function(xhr) {
                        console.log("error getting devtool");
                    }
                })
            }
            else{
                productInfo.classList.add(hide_content);
            }
            modal.classList.toggle(hide_content);
        }
    }
});

function resetQuantity(resp) {
    const partNumber = $(`.md-part-number:contains("${resp.CPN}")`);
    const row = partNumber.closest('tr');
    const quantity = row.find('.add-quantity input');
    quantity.val('');
}

$(document).ready(function () {
    const searchBarContainers = $('.searchbar');
    let icon = $('.search-icon');
    const suggestion = '.mchp-searchbar-suggestion';
    const headerSearch =$('.mchp-header-search');
    let mobileMenu = $('.mobile-list');
    const inputElHeader = $('.mchp-searchbar-input.mchp-headersearch');
    const headerSearchSuggestion = $(suggestion);
    const headerSearchText = $('.searchbar-content');
    const suggestionElement = '.mchp-searchbar-suggestion .selected';
   	const searchBarUrlElement = document.getElementsByClassName('mchp-searchbar-url-base');
    const searchDropDownContainer ='.search-dropdown';
    const categoryParamString='&category=';
    const myMicrochipMenu = '#myDropdown';
    const mchpmegamenu = '.mchp-mega-menu';
    const menuactive = 'menu-active';
    let isOnSearchPage=false;
    const searchpagepathname=window.location.pathname;

  let baseUrl = ""
  if((searchBarUrlElement && searchBarUrlElement.length > 0)) {
     baseUrl=atob(searchBarUrlElement[0].dataset.autosuggestUrl);
  };


    if(searchpagepathname.includes("/en-us/search")){
        isOnSearchPage = true;
    }
    //hiding category suggestions on header searchbar if on search page
    if(isOnSearchPage){
        $(searchDropDownContainer).css('display','none');
    }

    searchBarContainers.each(function (idx, container) {
        const $container = $(container);
        const inputEl = $container.find('.has-search-clear');
        let inputVal = '';
        const searchText = $container.find('.searchbar-content');
        const searchIcon = $container.find('#mchp-searchbar-icon');
        const searchSuggestion = $container.find(suggestion);
        const overlay = $container.find('.mchp-searchbar-results-overlay');
        let timer;
        let selectedSuggestion = '';
        let suggestionList = [];
        const clearsearch = $container.find('.search-clear');
        const lowerEnv = ['localhost:4502','localhost:4503','chn-vm-aemqapub.mchp-main.com:4503'];

       let url = 'https://www.microchip.com/en-us/search.html';

    if(isAuthor() || lowerEnv.includes(window.location.host)){
        url=window.location.protocol + "//"+window.location.host+'/content/mchp/en-us/search.html?searchQuery=';
    }
    else {
        url=window.location.protocol + "//"+window.location.host+'/en-us/search?searchQuery=';
    }


        const queryAPI = (searchTerm) => {

			if(searchTerm.length < 3){
				searchSuggestion.hide();
				return;
        	}

        	const timeStamp = Date.now();
         	const queryUrl = baseUrl + `?q=${searchTerm}&limit=10&timestamp${timeStamp}=&doc=no`;

            if (inputVal === searchTerm) {
                // prevent querying again
                return;
            }

            inputVal = searchTerm;

             $.getJSON(queryUrl, function (data, status, req) {
                if (status === 'success') {
                    if (data.trim() === '') {
                        searchSuggestion.hide();
                        overlay.hide();
                        return;
                    }
                    closeAllMegaMenus();
                    searchText.hide();
                    searchSuggestion.show();

                    overlay.show();
                    if (selectedSuggestion) {
                        $(selectedSuggestion).removeClass('selected');
                        selectedSuggestion = '';
                    }
                    suggestionList = [];

                    let result = data.split('\r\n');
                    searchSuggestion.empty();
                    result.forEach(function (term) {
                        if (term.trim()) {
                            let newTerm = term;
                            let regex = new RegExp(searchTerm, 'gi');
                            let matches = term.match(regex);
                            if (matches && matches.length > 0) {
                                let splitTerm = term.split(regex);
                                const beginsWithTerm = term.indexOf(searchTerm) === 0;
                                newTerm = '';
                                matches.forEach(function (match, matchId) {
                                    if (beginsWithTerm) {
                                        newTerm += `<span class="mchp-searchbar-term">${match}</span>${splitTerm[matchId]}`;
                                    } else {
                                        newTerm += `${splitTerm[matchId]}<span class="mchp-searchbar-term">${match}</span>`;
                                    }
                                });
                                if (splitTerm.length > matches.length) {
                                    newTerm += splitTerm[matches.length];
                                }
                            }
                            searchSuggestion.append(`<div class="mchp-searchterm-container">${newTerm}</div>`);
                            $('.mchp-searchterm-container').on('click', function () {
                                const category = $(searchDropDownContainer).val();
                                let searchTerm = encodeURI($(this).text());
                                if(isOnSearchPage){
                                    SearchSubmitForm(category,$(this).text());

                                }else{

                                     window.location.href = url + searchTerm + categoryParamString +category;
                                }
                            });
                        }
                    });
                    suggestionList = Array.from(document.getElementsByClassName('mchp-searchterm-container'));
                } else {
                    window.location.href = url + searchTerm;
                }
            }).fail(function () {
                // fail silently when search suggestion API fails,
                // user can just go ahead and click enter to search
            });
        }

        const handleArrowKeys = (key) => {
            switch (key) {
                case 40:
                    // arrow down
                    if (!selectedSuggestion && (suggestionList.length > 0) && suggestionList[0]) {
                        selectedSuggestion = suggestionList[0];
                    } else {
                        $(selectedSuggestion).removeClass('selected');
                        let next = $(selectedSuggestion).next();

                        selectedSuggestion = next.length > 0 ? $(selectedSuggestion).next() : '';
                    }
                    selectedSuggestion && $(selectedSuggestion).addClass('selected');
                    if(selectedSuggestion !== "") {
                     document.querySelector(suggestionElement).scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
                    }
                    break;
                case 38:
                    // arrow up
                    if (!selectedSuggestion && (suggestionList.length > 0) && suggestionList[suggestionList.length -1]) {
                        selectedSuggestion = suggestionList[suggestionList.length -1];
                        $(selectedSuggestion).addClass('selected');
                    } else {
                        $(selectedSuggestion).removeClass('selected');
                        let prev = $(selectedSuggestion).prev();
                        selectedSuggestion = prev.length > 0 ? prev : '';
                    }
                    selectedSuggestion && $(selectedSuggestion).addClass('selected');
                    if(selectedSuggestion !== "") {
                    document.querySelector(suggestionElement).scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
                    }
                    break;
                default:
                    break;
            }
        }

        inputEl.on('keydown', function (event) {
            const key = event.which;
            let searchTerm = encodeURI(inputEl.val());
            const category = $(searchDropDownContainer).val();
            if(isOnSearchPage &&  (key === 13 && searchTerm && searchTerm !== '%20')) {
                   SearchSubmitForm(category,inputEl.val());
            }
            else{
                timer && clearTimeout(timer);

                showSearchClear(searchTerm);
                $('#sitewide-search-submit').prop("disabled", false);

                // enter key
               if (key === 13 && searchTerm && searchTerm !== '%20') {
                    if (selectedSuggestion) {
                        searchTerm = $(selectedSuggestion).text();
                    }
                    window.location.href = url + searchTerm +categoryParamString+category
                }

                // right or left arrow keys
                if (key === 37 || key === 39) {
                    if (inputVal === encodeURI(inputEl.val())) {
                        // prevent querying again when using arrow keys
                        return;
                    }
                }

                // up or down arrow keys
                if (key === 40 || key === 38) {
                    handleArrowKeys(key);
                    event.preventDefault();
                    event.stopPropagation();

                    // prevent querying again when using arrow keys
                    return;
                }

                timer = setTimeout(function () {
                    queryAPI(encodeURI(inputEl.val().trim()));
                }, 300);
            }
        });
  clearsearch.on('keydown', function (event) {
            if (event.which === 13) {
              searchSuggestion.hide();
              inputElHeader.val('');
              clearsearch.addClass(hideContent);
          }
      });
      $('#sitewide-search-submit').on('keydown', function (event) {
               if(event.which === 13) {
                  searchSuggestion.hide();
                  searchTermQuery();
              }
       });

        function closeAllMegaMenus() {
           try {
                   $(mchpmegamenu).addClass(hideContent);
                   $('.menu-active').removeClass(menuactive);
                   $(myMicrochipMenu).removeClass('show');
                   $('.mchp-mobile-menu').addClass(hideContent);
                  } catch (err) {
                   console.error('Unable to close all menus');
                  }
         }

        $('.mchp-searchbar-container input[type="search"]').blur(function(){
            if(!$(this).val()){
                searchSuggestion.hide();
                searchText.show();
            }
        });

      searchIcon.on('click', function (event) {
         searchTermQuery();
        });
         function searchTermQuery() {
            let searchTerm = encodeURI(inputEl.val());
            const category = $(searchDropDownContainer).val();
            if (searchTerm && searchTerm !== '') {
                if(isOnSearchPage) {
                     SearchSubmitForm(category,inputEl.val());
                }
                else{
                    window.location.href = url + searchTerm + categoryParamString+category;;
                }
            }
         }

        $(overlay).on('click', function () {
            searchSuggestion.hide();
            $(this).hide();
        })

        function showSearchClear(searchTerm) {

            if (searchTerm) {
                clearsearch.removeClass(hideContent);
            } else {
                clearsearch.addClass(hideContent);
            }
        }


    })
    //Clicking anywhere outside the search bar closes the search panel
    $('body').on('click', closeSearch);

    //Cancel the above event when clicking inside the search bar
    $(headerSearch).on('click', (e) => {
        e.stopPropagation();
    });

    //show searchpane
    icon.on('click', function (e) {
        if (headerSearch.is(':hidden')) {
            e.stopPropagation();
            mobileMenu.addClass(hideContent);
            icon.addClass('active');
            inputElHeader.focus();
        }
    });

    //close searchpane
    function closeSearch() {
        icon.removeClass('active');
        headerSearchSuggestion.hide();
        headerSearchText.hide();

    }
   function isAuthor(){
        return"localhost"===location.hostname||location.hostname.includes("author")||location.hostname.includes("aem.microchip.com")
      }

})

$(document).ready(()=> {
    let categoryNavigationLinks = $('.mchp-category-navigation .subtitle');

    categoryNavigationLinks.each((index) => {
        let link = categoryNavigationLinks[index];

        $(link).click((e) => {
            let clickedElement = e.currentTarget;
            $(clickedElement).parent().toggleClass('menu-open');


        });
    });
});
var slideIndex = 1;
showSlidesStyle2(slideIndex);

function plusSlidesStyle1(n) {
  showSlidesStyle1(slideIndex += n);
}

function plusSlidesStyle2(n) {
  showSlidesStyle2(slideIndex += n);
}

function showSlidesStyle2(n) {
  var i;
  var slides = document.getElementsByClassName("mySlidesStyle2");
  if (slides.length > 0) {
    if (n > slides.length) {slideIndex = 1}
      if (n < 1) {slideIndex = slides.length}
      for (i = 0; i < slides.length; i++) {
          slides[i].style.display = "none";
      }
       slides[slideIndex-1].style.display = "";
  }
}
/**
 * @purpose: ON resize of the ceros component.
 */
$(function() {
//    console.log("Inside the text image overlap");
    $(window).on('resize', function() {
        var win = $(this); //this = window
        if (win.height() >= 820) { /* ... */ }
        if (win.width() >= 1280) { /* ... */ }
    });

    function imgIEStyle(image) {
        if ('objectFit' in document.documentElement.style === false && image.currentStyle['object-fit']) {
            image.style.background = 'url("' + image.src + '") no-repeat 50%/' + image.currentStyle['object-fit'];
            image.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + image.width + "' height='" + image.height + "'%3E%3C/svg%3E";
        } else {
//            console.log("Non IE browser");
        }
    }

    if ($('.mchp-grid-content').length) {
        $('.mchp-grid-content-container').each((ep, elem) => {
            $(elem).find('img.mchp-overlap-image').each((ec, childElem) => {
                if (childElem)
                    imgIEStyle(elem);
            });
        });
    }

});
function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return null;
}

function setCookieAgree() {
    let date = new Date();
    date.setTime(date.getTime() + (365 * 24 * 60 * 60 * 1000));
    const hostname=window.location.hostname;
    /* COMMENTED OUT UNTIL CLIENT DECIDES ON COOKIE SETTINGS
    var performanceHotjarToggleBtn = $('.mchp-cookie-body .mchp-tab-content .tab-wrap p .performance-hotjar');
    var performanceGoogleToggleBtn = $('.mchp-cookie-body .mchp-tab-content .tab-wrap p .performance-google');
    var analyticsHotjarToggleBtn = $('.mchp-cookie-body .mchp-tab-content .tab-wrap p .analytics-hotjar');
    var analyticseGoogleToggleBtn = $('.mchp-cookie-body .mchp-tab-content .tab-wrap p .analytics-google');

    if(performanceHotjarToggleBtn.is(":checked") == true){localStorage.setItem('performanceHotjar', true);}
    else{localStorage.setItem('performanceHotjar', false)};

    if(performanceGoogleToggleBtn.is(":checked") == true){localStorage.setItem('performanceGoogle', true);}
    else{localStorage.setItem('performanceGoogle', false)};

    if(analyticsHotjarToggleBtn.is(":checked") == true){localStorage.setItem('analyticsHotjar', true);}
    else{localStorage.setItem('analyticsHotjar', false);}

    if(analyticseGoogleToggleBtn.is(":checked") == true){localStorage.setItem('analyticsGoogle', true);}
    else{localStorage.setItem('analyticsGoogle', false);}
    */

    var expires = "expires=" + date.toUTCString();
    if(hostname.includes(".microchip.com"))
    {
    document.cookie = "cookieagree=agree;" + expires + ";path=/;secure;samesite=None ;domain=.microchip.com"
    }
    else{
    document.cookie = "cookieagree=agree;" + expires + ";path=/"
    }
    $('.mchp-cookie .mchp-cookie-modal').removeClass('show-cookie-settings');
    $('.mchp-cookie-banner').removeClass('open_banner');
    window.setTimeout(function () {
        $('.cookieSettings').remove();
    }, 500)

}

function disableScroll(body) {
    body.addClass('mchp-hide-body-overflow');
    $('.mchp-cookie-banner').addClass('remove-z-index');
}

function enableScroll(body) {
    body.removeClass('mchp-hide-body-overflow');
    $('.mchp-cookie-banner').removeClass('remove-z-index');
}

$(document).ready(function (e) {
    let body = $('body');
    let slickNext = $('.slick-next');
    let slickPrev = $('.slick-prev');

    let cookieagree = getCookie("cookieagree");
    if (cookieagree == null) {
        window.setTimeout(function () {
            $('.mchp-cookie-banner').addClass('open_banner');
        }, 1300)
        slickNext.addClass('mchp-toggle-z-index');
        slickPrev.addClass('mchp-toggle-z-index');
    }

    /* COMMENTED OUT UNTIL CLIENT DECIDES ON COOKIE SETTINGS
    var cookieSettingsButton = $('.mchp-cookie-banner__settings .mchp-button-wrapper .mchp-button');
    var removeStickyHeader = $('.mchp-header');

    var showCookieSettings = $('.mchp-cookie .mchp-cookie-modal');

    cookieSettingsButton.on('click', function(){
        var cardItems = $('.mchp-card-items');

        $(window).on('resize', function () {
            cardItems.each(function () {
                var slickButton = $(this).find('button');
                slickButton.each(function () {
                    $(this).addClass('mchp-toggle-z-index');
                })
            })
        })

        removeStickyHeader.addClass('mchp-toggle-z-index');
        showCookieSettings.addClass('show-cookie-settings');
        disableScroll(body);
    })

    var saveSettings = $('.mchp-cookie-save');
    saveSettings.on('click', function(){
        removeStickyHeader.removeClass('mchp-toggle-z-index');
        showCookieSettings.removeClass('show-cookie-settings');
        enableScroll(body);
        setCookieAgree();
    });

    window.addEventListener('click', function(e){
        if (showCookieSettings.is(e.target)){
            removeStickyHeader.removeClass('mchp-toggle-z-index');
            showCookieSettings.removeClass('show-cookie-settings');
            enableScroll(body);
        }
    });


    // Vertical Tabs Content Switching
    $('.mchp-cookie-body .mchp-vertical-tabs a').on('click', function() {
        var tabIndex = $(this).index();
        $('.mchp-cookie-body .mchp-tab-content.visible').removeClass('visible');
        $('.mchp-cookie-body .mchp-tab-content:nth-of-type(' + (tabIndex + 2) + ')').addClass('visible');
    });

    // Vertical Tabs Active Links
    var tabLink = $('.mchp-cookie-body .mchp-vertical-tabs a li');
    tabLink.on('click', function(){
        var selectedTab = $(this);
        tabLink.removeClass('cookie-tab-active');
        selectedTab.addClass('cookie-tab-active');
    });

    // Mobile Menu
    var barButton = $('.mchp-cookie-hamburger-holder');
    var closeButton = $('.mchp-cookie-mobile-close');
    var mobileMenu = $('.cookie-mobile-wrap');

    barButton.on('click', function(){
        barButton.removeClass('is-active');
        barButton.addClass('is-hidden');
        closeButton.removeClass('is-hidden');
        closeButton.addClass('is-active');
        mobileMenu.removeClass('is-hidden');
        mobileMenu.addClass('is-active');
    });

    closeButton.on('click', function(){
        barButton.removeClass('is-hidden');
        barButton.addClass('is-active');
        closeButton.removeClass('is-active');
        closeButton.addClass('is-hidden');
        mobileMenu.removeClass('is-active');
        mobileMenu.addClass('is-hidden');
    });

    var mobileTabLink = $('.mchp-cookie-heading .cookie-mobile-wrap a li');
    mobileTabLink.on('click', function(){
        var selectedTab = $(this);
        mobileTabLink.removeClass('cookie-tab-active');
        selectedTab.addClass('cookie-tab-active');
    });

    // Vertical Tabs Content Switching
    $('.mchp-cookie-heading .cookie-mobile-wrap a').on('click', function() {
        var tabIndex = $(this).index();
        $('.mchp-cookie-body .mchp-tab-content.visible').removeClass('visible');
        $('.mchp-cookie-body .mchp-tab-content:nth-of-type(' + (tabIndex + 2) + ')').addClass('visible');
    });
    */
})

let $items = $('.mchp-title__text');
    $items.each(function(){
		let anchor = $(this).children('a');
		if (anchor) {
			let link = $(this).children('a').attr('href');
			let target = $(this).children('a').attr('target');
            let parent = anchor.parents('.linkcard');
            if (target) {
				parent.wrap('<a class = "linkcard-link" href="'+link+'" target="'+target+'"></a>');
            } else {
                parent.wrap('<a class = "linkcard-link" href="'+link+'"></a>');
            }
    	}
    });


function showUnsafeHTMLModalForm(modalUnsafeContainer, body){
    modalUnsafeContainer.removeClass('hide-embed-modal').addClass('show-embed-modal');
    if(body.hasClass('disable-body-scroll')){
        body.removeClass('disable-body-scroll');
    }else{
        body.addClass('disable-body-scroll');
    }
}

function showMarketoModalForm(modalMarketoContainer, body){
    modalMarketoContainer.removeClass('hide-embed-modal').addClass('show-embed-modal');
    if(body.hasClass('disable-body-scroll')){
        body.removeClass('disable-body-scroll');
    }else{
        body.addClass('disable-body-scroll');
    }
}

$(document).ready(function () {
    let unsafeHTMLModalButton = $('.embed .unsafehtml-button-wrapper');
    let marketoModalButton = $('.embed .marketo-button-wrapper');
    let modalUnsafeContainer = $('.mchp-unsafe-html-modal-container');
    let modalCloseButton = $('.close-modal');
    let modalForm = $('.mchp-unsafe-html-modal-container form').find("input[type='submit']");
    let body = $('body');

    // Modal will show up if button large component is click
    unsafeHTMLModalButton.on('click', function(){
    	if (this.id) {
		 modalUnsafeContainer = $('#'+this.id+'.mchp-unsafe-html-modal-container');
		}
       if(modalUnsafeContainer.hasClass('hide-embed-modal') ){
           showUnsafeHTMLModalForm(modalUnsafeContainer, body);
       }
    });

    marketoModalButton.on('click', function(e){
        let button = $(e.currentTarget);
        let modalMarketoContainer = button.siblings('.mchp-marketo-modal-container');
        if(modalMarketoContainer.hasClass('hide-embed-modal')){
            showMarketoModalForm(modalMarketoContainer, body);
        }
    });

    // Submit Form and close modal
    modalForm.on('click', function(e){
        modalUnsafeContainer.removeClass('show-embed-modal').addClass('hide-embed-modal');
        body.removeClass('disable-body-scroll');
    })

    // Modal X icon
    modalCloseButton.on('click', function(e){
        let closeButton = $(e.currentTarget);
        let modalMarketoContainer = closeButton.closest('.mchp-marketo-modal-container');
        modalUnsafeContainer.removeClass('show-embed-modal').addClass('hide-embed-modal');
        modalMarketoContainer.removeClass('show-embed-modal').addClass('hide-embed-modal');
        body.removeClass('disable-body-scroll');
    })

    let isMobile = smallScreenMediaQuery.matches;
    let columnCount = isMobile ? 1 : 2;
    try {
    $('select[multiple]').multiselect({
        columns: columnCount,
        search: false,
        selectAll: false
    });
    } catch(err) {
    }

});
$(document).ready(function () {
    const element = $('.cardgrid'),
        cardListContainer = $('.mchp-card-grid-livestream'),
        cardList = element.find(cardListContainer),
        search = $('.mchp-search-div__button'),
        searchInput = $('.mchp-search-div'),
        pageIndex = $('.pagin'),
        pageSize = 9; //Number of cards per page


    // Identify card grid component based on index
    cardList.each(function (j) {
        const cardindex = "cardgrid-" + j;
        element[j].classList.add(cardindex);
        search[j].classList.add(cardindex);
        searchInput[j].classList.add(cardindex);
        pageIndex[j] && pageIndex[j].classList.add(cardindex);
        const liveStreamCards = $('.' + cardindex + " .mchp-livestream-card");
        liveStreamCards.each(function (k) {
            liveStreamCards[k].classList.add(cardindex);
        });
        videoCardGrid(cardindex, j);

    });

    function videoCardGrid(cardindex, j) {
        const mchpLiveStreamCard = $('.mchp-livestream-card.' + cardindex);
        mchpLiveStreamCard.each(function (i) {
            const $this = $(this),
                seriesIndex = i + '-' + cardindex,
                radioSelected = $this.data('radioSelected'),
                dropdownNewest = $this.data('dropdownNewest'),
                dropdownOldest = $this.data('dropdownOldest'),
                vidModal = $this.find('.video-modal'),
                playBtn = $this.find('.mchp-play-button'),
                cardBtn = $this.find('.livestream-button'),
                closeBtn = $this.find('.close'),
                carouselNext = $this.find('.next'),
                carouselPrev = $this.find('.prev'),
                carouselDots = $this.find('.dots'),
                videoSeries = $this.find('.series-video-item');

            vidModal.addClass('video' + seriesIndex);
            playBtn.addClass('playVideo' + seriesIndex);
            cardBtn.addClass('playVideo' + seriesIndex);
            videoSeries.addClass('series' + seriesIndex);
            carouselDots.addClass('dots-' + seriesIndex);
            carouselNext.addClass('next-' + seriesIndex);
            carouselPrev.addClass('prev-' + seriesIndex);


            //Cards shown based on settings by author
            if (radioSelected === 'showNewest') {
                cardListContainer.attr('id', 'showNewest-' + j);
                if (dropdownNewest === 'two') {
                    $this.addClass('show-two-newest');
                } else {
                    $this.addClass('show-three-newest');
                }
            } else if (radioSelected === 'excludeNewest') {
                cardListContainer.attr('id', 'excludeNewest-' + j);
                if (dropdownOldest === 'two') {
                    $this.addClass('hide-two-newest');
                    thisPage(1, 3);

                } else {
                    $this.addClass('hide-three-newest');
                    thisPage(1, 4);
                }
            }

            //Modal content
            var slideIndex = 1;
            var videos = $('.video' + seriesIndex).find('video');
            const playVideo = $('.playVideo' + seriesIndex);

            function whichVideo() {
                videos.each(function (v) {
                    videos.get(v).pause();
                });
            }

            playVideo.on('click', function () {
                $('.video' + seriesIndex).css('display', 'block');
                if ($(this).hasClass('series')) {
                    showSlides(slideIndex, i, cardindex);
                }
            });

            carouselDots.on('click', function () {
                slideIndex = $(this).data('index');
                showSlides(slideIndex, i, cardindex);
                whichVideo();
            });

            carouselNext.on('click', function () {
                const n = 1;
                slideIndex += n;
                showSlides(slideIndex, i, cardindex);
                whichVideo();
            });

            carouselPrev.on('click', function () {
                const n = -1;
                slideIndex += n;
                showSlides(slideIndex, i, cardindex);
                whichVideo();
            });

            // When the user clicks on <span> (x), close the modal
            closeBtn.on('click', function () {
                $('.video' + seriesIndex).css('display', 'none');
                whichVideo();
            });

        });

        videoCardGridPages(mchpLiveStreamCard, cardindex, j);
    }

    function videoCardGridPages(mchpLiveStreamCard, cardindex, j) {

        //Pagination
        const pageCount = mchpLiveStreamCard.length / pageSize; 	//Number of pages per card grid component
        thisPage(1, j);
        const newOnly = document.getElementById('showNewest-' + j);
        if (newOnly) {
            $(".pagin." + cardindex).hide();
        } else {
            for (var z = 0; z < pageCount; z++) {
                $(".pagin." + cardindex).append('<a class= "list-cardgrid-' + j + '" id="' + j + '">' + (z + 1) + '</a> ');
            }
            $(".list-cardgrid-" + j).filter(':first').addClass('current');
        }

        //Searchbar
        const input = $('.' + cardindex + ' .searchbar-videos');
        const clearSearch = $('.' + cardindex + ' .clear-search');

        clearSearch.on("click", function (event) {
            var query = '';
            input.val('');
            searchLivestream(query, cardindex, clearSearch);
            thisPage(1, j);
            clearSearch.css('display', 'none');
        });

        $('.mchp-search-div.' + cardindex).on('submit', function () {
            return false;
        });
        $('.mchp-search-div__button.' + cardindex).on('click', function (e) {
            var query = $.trim(input.val()).toLowerCase();
            searchLivestream(query, cardindex, clearSearch);
        });

        input.keyup(function () {
            var query = $.trim(input.val()).toLowerCase();
            searchLivestream(query, cardindex, clearSearch);

            if ($(this).val().length === 0) {
                clearSearch.css('display', 'none');
                thisPage(1, j);
            }
        });

        $('#searchbar-videos-' + cardindex).keypress(function (e) {
            if (e.which === 13) {
                $('.mchp-search-div__button.' + cardindex).click();
                return false;
            }
        });
    }


    // Default view on livestream cards (First page)
    function thisPage(page, index) {
        const livestreamPage = $(".mchp-livestream-card.cardgrid-" + index);
        livestreamPage.hide();
        livestreamPage.each(function (n) {
            if (n >= pageSize * (page - 1) && n < pageSize * page) {
                $(this).show();
                $(".pagin.cardgrid-" + index).show();
            }
        });
    }

    // Select page number
    $('a').click(function () {
        var anchor = $('.list-cardgrid-' + this.id);
        anchor.removeClass("current");
        $(this).addClass("current");
        thisPage(parseInt($(this).text()), this.id)
    });

    // Search livestream card on specified card grid component
    function searchLivestream(query, cardindex, clearSearch) {
        $('.mchp-livestream-card.' + cardindex).each(function () {
            var $this = $(this);
            if ($this.text().toLowerCase().indexOf(query) === -1) {
                $this.closest('div.mchp-livestream-card.' + cardindex).fadeOut();
            } else {
                $this.closest('div.mchp-livestream-card.' + cardindex).fadeIn();
            }
            $('.pagin.'+cardindex).hide();
        });
        clearSearch.css('display', 'inline-block');

    }

    /******* Webinar Cards *********/
    const PAGE_NUMBER_KEY = 'pageNumber';
    const SEARCH_RESULT_PAGE_NUMBER_KEY = 'searchResultPageNumber';
    const webinarCardContainers = $('.webinar-card-grid');

    webinarCardContainers.each(function (idx, container) {
        const $container = $(container);
        const cards = $container.find('.mchp-webinar-card');
        const modals = $container.find('.webinar-video-modal');
        const paging = $container.find('.paging');
        const perpage = $container.data('perPage');
        const pageCount = Math.ceil(cards.length / perpage);

        const cardGrid = $container.parents('.cardgrid');
        const searchBar = cardGrid.find('.mchp-search-div');
        const emptyResult = cardGrid.find('.mchp-empty-result');
        const searchField = searchBar.find('.searchbar-videos');
        const searchClearButton = searchBar.find('.search-clear');
        let filteredCards = [];

        const setPaging = (count, key) => {
            paging.text('');
            if (count > 1) {
                for (let i = 1; i <= count; i++) {
                    paging.append(`<a id="webinar-page-${i}" data-page-index="${i}" data-page-key="${key}">${i}</a>`);
                }
                paging.show();
            }
            if (count > 0) {
                // set default page to 1
                setPage(1, key);
            }
        }

        const setCardPageNumber = (cIdx, card, key) => {
            const cardNumber = cIdx + 1;
            const pageNumber = Math.ceil(cardNumber / perpage);
            $(card).data(key, pageNumber);
        }

        const setPage = (page, key) => {
            cards.hide();
            cards.removeClass('show');
            cards.each(function (dx, card) {
                const $card = $(card);
                const pageNumber = $card.data(key);
                if (page === pageNumber) {
                    $card.addClass('show');
                }
            });
            paging.find('a').removeClass('current');
            paging.find(`#webinar-page-${page}`).addClass('current');
        }

        const searchWebinars = (term) => {
            filteredCards = [];
            searchClearButton.show();
            cards.removeData(SEARCH_RESULT_PAGE_NUMBER_KEY);

            cards.each(function (dx1, card) {
                const $self = $(card);
                if ($self.text().toLowerCase().indexOf(term) > -1) {
                    filteredCards.push($self);
                }
            });
            if (filteredCards.length > 0) {
                emptyResult.hide();
                $(filteredCards).each(function (fIdx, card) {
                    setCardPageNumber(fIdx, card, SEARCH_RESULT_PAGE_NUMBER_KEY);
                });
                setPaging(Math.ceil(filteredCards.length / perpage), SEARCH_RESULT_PAGE_NUMBER_KEY);
            } else {
                emptyResult.show();
                paging.hide();
            }
            searchClearButton.css('display', 'inline-block');
        }

        const initSearchbar = () => {
            searchBar.removeClass('hidden');
            searchClearButton.hide();

            searchField.on('keyup', function (e) {
                const term = $(this).val().toLowerCase().trim();
                if (term !== '') {
                    cards.hide();
                    cards.removeClass('show');
                    searchWebinars(term);
                    searchClearButton.show();
                } else {
                    emptyResult.hide();
                    setPaging(pageCount, PAGE_NUMBER_KEY);
                }
            });
        }

        cards.each(function (cardIdx, card) {
            setCardPageNumber(cardIdx, card, PAGE_NUMBER_KEY);

            $(card).on('click', '.play-video', function (e) {
                const $self = $(e.delegateTarget);
                const modal = $self.find('.webinar-video-modal');
                modal.show();
                modal.find('video')[0].play();
            });
        });

        modals.each(function (mIdx, modal) {
            $(modal).on('click', '.close', function (e) {
                const $self = $(e.delegateTarget);
                $self.find('video')[0].pause();
                $self.hide();
            });
        });

        paging.on('click', 'a', function () {
            const index = $(this).data('pageIndex');
            const key = $(this).data('pageKey');
            setPage(index, key);
        });

        initSearchbar();
        setPaging(pageCount, PAGE_NUMBER_KEY);
    });
});

//Series Modal Carousel
var slideIndex = 1;

function showSlides(n, index, cardindex) {
    var i;
    var slides = document.getElementsByClassName("series" + index + '-' + cardindex);
    var dots = document.getElementsByClassName("dots-" + index + '-' + cardindex);

    if (n > slides.length) {
        slideIndex = 1
    } else if (n < 1) {
        slideIndex = slides.length
    } else {
        slideIndex = n;
    }

    for (i = 0; i < slides.length; i++) {
        slides[i].style.display = "none";
    }
    for (i = 0; i < dots.length; i++) {
        dots[i].className = dots[i].className.replace(" active", "");
    }

    slides[slideIndex - 1].style.display = "block";
    dots[slideIndex - 1].className += " active";
}
$(document).ready(function () {

    const searchContainer = $('.mchp-tlc-search');
    const perPage = searchContainer.data('perPage');
    const searchInput = searchContainer.find('input');
    const searchButton = searchContainer.find('.mchp-search-div__button');
    const emptyResult = searchContainer.find('.mchp-empty-result');
    const tableDiv = searchContainer.find('.mchp-tlc-table');
    const tableElem = tableDiv.find('table');
    const SEARCH_API = '/bin/mchp/technicallearningcentersearch';
    let resultTable;

    const search = (searchTerm) => {
        tableDiv.hide();

        $.ajax({
            url: SEARCH_API,
            method: 'GET',
            beforeSend: function (request) {
                request.setRequestHeader('Cache-Control', 'no-cache');
            },
            data: {'search': searchTerm}
        }).done(function (result, status) {
            const data = result.data;
            emptyResult.hide();

            if (status === 'success' && data.length > 0) {
                tableDiv.show();
                if (!resultTable) {
                    resultTable = createTable(tableElem, data, perPage);
                } else {
                    resultTable.clear().rows.add(data).draw();
                }
                tableElem.show();

                const pagination = $(tableDiv).find('.dataTables_paginate');
                if (resultTable && resultTable.page.info() && resultTable.page.info().pages === 1) {
                    pagination.hide();
                } else {
                    pagination.show();
                }
            } else if (status === 'success' && data.length === 0) {
                emptyResult.show();
            }
        });
    }

    const createTable = (domTable, data, numRowsPerPage) => {
        // Initialize datatable
        return $(domTable).DataTable({
            data: data,
            columnDefs: [
                {
                    targets: [0],
                    width: '25%',
                    createdCell: function(cell, cellData, rowData, row, col) {
                        const assetPath = rowData[4] === '' ? '' : `#video=${rowData[4]}`
                        $(cell).html(`<a href="${rowData[3]}${assetPath}">${cellData}</a>`);
                    }
                },
                {
                    targets: [2],
                    width: '60%',
                    orderable: false,
                    className: 'dont_sort'
                },
                {
                    targets: [3, 4],
                    visible: false
                }
            ],
            order: [],
            autoWidth: false,
            pageLength: numRowsPerPage,
            pagingType: 'numbers'
        });
    }

    searchInput.on('keypress', function (e) {
        if (e.keyCode === 13) {
            search(searchInput.val());
        }
    });

    searchButton.on('click', function () {
        search(searchInput.val());
    });
});

$(document).ready(() => {
    $('.readmorecontainer-button').click(toggleReadMore);
});

function toggleReadMore(e){
    let button = $(e.currentTarget);
    let container = button.closest('.readmore-container');

    let buttonText = $('.readmorecontainer-buttontext', container);
    let buttonIcon = $('.readmorecontainer-chevron', container);

    let containerPanel = $('.readmorecontainer-panel', container);

    containerPanel.toggleClass('slideup');
    containerPanel.toggleClass('slidedown');

    buttonIcon.toggleClass('fa-angle-down');
    buttonIcon.toggleClass('fa-angle-up');

    let currentButtonText = buttonText.text();

    if (currentButtonText == 'Read More') {
        buttonText.text('Read Less');
    }
    else {
        buttonText.text('Read More');
    }
}

const usercompany = '.user-company';
const usertitle = '.user-title';
const usericon = ".user-icon";
const dropdownsubbox = ".dropdown-account .sub-box";
const userdropdown = '#myDropdown';
const hideContentClass = 'hide-content';
const dropdownAccount = '.dropdown-account';
const myAccountDropdownOptionsClassName = '.loggedin-user';
const navigationMenuContainerClass = '.cmp-mchp-menu-container';
const navigationMenuContainerWrapperClass = 'mchp-menu-wrapper';
const mchpNavigationListClass ='.mchp-navigation_list';
const mchpNavigationListWrapperClass = 'mchp-navigation_list_wrapper';
const mchpHeaderClassName = '.mchp-header';
const mchpHeaderTabletViewSpaceCLassName = 'mchp-header-tablet';
const mchpHeaderMobileViewSpaceCLassName = 'mchp-header-mobile';
$(document).ready(function() {
    let isHoverMenu = false;
    let myMicrochipUserCompany = undefined;
    let myMicrochipUserName = undefined;
    let cookies = {};
    let rootPath = '';
    let ssoRootPath = '';
    let deleteUserUrl = '';
    const userOptOutId = 'opt-out'
    let onMobile = false;
    let isOptOutTriggered = false;
    const myMicrochipEl = 'MyMicrochipMenu';
    const qaAEM = 'aem.microchip.com';
    const stageAEM = 'aem-stage.microchip.com';
    const qaDomain = 'https://chn-vm-tweb/';
    const stageDomain = 'https://stageapps.microchip.com/';
    const prodDomain = 'https://www.microchip.com/';
    const qaSSODomain = 'https://testlogin.microchip.com/';
    const stageSSODomain = 'https://stagelogin.microchip.com/';
    const prodSSODomain = 'https://login.microchip.com/';
    const deleteUserPreferencesUrl= 'mymicrochip/deletepreference.aspx';
    const source = window.location.origin;
    if(window.matchMedia("(max-width: 1199px)").matches) {
        onMobile = true;
    }
    else {
        onMobile = false;
    }

    cookies = getCookies();
    myMicrochipUserCompany = decodeURIComponent(cookies.wwwmicrochipusercompany);
    myMicrochipUserName = decodeURIComponent(cookies.wwwmicrochipusername);;
    setNavigationHeight(isLoggedInUser());
	if(isLoggedInUser()){
	    authenticatedUserIcon();
    	$(headeralertwrapper).removeClass('show');
    } else {
		$(headeralertwrapper).addClass('show');
    }

    $(usericon).click(function () {
        rootPath = getRootPath();
        cookies = getCookies();
        myMicrochipUserCompany = decodeURIComponent(cookies.wwwmicrochipusercompany);
        myMicrochipUserName = decodeURIComponent(cookies.wwwmicrochipusername);
        if(myMicrochipUserName !== 'undefined'){
            $(usertitle).html("Hi, " + myMicrochipUserName);
            $(usertitle).attr("data-tooltip", myMicrochipUserName);
        }
        if(myMicrochipUserCompany !== 'undefined'){
            $(usercompany).text(myMicrochipUserCompany);
        }
        if (isLoggedInUser()) {
            $(".before-login").addClass(hideContentClass);
            $(myAccountDropdownOptionsClassName).addClass('show');
            $(dropdownsubbox).css({ top: '89px' });
        } else {
            $(".before-login").removeClass(hideContentClass);
            $(myAccountDropdownOptionsClassName).removeClass('show');
            $(dropdownsubbox).css({ top: '106px' });
        }
    });

    window.addEventListener("click", function (event) {
        if(onMobile) {
            rootPath = getRootPath();
            cookies = getCookies();
            myMicrochipUserCompany = decodeURIComponent(cookies.wwwmicrochipusercompany);
            myMicrochipUserName = decodeURIComponent(cookies.wwwmicrochipusername);
            if(myMicrochipUserName !== 'undefined'){
                $(usertitle).html("Hi, " + myMicrochipUserName);
            }
            if(myMicrochipUserCompany !== 'undefined'){
                $(usercompany).text(myMicrochipUserCompany);
            }
            if (isLoggedInUser()) {
                addAttributesToElements("before-login", hideContentClass);
                addAttributesToElements(myAccountDropdownOptionsClassName, "show");
                $(dropdownsubbox).css({ top: '89px' });
            } else {
                removeAttributesToElements("before-login", hideContentClass);
                if($(myAccountDropdownOptionsClassName).hasClass('show')) {
                     removeAttributesToElements(myAccountDropdownOptionsClassName, "show");
                  }
                $(dropdownsubbox).css({ top: '106px' });
            }
        }
    });

    window.addEventListener("click", function (e) {
        var container = $(usericon);
        if (onMobile) {
            if (!(container.is(e.target) || container.is(e.target.parentElement))) {
                if ($('.mchp-header #myaccount').find('div.show').length !== 0) {
                    $('.mchp-header #myDropdown')[0].classList.remove('show');
                    $('.mchp-header .user-icon')[0].classList.remove('account-active');
                    $('.mchp-header .mchp-header-search-wrapper')[0].classList.remove('hide-content');
                }
            }
        } else if (!container.is(e.target) && container.has(e.target).length === 0) {
            if ($('#myaccount').find('div.show').length !== 0) {
                $(userdropdown).removeClass('show');
                $(usericon).removeClass('account-active');
                $('.mchp-header-search-wrapper').removeClass(hideContentClass);
            }
        }
        if(window.matchMedia("(max-width: 480px)").matches) {
            if($(userdropdown).hasClass('show')){
                  $(mchpHeaderClassName).removeClass(mchpHeaderTabletViewSpaceCLassName);
                  $(mchpHeaderClassName).removeClass(mchpHeaderMobileViewSpaceCLassName);
            } else {
                  $(mchpHeaderClassName).addClass(mchpHeaderMobileViewSpaceCLassName);
            }

        } else if (window.matchMedia("(min-width:481px) and (max-width: 1199px)").matches) {
            if($(userdropdown).hasClass('show')){
                  $(mchpHeaderClassName).removeClass(mchpHeaderTabletViewSpaceCLassName);
            } else {
                  $(mchpHeaderClassName).addClass(mchpHeaderTabletViewSpaceCLassName);
            }
        } else {
                  $(mchpHeaderClassName).removeClass(mchpHeaderTabletViewSpaceCLassName);
                  $(mchpHeaderClassName).removeClass(mchpHeaderMobileViewSpaceCLassName);
        }
    });

    function addAttributesToElements(domElement, classValue) {
        var domElementClass = "." + domElement;
        for(var i = 0; i < domElement.length; i++){
            if($(domElementClass)[i]?.classList.contains(domElement)){
				$(domElementClass)[i].classList.add(classValue);
            }
        }
    }

    function removeAttributesToElements(domElement, classValue){
        var domElementClass = "." + domElement;
        for(var i = 0; i < domElement.length; i++){
            if($(domElementClass)[i]?.classList.contains(domElement)){
				$(domElementClass)[i].classList.remove(classValue);
            }
        }
    }

	function isLoggedInUser() {
        return ((myMicrochipUserName) != null && myMicrochipUserName !== "undefined" && myMicrochipUserName !== undefined);
    }

    function getRootPath() {
        if(source.includes(qaAEM) === true) {
            rootPath = qaDomain;
            ssoRootPath = qaSSODomain;
        }
        else if(source.includes(stageAEM) === true) {
            rootPath = stageDomain;
            ssoRootPath = stageSSODomain;
        }
        else {
            rootPath = prodDomain;
            ssoRootPath = prodSSODomain;
        }
        return rootPath;
    }
    function getCookies() {
        cookies = {};
        document.cookie.split(';').forEach((cookie) => {
            const [key, value] = cookie.split('=');
            cookies[key.trim()] = value;
        });
        return cookies;
    }
    function flipMyMicrochipMenu(event) {
        if($("#"+myMicrochipEl).hasClass("HideMyMicrochipMenu")) {
            showMyMicrochipMenu(event);
        }
        else {
            hideMyMicrochipMenu();
        }
    }
    function showMyMicrochipMenu(e) {
        rootPath = getRootPath();
        cookies = getCookies();
        myMicrochipUserCompany = decodeURIComponent(cookies.wwwmicrochipusercompany);
        myMicrochipUserName = decodeURIComponent(cookies.wwwmicrochipusername);
        if(myMicrochipUserName !== 'undefined'){
            $(usertitle).html("Hi, " + myMicrochipUserName);
        }
        if(myMicrochipUserCompany !== 'undefined'){
            $(usercompany).text(myMicrochipUserCompany);
        }
        if (isLoggedInUser()) {
            rootPath = getRootPath();
            $("#MyMicrochipMenu .cmp-text a:contains('Dashboard')").attr('style', onMobile === true ? 'display:block' : 'display:none');
            $("#MyMicrochipMenu .cmp-text a:contains('Saved Products')").attr('href', ssoRootPath);
            $("#MyMicrochipMenu .cmp-text a:contains('Saved Documents')").attr('href', rootPath);
            $("#MyMicrochipMenu .cmp-text a:contains('Libraries & Firmware')").attr('href', rootPath);
            $("#MyMicrochipMenu .cmp-text a:contains('Reliability Report')").attr('href', rootPath);
            $("#MyMicrochipMenu .cmp-text a:contains('Account Settings')").attr('href',ssoRootPath);
            $("#myMchpSignOutLink").click(function(delEvent) {
                signOut(delEvent);
            });
            // Show menu
            $("#"+myMicrochipEl).removeClass('HideMyMicrochipMenu');
            isHoverMenu = true;
        }
    }
    function hideMyMicrochipMenu() {
        isHoverMenu = false;
        $("#"+myMicrochipEl).addClass('HideMyMicrochipMenu');
    }
    function setMyMicrochipMenuHover() {
        if (onMobile === false) {
            isHoverMenu = true;
            showMyMicrochipMenu();
        }
    }
    function setMyMicrochipMenuUnhover() {
        if (onMobile === false) {
            isHoverMenu = false;
            setTimeout(function() {
                if (isHoverMenu === false) {
                    hideMyMicrochipMenu();
                }
            }, 5000);
        }
    }
    function deleteMyMicrochipAccount(event) {
        if(isOptOutTriggered === false) {
            event.preventDefault();
            event.stopPropagation();
            const confirmDelete = confirm("You will no longer receive myMicrochip notifications. Click OK to Confirm or Cancel to keep your myMicrochip notifications.");
            if (confirmDelete === true && myMicrochipUser !== null) {
                isOptOutTriggered = true;
                if (source.includes(qaAEM) === true) {
                    deleteUserUrl = qaDomain + deleteUserPreferencesUrl;
                }
                else if(source.includes(stageAEM) === true) {
                    deleteUserUrl = stageDomain + deleteUserPreferencesUrl;
                }
                else {
                    deleteUserUrl = prodDomain + deleteUserPreferencesUrl;
                }
                window.localStorage.removeItem('AccessToken');
                window.localStorage.removeItem('IdToken');
                window.location.href = deleteUserUrl;
            }
        }
    }
    function signOut(event) {
        event.preventDefault();
        event.stopPropagation();
        let signOutUrl = '';
        const signOutUrlPrefix = 'mymicrochip/#/logout';
        if (source.includes(qaAEM) === true) {
            signOutUrl = qaDomain + signOutUrlPrefix;
        }
        else if (source.includes(stageAEM) === true) {
            signOutUrl = stageDomain + signOutUrlPrefix;
        }
        else {
            signOutUrl = prodDomain + signOutUrlPrefix;
        }
        window.localStorage.removeItem('AccessToken');
        window.localStorage.removeItem('IdToken');
        window.location.href = signOutUrl;
    }
    function authenticatedUserIcon() {
       $('.user-icon i').addClass('bolder');
    }

	window.addEventListener("click", function (event) {
		let container = $("#signin-button");
        if (onMobile) {
			container = $(".mchp-header #signin-button");
        }
        if(container.is(event.target)){
            location.href = container.attr('data-url');
        }
	});
	   const optOutEnabled = $(dropdownAccount).data('optoutenabled');
       const optOutLinkText = $(dropdownAccount).data('optoutlinktext');
       const optOutLink = $("<li>").append($("<a>", { class: "item cmp-optout__link", id: userOptOutId,aria_label: optOutLinkText, x_cq_linkchecker:"skip" }).text(optOutLinkText));
       if(optOutEnabled !== undefined) {
          $(myAccountDropdownOptionsClassName).children('li:last-child').before(optOutLink);
        }

        $('#'+userOptOutId).on( "click", function(event) {
               event.preventDefault();
               event.stopPropagation();
               const loginCookieValue =cookies.asdfdiuglkjhrsu;
               const confirmDelete = confirm("You will no longer receive myMicrochip notifications. Click OK to Confirm or Cancel to keep your myMicrochip notifications.");
               if (isLoggedInUser() && loginCookieValue && confirmDelete) {
                   const cookiesTrash = ["wwwmicrochipuser","wwwmicrochipusername","asdfdiuglkjhrsu"];
                     cookiesTrash.forEach((name) => {
                       document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;';
                  });
                const deletePreferenceUrl = $(dropdownAccount).data('optoutdeletepreferenceurl');
                window.location.href = deletePreferenceUrl;
                }
       });

        function setNavigationHeight(isLoggedIn) {
        	    if (isLoggedIn) {
        	     $(mchpNavigationListClass).addClass(mchpNavigationListWrapperClass);
        	    } else {
        	    $(navigationMenuContainerClass).addClass(navigationMenuContainerWrapperClass);
        	       }
           }

});

const containerSelector = '.dropdown-text-container';
$(document).ready(function () {
    $('body').click(closeAllMenus);
    $('.select-text').click(openMenu);
    $('.cmp-tabs__tab').click(setActiveText);

    const containers = $(containerSelector);
    $.each(containers, (i) => {
        const container = containers[i];
        const activeTab = $('.cmp-tabs__tab--active a', container);
        const activeText = activeTab.text();
        const selectedLabel = $('.selected-option' , container);

        selectedLabel.text(activeText);
    });
});


function openMenu(e) {
    e.stopPropagation();
    const text = e.currentTarget;
    const container = text.closest(containerSelector)
    const dropdownMenu = $('.dropdown-list', container);

    dropdownMenu.toggleClass('hide-content');
}

function closeAllMenus() {
    const dropdownMenu = $('.dropdown-list');
    dropdownMenu.addClass('hide-content');
}

function setActiveText(e) {
    const activeTab = $(e.currentTarget).children('a');
    const activeText = activeTab.text();

    const container = activeTab.closest(containerSelector);
    const selectedLabel = $('.selected-option', container);

    selectedLabel.text(activeText);
}
const applicationExampleString = "**For development reference only. not a product for sale**";
$(document).ready(function () {
    if($('.devtoolscategory').length > 0 ) {
        var fragmentPath;
        var categoryName;
        var defaultCategory;
        const leftNavAnchor = '.devtoolscategory nav a';
        const searchBarUrl = document.getElementsByClassName('mchp-direct-url-base');
        const baseUrl = (searchBarUrl && searchBarUrl.length > 0) ? searchBarUrl[0].innerText : "";
        function urlParam (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.search);
            return (results !== null) ? results[1] : "";
        }
        categoryName = urlParam('category');
        var subCategoryName = urlParam('subcategory');
        if(categoryName) {
            fragmentPath = '/content/dam/mchp/content-fragments/dev-tools/categories/' + categoryName;
        }
        if(subCategoryName && categoryName){
            fragmentPath = fragmentPath + '/' + subCategoryName;
        }
        if (fragmentPath) {
            defaultCategory = fragmentPath.toLowerCase();
         } else {
            defaultCategory = $('.devtoolscategory-data').data('default-category');
        }
        const cardList = $('.card-view-list');

        var coupons = {};
        $.ajax({
            url: baseUrl + "/api/Product/ProductInfo?CPN=DevToolDeals",
            type: 'GET',
            dataType: 'json',
            xhrFields: {
		       withCredentials: true
		    },
            success: function(resp) {
                if(resp.length){
                    var products = resp[0].products;
                    for(var i = 0; i < products.length; i++){
                        var couponObj = {};
                        var product = products[i];
                        coupons[product.CPN] = product.couponCodeDetails;
                    }
                }
              renderDevtoolsByCategory();
            },
            error: function(xhr){
                console.log(xhr);
                renderDevtoolsByCategory();
            }
        })

        function renderDevtoolsByCategory(){
            getDevToolsByCategory(defaultCategory);
            $('#treenavigation a').click(function(event){
                if(!$(this).hasClass("disabled")) {
                    event.preventDefault();
                    cardList.children().remove();
                    $(".selected-category").remove();
                    var category = $(this).data('category');
                    getDevToolsByCategory(category);
                }
            });

        }

        function getDevToolsByCategory(category) {
            var selectedTitle = $("[data-category='"+category+"']").attr("title");
            $(leftNavAnchor).addClass('disabled');
            const count = 0;
            if(typeof microchipDIRECT !== 'undefined'){
                microchipDIRECT.URL = baseUrl;
            }
            $.ajax({
                url: "/bin/mchp/devtoolsbycategory.json",
                type:'GET',
                data: {category:category, producttype: "regular"},
                dataType: 'json',
                success: function(response) {
                    if (response.length) {
                        $("<h1 class=selected-category>"+selectedTitle+"</h1>").prependTo($(".card-view-list"));
                        $.each(response, function(key, value) {
                            var $card = $('.card-view.template').clone();
                            $card.removeClass('template');
                            $card.find('.card-title').html(value.title);
                            $card.find('.card-part-number').text(value.partNumber);
                            $card.find('.dynamic-devtool-detail-path')
                            .attr('href', `/en-us/development-tool/${value.name}`);
                            $card.find('.card-summary').html(value.summary);
                            if(value.webPurchaseable === "true" && value.applicationExample === "false" && value.marketoId === ""){
                                $card.find('.mchp-button-wrapper').removeClass('hide-content');
                                $card.find('.qunty-container').removeClass('hide-content');
                                $card.find('a').attr('partnumber', value.partNumber);
                                $card.find('a').attr('aria-label', "Buy "+value.partNumber);
                                $card.find('.addtocart').attr('onkeypress', "addToCartMCHPDevtoolCategory($(this),'" + value.partNumber + "'); getCartCountAndTotal();");
                                $card.find('.addtocart').attr('onclick', "addToCartMCHPDevtoolCategory($(this),'" + value.partNumber + "'); getCartCountAndTotal();");
                            }
                            if(value.applicationExample === "true"){
                                $card.find('.is-application-example').text(applicationExampleString);
                            }

                            if (value.images.length) {
                                const image = value.images[0];
                                $card.find('.card-image').attr('src', image);
                                $card.find('.card-image').attr('alt','Product Image of '+value.partNumber);
                            }

                            if (value.partNumber in coupons){
                                if (coupons[value.partNumber][0].CouponCode) {
                                    $card.find('.coupon-code-label').text(coupons[value.partNumber][0].lableCouponcode + ' - ');
                                    $card.find('.coupon-code-description').text(coupons[value.partNumber][0].CouponDesc + ':');
                                    $card.find('.coupon-code').text(coupons[value.partNumber][0].CouponCode);
                                    $card.find('.expire-date').text(coupons[value.partNumber][0].expireDate);
                                }
                            }
                            cardList.append($card);
                        });
                        initReadMoreButtons();

                    } else {
                        handleNoResult();
                    }
                    $(leftNavAnchor).removeClass('disabled');

                    $('.mchp-tree-dropdown_text').removeClass('current-page');

                    const allDropdowns = $('.mchp-tree-dropdown_link, .mchp-tree-nav_link');
                    allDropdowns.each(function(index) {
                        const link = $(allDropdowns[index]);
                        if (link.attr('data-category') === category) {
                            link.find('.mchp-tree-dropdown_text').addClass('current-page');
                        }
                    });
                },
                error: function(xhr) {
                    handleNoResult();
                    console.log("error");
                    $(leftNavAnchor).removeClass('disabled');
                }
            });
        }

        function handleNoResult(selectedTitle) {
            var $card = $('.card-view-no-result.template').clone();
            $card.removeClass('template');
            cardList.append($card);
        }
    }
});
$(document).ready(function() {
    var base64logo = [];
    var base64sign = [];
    var classPartnumber = ".dynamic-subtitle";
    var isDevtoolPresent = ($(classPartnumber)[0] !== undefined) &&
        $(classPartnumber)[0].innerText.includes("Part Number");
    var devtoolName = "";
    if (isDevtoolPresent) {
        devtoolName = $(classPartnumber)[0].innerText.split(":")[1].trim();
    } else {
        devtoolName = '';
    }
    var devtoolPath = $("#devtoolpath").data("devtool-path");
    var templateTitle = [];
    var templatePath = [];
    var template = {};
    var devtoolArray = "devtool-data";
    var emptyString = "";
    var firstNonStaticFreeText = "[Non-Static Drop-Down List or Non-Static Free-Text Field Need to added comments like “2(b)(3)” or “4(c)-III”].";
    var secondNonStaticFreeText = "[Non-Static Table Drop-Down List or Non-Static Free-Text Field Need to added comments]";

    var getdescription = (description, dynamicTableFields, templateData) => {
        var substancePresent = templateData["substance-present"];
        var casNumber = templateData["cas-number"];
        var techStandards = templateData["standards"];
        var techspecification = templateData["techspecification"];
        var descObj = $(description);
        var descriptiontext = emptyString;
        var deschtml;

        descObj.each(function(index) {
            var i;
            if (descObj[index].tagName === "TABLE") {
                if (
                    descObj[index].tagName === "TABLE" &&
                    descObj[index].rows[0].innerText
                        .toUpperCase()
                        .includes(dynamicTableFields[0].toUpperCase())
                ) {
                    if (dynamicTableFields[0].includes("Substance Present")) {
                        if (substancePresent.length <= descObj[index].rows.length - 1) {
                            for (i = 1; i <= substancePresent.length; i++) {
                                descObj[index].rows[i].cells[0].innerText = substancePresent[i - 1];
                                descObj[index].rows[i].cells[1].innerText = casNumber[i - 1];
                            }
                            var count = descObj[index].rows.length;
                            for (var j = count - 1; j >= i; j--) {
                                descObj[index].rows[j].remove();
                            }
                        } else {
                            for (i = 1; i < descObj[index].rows.length; i++) {
                                descObj[index].rows[i].cells[0].innerText = substancePresent[i - 1];
                                descObj[index].rows[i].cells[1].innerText = casNumber[i - 1];

                            }

                            for (
                                i = descObj[index].rows.length; i <= substancePresent.length; i++
                            ) {
                                descObj[index].children[0].appendChild(
                                    descObj[index].rows[i - 1].cloneNode(true)
                                );
                                descObj[index].rows[i].cells[0].innerText = substancePresent[i];
                                descObj[index].rows[i].cells[1].innerText = casNumber[i];
                            }
                        }
                    } else {
                        if (techStandards.length > 0 && techspecification.length > 0) {
                            if (techStandards.length < descObj[index].rows.length) {
                                for (i = 0; i < techStandards.length; i++) {
                                    if (descObj[index].rows[i] !== undefined) {
                                        descObj[index].rows[i].cells[0].innerText = techStandards[i];
                                        descObj[index].rows[i].cells[1].innerText = techspecification[i];
                                    }
                                }
                                var desCount = descObj[index].rows.length;
                                for (var k = desCount - 1; k >= i; k--) {
                                    descObj[index].rows[k].remove();
                                }
                            } else {
                                for (i = 0; i < descObj[index].rows.length; i++) {
                                    descObj[index].rows[i].cells[0].innerText = techStandards[i];
                                    descObj[index].rows[i].cells[1].innerText = techspecification[i];
                                }
                                for (i = descObj[index].rows.length; i < techStandards.length; i++) {
                                    descObj[index].children[0].appendChild(descObj[index].rows[i - 1].cloneNode(true));
                                    descObj[index].rows[i].cells[0].innerText = techStandards[i];
                                    descObj[index].rows[i].cells[1].innerText = techspecification[i];
                                }
                            }
                        } else {
                            for (i = 0; i < descObj[index].rows.length; i++) {
                                if (descObj[index].rows[i] !== undefined) {
                                    descObj[index].rows[0].cells[0].innerText = "Technical Standards";
                                    descObj[index].rows[0].cells[1].innerText = "Technical Specification";
                                    descObj[index].rows[descObj[index].rows.length-1].remove();
                                }
                            }
                        }
                    }


                } else if (descObj[index].tagName === "TABLE" && descObj[index].rows[2]) {

                    if (
                        descObj[index].rows[2].innerText
                            .toUpperCase()
                            .includes(dynamicTableFields[0].toUpperCase())
                    ) {
                        for (i = 0; i < templateData.Hg.length; i++) {
                            descObj[index].rows[i + 3].cells[1].innerText = templateData.pb[i];
                            descObj[index].rows[i + 3].cells[2].innerText = templateData.Hg[i];
                            descObj[index].rows[i + 3].cells[3].innerText = templateData.cd[i];
                            descObj[index].rows[i + 3].cells[4].innerText =
                                templateData.cr6p[i];
                            descObj[index].rows[i + 3].cells[5].innerText = templateData.pbb[i];
                            descObj[index].rows[i + 3].cells[6].innerText =
                                templateData.pdbe[i];
                        }
                    }
                }
        }
        deschtml =
            descObj[index].outerHTML !== undefined ?
                descObj[index].outerHTML :
                "\n";
        descriptiontext = descriptiontext + deschtml;
    });
    return descriptiontext;
};


function getFormattedDate(date) {
    var date1 = new Date(date);
    var year = date1.getFullYear();
    var month = (1 + date1.getMonth()).toString();
    month = month.length > 1 ? month : "0" + month;
    var day = date1.getDate().toString();
    day = day.length > 1 ? day : "0" + day;
    return month + "-" + day + "-" + year;
}

    var getDocTextReplace = (docText,partnumberText,prodNameText,DateText,parsedJson,devtooldata,revisionText) => {
        var space = " ";
        if (docText.includes(partnumberText)) {
            docText = docText.replace(
                partnumberText,
                partnumberText + space + devtooldata.partnumber
            );
        }

        if (docText.includes(revisionText)) {
            docText = docText.replace(
                revisionText,
                revisionText + space + parsedJson.revision
            );
        }
        if (docText.includes(prodNameText)) {
            docText = docText.replace(
                prodNameText,
                prodNameText + space + devtooldata.productName
            );
        }
        if (docText.includes(DateText) || docText.includes("Effective:")) {
            docText = docText.replace(
                docText,
                docText +
                space +
                (parsedJson.effectiveDate === emptyString ?
                    emptyString :
                    getFormattedDate(parsedJson.effectiveDate))
            );
        }
        return docText;
    }

    var createconfDocument = (parsedJson, logo, sign) => {
    var devtooldata = [];
    for (var parsedDevtoolArray of parsedJson[devtoolArray]) {
        if (devtoolName === parsedDevtoolArray.partNumber) {
            devtooldata.partnumber = parsedDevtoolArray.partNumber;
            devtooldata.productName = parsedDevtoolArray.title;
        }
    }
    var signdesig =
        parsedJson["signature-designation"] !== emptyString ?
            parsedJson["signature-designation"] :
            parsedJson.templateData.signatureDesignation;

    var description = getdescription(
        parsedJson.templateData.description,
        parsedJson.templateData.dynamicTableFields,
        parsedJson
    );
    var footerHeight = parsedJson.templateData.footerText === "" ? 100 : 150;
    var docType = "";
    if (template["title"].toUpperCase().includes("EU")) {
        docType = "EU";
    } else {
        docType = template["title"].toUpperCase().includes("China".toUpperCase()) ?
            "China" :
            "DoC";
    }

    pdfMake.fonts = {
        Roboto: {
            normal: "Roboto-Regular.ttf",
            bold: "Roboto-Medium.ttf",
            italics: "Roboto-Italic.ttf",
        },

    };
    var partnumberText = "Product Number:";
    var prodNameText = "Product Name:";
    var DateText = "Date:";
    var revisionText = "Revision:";
    var tableFormatedSignature = parsedJson.templateData.tableFormattedSignature

    var alternateDochtml = [
        htmlToPdfmake(parsedJson.templateData.title),
        htmlToPdfmake(description, {
            replaceText: function(text, nodes) {
               text =  getDocTextReplace(text,partnumberText,prodNameText,DateText,parsedJson,devtooldata,revisionText);
                var firstnsFreeText = parsedJson.firstNSFreeText;
                var secondnsFreeText = parsedJson.secondNSFreeText;
                    if (text.includes(firstNonStaticFreeText)) {
                        text = text.replace(firstNonStaticFreeText, firstnsFreeText);

                    }
                    if (text.includes(secondNonStaticFreeText)) {
                        text = text.replace(secondNonStaticFreeText, secondnsFreeText);
                    }

                return text;
            },
        }),
        {
            style: 'signatureTable',
            table: {
                body: [
                    ['Name', parsedJson.name,],
                    ['Address:',parsedJson.address]
                ]
            }
        },

        {
            style: 'signatureTable',
            table: {
                body: [
                    [parsedJson.placeOfIssue, getFormattedDate(parsedJson.dateOfIssue),  {
                        image: sign,
                        width: 150,
                    },],
                    ['Place of issue', 	'Date of issue','Signature']
                ]
            }
        },

        htmlToPdfmake(parsedJson.templateData.docNote),

    ]
    var dochtml = [
        htmlToPdfmake(parsedJson.templateData.title),
        htmlToPdfmake(description, {
            replaceText: function(text, nodes) {
                text =  getDocTextReplace(text,partnumberText,prodNameText,DateText,parsedJson,devtooldata);
                if (text.includes("[x]")) {
                    text = text.replace("[x]", parsedJson["substance-present"].length);
                }
                return text;
            },
        }),
        htmlToPdfmake(parsedJson.templateData.PandN, {
            replaceText: function(text, nodes) {
                if (text.includes("[Part Number]")) {
                    text = text.replace("[Part Number]", devtooldata.partnumber);
                }
                if (text.includes("[Product Name]")) {
                    text = text.replace("[Product Name]", devtooldata.productName);
                }
                if (text.includes("[Rev]")) {
                    text = text.replace("[Rev]", parsedJson.revision);
                }
                if (text.includes("[Date]")) {
                    text = text.replace(
                        "[Date]",
                        getFormattedDate(parsedJson.effectiveDate)
                    );
                }
                return text;
            },
        }),
        {
            image: sign,
            width: 150,
        },

        htmlToPdfmake(signdesig, {
            replaceText: function(text, nodes) {
                if (text.includes("[Manager]")) {
                    text = text.replace("[Manager]", parsedJson.manager);
                }
                if (text.includes("[Title]")) {
                    text = text.replace("[Title]", parsedJson.titleOfManager);
                }
                if (text.includes("[Group Name]")) {
                    text = text.replace("[Group Name]", parsedJson.groupName);
                }
                return text;
            },
        }),
    ];
    var putContent =
        tableFormatedSignature === "true" ?
            alternateDochtml : dochtml;

    var dd = {
        pageMargins: [70, 120, 70, footerHeight],
        header: {
            image: logo,
            alignment: "center",
            width: 110,
            margin: [0, 50, 0, 0],
        },
        footer: function(pageNo, totalPages) {
            if (pageNo === 1) {
                return [{
                    columns: [htmlToPdfmake(parsedJson.templateData.footerText)],
                    margin: [70, 0, 70, 70],
                    fontSize: 8,
                }, ];
            } else {
                return [{ text: emptyString }];
            }
        },
        content: putContent,
        defaultStyle: {
            font: "Roboto",
            fontSize: 11,
        },
        styles: {
            subheader: {
                fontSize: 11,
                bold: true,
                margin: [0, 5, 0, 5]
            },
            signatureTable: {
                margin: [0, 5, 0, 10]
            },
        },
    };
    pdfMake
        .createPdf(dd, null, pdfMake.fonts, pdfMake.vfs)
        .download(devtooldata.partnumber + "_" + docType + ".pdf");
};

var getbase64Images = (parsedJson) => {
    base64logo = [];
    base64sign = [];
    var isCreated = false;
    var sign;
    sign =
        parsedJson.signature === emptyString ?
            parsedJson.templateData.signature :
            parsedJson.signature;
    var xhr = new XMLHttpRequest();
    xhr.open("GET", parsedJson.templateData.organizationLogo, true);
    xhr.responseType = "blob";
    xhr.onload = function(e) {
        var reader = new FileReader();
        reader.onload = function(event) {
            var res = event.target.result;
            base64logo.push(res);
        };
        var file = this.response;
        reader.readAsDataURL(file);
    };
    xhr.send();
    var xhr1 = new XMLHttpRequest();
    xhr1.open("GET", sign, true);
    xhr1.responseType = "blob";
    xhr1.onload = function(e) {
        var reader1 = new FileReader();
        reader1.onload = function(event) {
            var res = event.target.result;
            base64sign.push(res);

            if (base64logo.length === base64sign.length && isCreated === false) {
                isCreated = true;
                createconfDocument(parsedJson, base64logo[0], base64sign[0]);
            }
        };
        var file = this.response;
        reader1.readAsDataURL(file);
    };
    xhr1.send();
};
var addTable = (DocumentNameArray, downloadlinkArray) => {
    if (DocumentNameArray.length > 0) {
        $(".conformitytable").attr("style", "display:block");
    }
    var table = "";
    table =
        '<div id="DataTables_Table_1_wrapper" class="dataTables_wrapper no-footer">' +
        '<div id="DataTables_Table_1_filter" class="dataTables_filter"><label>Search:<input type="search" ' +
        'class="" placeholder="" aria-controls="DataTables_Table_1"></label></div>    ' +
        '<table class="DocumentTable--table  dataTable no-footer"> ' +
        '<thead><tr><th class = "conformitytitle" style = "width: 80%;">Title' +
        '</th><th class = "conformity-download" style = "width: 20%;">' +
        '</th> </tr> </thead><tbody  class="striped-bg">';
    var eachRow = emptyString;
    for (var i = 0; i < DocumentNameArray.length; i++) {


        eachRow =
            eachRow +
            '<tr><td class = "title-column">' +
            DocumentNameArray[i] +
            " </td>" +
            '<td><div class = "download-conformity"><a href = "' +
            downloadlinkArray[i] +
             '" target = "_blank" download><em class="far fa-download" aria-hidden="true"></em> Download </a></td></tr> ';
    }
    table = table + eachRow + "</tbody> </table></div></div>";
    $("#conformity-table").append(table);
};

var createDocument = (templatejson) => {
    getbase64Images(templatejson);
};

if ($(".conformitydocs-div")[0] !== undefined) {
    $.getJSON(
        "/bin/devToolConformity.json?devTool=" + devtoolName + "&path=" + devtoolPath,
        function(data, status) {
            if (status === "success") {
                var conformitydata = data;
                if (!$.isEmptyObject(conformitydata)) {
                    for (var confAssociations of conformitydata.associations) {
                        for (var confDevtoolArray of confAssociations[devtoolArray]) {
                            if (devtoolName === confDevtoolArray.partNumber) {
                                if (confAssociations.conformityDocument === undefined && confAssociations.templatePath === undefined) {
                                    continue;
                                } else if (confAssociations.conformityDocument === undefined) {
                                    templatePath.push(confAssociations.templatePath);
                                    templateTitle.push(confAssociations.templateTitle + " [ " + devtoolName + " ]");
                                } else {
                                    templatePath.push(confAssociations.conformityDocument[0].name);
                                    if (confAssociations.conformityDocument[0].title === "") {
                                        templateTitle.push(
                                            (confAssociations.conformityDocument[0].name.split('/')[confAssociations.conformityDocument[0].name.split('/').length - 1])
                                                .split('.')[0] + " [ " + devtoolName + " ]");
                                    } else { templateTitle.push(confAssociations.conformityDocument[0].title); }
                                }
                                template[confAssociations.templatePath] = confAssociations;
                            }
                        }
                    }
                    addTable(templateTitle, templatePath);
                }
            }
        }
    );
    // if (template[confAssociations.templatePath])
    $("body").delegate(".download-conformity", "click", function(event) {
        if (template[event.target.getAttribute("href")] !== undefined &&
            template[event.target.getAttribute("href")].conformityDocument !== null) {
            event.preventDefault();
            template["title"] =
                event.target.parentElement.offsetParent.previousElementSibling.innerText;
            createDocument(template[event.target.getAttribute("href")]);
        }
    });
}
});
$(document).ready(function () {
    if($('.thirdpartydevtoolscategory').length > 0 ) {
        const vendorDetailPage = '.vendor-detail-page';
        const productName = '.product-name';
        const leftNavAnchor = '.thirdpartydevtoolscategory nav a';
        const hideContent = 'hide-content';
        const vendorNameLink = '.vendor-name-link';
        const nonLinkVendorName = '.non-link-vendor-name';
        const searchBarUrl = document.getElementsByClassName('mchp-direct-url-base');
        const baseUrl = (searchBarUrl && searchBarUrl.length > 0) ? searchBarUrl[0].innerText : "";
        var defaultCategory;
        var fragmentPath;
        var vendorName;
        var categoryName;
        function urlParam (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.search);
            return (results !== null) ? results[1] : "";
        }
        vendorName = urlParam('vendor');
        if(vendorName) {
            fragmentPath = '/content/dam/mchp/content-fragments/dev-tools/third-party-vendors/thirdpartyvendors/' + vendorName;
        }
        categoryName = urlParam('category');
        if(categoryName) {
            fragmentPath = '/content/dam/mchp/content-fragments/dev-tools/third-party-categories/thirdpartytools/' + categoryName;
        }
        if (fragmentPath) {
            defaultCategory = fragmentPath;
        } else {
            defaultCategory = $('.devtoolscategory-data').data('default-category');
        }

        var searchType = $('.devtoolscategory-data').data('search-type');
        const cardList = $('.card-view-list');
        const premierVendorCardListLast = '.premier-vendor .card-view:last';
        const nonPremierVendorCardListLast = '.non-premier-vendor .card-view:last';
        const premierVendorProductTableHeaderLast = '.premier-vendor .table-heading:last';
        const nonPremierVendorProductTableHeaderLast = '.non-premier-vendor .table-heading:last';
        const premierVendor = '.premier-vendor';
        const nonPremierVendor = '.non-premier-vendor';
        getThirdPartyDevToolsByCategory(defaultCategory);

        $('.thirdpartydevtoolscategory #treenavigation a').click(function(event){
            if(!$(this).hasClass('disabled') && !$(this).hasClass('mchp-tree-nav_link')) {
                event.preventDefault();
                cardList.find(premierVendor).addClass(hideContent).children('.card-view').remove();
                cardList.find(premierVendor).children('.vendor-info').remove();
                cardList.find(premierVendor).children('.dev-tools-product-table').remove();
                cardList.find('.card-view-no-result').remove();
                cardList.find(nonPremierVendor).addClass(hideContent).children('.card-view').remove();
                cardList.find(nonPremierVendor).children('.vendor-info').remove();
                cardList.find(nonPremierVendor).children('.dev-tools-product-table').remove();
                var category = $(this).data('category');
                getThirdPartyDevToolsByCategory(category);
            }
        });

        function getThirdPartyDevToolsByCategory(category) {
            $(leftNavAnchor).addClass('disabled');
            $.ajax({
                url: "/bin/mchp/devtoolsbycategory.json",
                type:'GET',
                data: {category:category, producttype: "thirdparty", searchtype: searchType},
                dataType: 'json',
                success: function(response) {
                    if (response.length > 0) {
                        $.each(response, function(key, value) {
                            var $card = $('.card-view.template').clone();
                            $card.removeClass('template');
                            $card.find('.vendor-name').text(value.companyName);
                            if(value.fragmentPath){
                                var fragmentPieces = value.fragmentPath.split('/');
                                var companyName = fragmentPieces[fragmentPieces.length - 1];
                                if (value.isPremier === "true") {
                                    var link = $(vendorNameLink).attr('href') + '?vendor=' + companyName;
                                    $card.find(vendorNameLink).attr('href', link);
                                    $card.find(nonLinkVendorName).addClass(hideContent);
                                } else {
                                    $card.find(vendorNameLink).addClass(hideContent);
                                    $card.find(nonLinkVendorName).text(value.companyName);
                                    $card.find(nonLinkVendorName).removeClass(hideContent);
                                }
                            }

                            var html = $.parseHTML(value.descriptionText);
                            $card.find('.vendor-desc').html(html);
                            $card.find('.vendor-city').html(value.city);
                            if (value.state) {
                                $card.find('.vendor-state').html(`${value.state}, `);
                            }
                            $card.find('.vendor-country').text(value.country);
                            $card.find('.vendor-website').attr('href', `${value.website}`);
                            $card.find('.vendor-image').attr('src', value.image);
                            if (value.phone) {
                                $card.find('.vendor-phone').html(value.phone);
                            } else {
                                $card.find('.show-phone').addClass(hideContent);
                            }

                            if (value.fax) {
                                $card.find('.vendor-fax').html(value.fax);
                            } else {
                                $card.find('.show-fax').addClass(hideContent);
                            }

                            var $vendorInfo = $('.vendor-info.template').clone();
                            var $tableHeading = $('.dev-tools-product-table.template').clone();
                            $vendorInfo.removeClass('template');
                            $vendorInfo.find('.company-name').text(value.companyName);
                            $tableHeading.removeClass('template');

                            if (isPremier(value)) {
                                cardList.find('.premier-vendor').removeClass(hideContent).append($card);
                                if ($card.find(vendorDetailPage)) {
                                    var fragmentPathVal = value.fragmentPath;
                                    if (fragmentPathVal?.split('third-party-vendors/thirdpartyvendors/')) {
                                        if(value.showBrowseProducts === "true"){
                                            var vendor = fragmentPathVal.split('third-party-vendors/thirdpartyvendors/')[1];
                                            var vPath = $card.find(vendorDetailPage).attr('href') + '?vendor=' + vendor;
                                            $card.find(vendorDetailPage).attr('href', vPath);
			                            } else{
                                               $card.find(vendorDetailPage).remove();
                                        }
                                    }
                                }
                            } else if (isRegular(value)) {
                                $card.find(vendorDetailPage).remove();
                                cardList.find('.non-premier-vendor').removeClass(hideContent).append($card);
                            }
                            $.each(value.productList, function(pKey, pValue) {
                                var $product = $('.product.template').clone();
                                $product.removeClass('template');

                                $.ajax({
                                    url: baseUrl + "/api/Product/ProductInfo?CPN=" + pValue.partNumber,
                                    type: 'GET',
                                    dataType: 'json',
                                    success: function(resp) {
                                        if (resp.length > 0) {
                                            var products = resp[0].products;
                                            $product.find('.product-list-price').html(products[0].ListPrice);
                                        }
                                    }
                                });

                                if(pValue.webPurchaseable === "true" && pValue.applicationExample === "false"){
                                      $product.find('.mchp-button-wrapper').removeClass('hide-content');
                                      $product.find('.addtocart.mchp-button').attr('onclick', 'microchipDIRECT.addToCart("'+pValue.partNumber+'",1); getCartCountAndTotal();');
                                      $product.find('.addtocart.mchp-button').attr('onkeypress', 'microchipDIRECT.addToCart("'+pValue.partNumber+'",1); getCartCountAndTotal();');

                                   }
                                $product.find('.product-desc').html(pValue.mdDescription);


                                $product.find(productName).html(pValue.title);
                                var productDetailPage = $product.find(productName).attr('href');
                                productDetailPage = productDetailPage + '/' + pValue.name;
                                $product.find(productName).attr('href', productDetailPage);
                                if(pValue.images !== undefined && pValue.images !== null) {
                                    $product.find('.product-image').attr('src', pValue.images[0]);
                                }


                                if (isPremier(value)) {
                                    if(pKey === 0) {
                                        $tableHeading.insertAfter(premierVendorCardListLast);
                                        $vendorInfo.insertAfter(premierVendorCardListLast);
                                    }
                                    $product.insertAfter(premierVendorProductTableHeaderLast);
                                } else if (isRegular(value)){
                                    if(pKey === 0) {
                                        $tableHeading.insertAfter(nonPremierVendorCardListLast);
                                        $vendorInfo.insertAfter(nonPremierVendorCardListLast);
                                    }
                                    $product.insertAfter(nonPremierVendorProductTableHeaderLast);
                                }
                            });
                        });
                    } else {
                        handleNoResult();
                    }

                    let activeCategory = category;
                    if (category === '/content/dam/mchp/content-fragments/dev-tools/third-party-categories/thirdpartytools') {
                        activeCategory = defaultCategory;
                    }
                    $('.mchp-tree-dropdown_text').removeClass('current-page');

                    const allDropdowns = $('.mchp-tree-dropdown_link');
                    allDropdowns.each(function(index) {
                        const link = $(allDropdowns[index]);
                        if (link.attr('data-category') === activeCategory) {
                            link.find('.mchp-tree-dropdown_text').addClass('current-page');
                        }
                    });

                    $(leftNavAnchor).removeClass('disabled');
                },
                error: function(xhr) {
                    handleNoResult();
                    console.log("error");
                    $(leftNavAnchor).removeClass('disabled');
                }
            });

        }

        function isPremier(value) {
            return value.isPremier === "true";
        }

        function isRegular(value) {
            return value.isPremier === "false";
        }
        function handleNoResult() {
            var $card = $('.card-view-no-result.template').clone();
            $card.removeClass('template');
            cardList.append($card);
        }

    }

});
function searchDeviceFamily(){
    var urlParts = window.location.href.split("/");
    var target_url = "";
    if(document.getElementsByName("deviceSearchList")[0].value === ""){
        const message = $("#noResultMessage");
        message.removeClass("hidden");
        return;
    }
    else if(urlParts[urlParts.length-1].includes("devtoolselector") || (urlParts[urlParts.length-1] === "digikey" && urlParts[urlParts.length-2].includes("devtoolselector"))){
        target_url = window.location.href+"/"+document.getElementsByName("deviceSearchList")[0].value;
    }else{
        urlParts[urlParts.length-1] = document.getElementsByName("deviceSearchList")[0].value;
        target_url = urlParts.join("/");
    }

    window.location.replace(target_url);
}

function changeTab(event, categoryName){
    var devtools = document.getElementsByClassName("devtool");
    var i;
    for(i = 0; i < devtools.length; i++){
        devtools[i].style.display = "none";
    }
    var categories = document.getElementsByClassName("category");
    for(i = 0; i < devtools.length; i++){
        categories[i].className = categories[i].className.replace(" active", "");
    }
    categoryName.style.display="block";
    if(event.type === "click"){
        event.currentTarget.className += " active";
    }else if(event.type==="keypress"){
        event.currentTarget.className += " active";

    }else{
        event.addClass("active");
    }
}

/***
 * Displays the Integrated Development Environment Category after page load.
 * ***/
$(document).ready(function(){
    const devToolContainer = $(".devtoolselector");

    /* Check if element exists. */
    if(devToolContainer.length){
        const dtsCategories = $(".devtoolselector .dts_categories");

		const thirdPartyTools = devToolContainer.find(".thirdPartyTools");
        const developmentEnvironment = devToolContainer.find(".Development Environment");
		const legacy = devToolContainer.find(".Legacy");
        const emulators = devToolContainer.find(".EmulatorsDebuggers");
        const programmerRelations = devToolContainer.find(".ProductionProgrammers");
        const demoBoards = devToolContainer.find(".DemoEvaluationBoards");
        const softwareLibraries = devToolContainer.find(".SoftwareLibraries");
        const codeExamples = devToolContainer.find(".CodeExamples");

        devToolContainer.find("#Fusa,.Fusa").remove();
        dtsCategories.append(developmentEnvironment);
        dtsCategories.append(emulators);
        dtsCategories.append(demoBoards);
        dtsCategories.append(programmerRelations);
        dtsCategories.append(thirdPartyTools);
        dtsCategories.append(legacy);
        dtsCategories.append(softwareLibraries);
        dtsCategories.append(codeExamples);

        /***
         * Finds first button category to make it active during page load.
         * This must be place after appending development tools selector categories.
         * ***/
        const firstButtonCategory = dtsCategories.find(".mchp-button-wrapper").first();

        if(firstButtonCategory.length){
            const categoryClassName = firstButtonCategory.attr("class").split(' ')[1];
            const categoryDTSResult = devToolContainer.find(`.dts_results #${categoryClassName}`);

            categoryDTSResult.each(function(){
                changeTab(firstButtonCategory.find(".category"), this)
            });
        }

        /* Search when no of characters are more than 2 and ENTER key is press . */
        const searchInput = devToolContainer.find(".main-search");
        searchInput.on("keypress", function(e){
            const enterKey = 13;
            const searchData = $("#searchDeviceFamily").val();
            if(e.keyCode === enterKey && searchData.length>2){
                searchDeviceFamily();
            }
        })
    }

});

$(document).ready(function(){
    const thirdPartySearchSuggestionsContainer = $(".third-party-search-suggestions-container");
    const searchInput = $(".devtoolselector").find(".main-search");
    const resultsContainer = $(thirdPartySearchSuggestionsContainer).find(".main-list");
    const domain = window.location.origin;
   let contentpath="/en-us/";
    let htmlExtension="";

    if(isAuthorHost()){
        contentpath="/content/mchp/en-us/";
        htmlExtension=".html";
    }
    const devtoolselectorBaseURL="development-tools-tools-and-software/devtoolselector";
    const baseURL = domain + contentpath + devtoolselectorBaseURL+htmlExtension;
    const digikeyURL = domain + contentpath +devtoolselectorBaseURL+htmlExtension+"/digikey";
    const mouserURL = domain + contentpath + devtoolselectorBaseURL+htmlExtension+"/mouser";
    const pathName = domain + window.location.pathname;

    var geturl = window.location;
    var target = geturl.protocol + "//" + geturl.host + "/bin/getsuggestions";

     searchInput.on("keyup paste", function(){
            $("a").remove(".product-link");

            var searchData = document.getElementById("searchDeviceFamily").value;
            if(searchData.length > 2){
            $(thirdPartySearchSuggestionsContainer).show();
            toggleSearchEnableState(true);
                $.ajax({
                        method: "GET",
                        url: target,
                        data: {searchstring: searchData},
                        dataType: "json",
                        async: false,
                        success: function(response){
                            if(response.length>0){

                                $.each(response, function(index, item){
                                    if(pathName.includes("digikey")) {
                                    resultsContainer.append(`<a href="${digikeyURL}/${item.path}" rel="noopener" class="product-link"><div class="product-list">${item.name}</div></a>`);
                                    }else if(pathName.includes("mouser")){
                                    resultsContainer.append(`<a href="${mouserURL}/${item.path}" rel="noopener" class="product-link"><div class="product-list">${item.name}</div></a>`);
                                    }else{
                                    resultsContainer.append(`<a href="${baseURL}/${item.path}" rel="noopener" class="product-link"><div class="product-list">${item.name}</div></a>`);
                                    }
                                });
                            }
                            else{
                                $(thirdPartySearchSuggestionsContainer).hide();

                            }
                        }
                });
            }
             else{
                  $(thirdPartySearchSuggestionsContainer).hide();
                  toggleSearchEnableState(false);
             }
        });

         const toggleSearchEnableState =(shallEnable)=>
                {
                   const searchButtonSelector=".search-button";
                   if(shallEnable===true)

                   {
                          $(searchButtonSelector).removeClass("disabled-button");
                          $(searchButtonSelector).addClass("enabled-button");
                          $(searchButtonSelector).prop("disabled",false);
                   }

                   else

                   {
                         $(searchButtonSelector).removeClass("enabled-button");
                         $(searchButtonSelector).addClass("disabled-button");
                         $(searchButtonSelector).prop("disabled",true);
                   }

                }

    $(document).click(function(e){
        if(!($(e.target).closest(thirdPartySearchSuggestionsContainer).length)&&(e.target.id!=="searchDeviceFamily")){
            $(thirdPartySearchSuggestionsContainer).hide();
        }
    });

})
function mchpScrollToTop(){
    window.scrollTo(0,0);
}

function scrollFunction(scrollBtn, showScrollButtonClass){
    if (document.body.scrollTop > 30 || document.documentElement.scrollTop > 30) {
        scrollBtn.addClass(showScrollButtonClass);
    } else {
        scrollBtn.removeClass(showScrollButtonClass);
    }
}

$(document).ready(function(){
    const scrollBtn = $(".mchp-scroll-to-top");
    const showScrollButtonClass = "show-scroll-button";
    $(window).on('scroll', function(){
        scrollFunction(scrollBtn, showScrollButtonClass)
    });


    //Identify scroll stop with the help of a timer
    //https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling
    let timer = null;
    $(window).bind('scroll', function(){
        if(timer !== null) {
            clearTimeout(timer);        
        }
        timer = setTimeout(function() {
            if($(window).width() <= 1199){
                //Hide button 2 seconds after scroll stop for mobile devices
                setTimeout(function(){
                    scrollBtn.removeClass(showScrollButtonClass);
                }, 2000);
            }
        }, 150);
    });

})
/**
 * @desc This javascript file can be used by external sites to bring microchipDirect Product page
 * Use this as an external script
 * @required -- register the external domain with mirochipDIRECT to enable CORS
 */
const HIDE_EMBED = "hide-embed-modal";
const SHOW_EMBED = "show-embed-modal";
const DISABLE = "disable-body-scroll";


function getMicrochipDirectDevToolpage(devtoolCPN, mDBaseURL,configResponseData) {
    $.ajax({
        url: mDBaseURL.concat("/api/product/MarcomBuyDevtool?devtoolCPN=", devtoolCPN),
        type: "GET",
        cache: false,
        crossDomain: true,
        xhrFields: { withCredentials: true },
        success: function (responsedata) {
            const buyNowCard = $(".md-buynow-card");
            if(responsedata !== configResponseData){
                const tag_id = $("#BuyProductsTable");
                buyNowCard.removeClass("hide-buy-now-button");
                tag_id.html(responsedata);
            }else {
                buyNowCard.removeClass("hide-contactus-button");
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            console.log(thrownError);
        }
    });
}

function showMarketoModalForm(modalMarketoContainer, body){
    modalMarketoContainer.removeClass(HIDE_EMBED).addClass(SHOW_EMBED);
    if(body.hasClass(DISABLE)){
        body.removeClass(DISABLE);
    }else{
        body.addClass(DISABLE);
    }
}

$(function () {
    const searchBarUrl = document.getElementsByClassName('mchp-direct-url-base');
    const baseUrl = (searchBarUrl && searchBarUrl.length > 0) ? searchBarUrl[0].innerText : "";
    const responseText = document.getElementsByClassName('mchp-direct-responseText-base');
    const configResponseData = (responseText && responseText.length > 0) ? responseText[0].innerText : "";
    const buyProductsTable = $("#BuyProductsTable");
    if (buyProductsTable.length && buyProductsTable.hasClass("devtool")) {
        let devtoolCPN = '';
        if (buyProductsTable.attr('partnumber')) {
            devtoolCPN = buyProductsTable.attr('partnumber');
            getMicrochipDirectDevToolpage(devtoolCPN, baseUrl,configResponseData);
        }
    }
});

$(document).ready(function () {
    const marketoModalButton = $('.marketo-button-wrapper');
    const modalCloseButton = $('.marketo-close-modal');
    const body = $('body');
    marketoModalButton.on('click', function(e){
            const button = $(e.currentTarget);
            const modalMarketoContainer = button.siblings('.mchp-marketo-modal-container');
            if(modalMarketoContainer.hasClass(HIDE_EMBED)){
                showMarketoModalForm(modalMarketoContainer, body);
            }
    });
    modalCloseButton.on('click', function(e){
        const closeButton = $(e.currentTarget);
        const modalMarketoContainer = closeButton.closest('.mchp-marketo-modal-container');
        modalMarketoContainer.removeClass(SHOW_EMBED).addClass(HIDE_EMBED);
        body.removeClass(DISABLE);
    })


    if($('.devtoolbuynow .md-buynow-card .addtocart').length>0){
        const buynowbutton = $("span:contains('Buy Now')").closest('a').get(0);
        const partnumber=buynowbutton.getAttribute('partnumber');
        buynowbutton.setAttribute("onkeypress", "microchipDIRECT.addToCart('" + partnumber + "',1); getCartCountAndTotal();");
        buynowbutton.addEventListener("click",function (e) {
          setTimeout(() => {
            getCartCountAndTotal();
          }, 1500);
        });
    }
})
$(window).on('load', () => {
    let slideIndex = 1;
    const disableBodyScrollClass = 'disable-body-scroll';
    const splashScreenBodyClass = '.splashscreen-body';

    showSplashScreen();

    // Check whenever anchor tag is modified in the url
    if ('onhashchange' in window) {
        window.onhashchange = function () {
            hideSplashScreen();
            showSplashScreen(true);
        }
    }

    function hideSplashScreen() {
        // Hide for data-sheet-sd
        $('.splashscreen').hide();
    }

    function showSplashScreen(hashChange = false) {
        let displaySplashScreen = false;
        const body = $('body');
        const urlAnchor = window.location.hash.replace('#', '').trim().toLowerCase();
        const splashScreenDelay = 800;
        const availableSplashScreenAnchors = [
            'video-sd', // Video Silicon Device
            'video-dt', // Video Dev Tool
            'data-sheet-sd' // Data Sheet Silicon Device (PDF)
        ];

        // Enable scroll on hashChange
        if (hashChange) {
            body.removeClass(disableBodyScrollClass);
        }

        if (urlAnchor && availableSplashScreenAnchors.includes(urlAnchor)) {
            const splashScreenElement = $('[data-anchor="' + urlAnchor + '"]');

            switch (urlAnchor) {
                case availableSplashScreenAnchors[0]:
                    // Get video element
                    const videoElement = $('.mchp-video-carousel-card__img').first().next().clone();

                    if (videoElement.length === 1) {
                        displaySplashScreen = true;
                        // Add missing attributes
                        videoElement.attr({
                            controls: '',
                            disablepictureinpicture: '',
                            controlslist: 'nodownload'
                        });
                        // Add class
                        videoElement.addClass('splashscreen-body-video');

                        splashScreenElement.find(splashScreenBodyClass).html(videoElement);
                    }
                    break;
                case availableSplashScreenAnchors[1]:
                    // Retrieve only videos that are not from youtube
                    const dpVideosElements = $('.dynamic-player video').clone();

                    if (dpVideosElements.length >= 1) {
                        displaySplashScreen = true;

                        //  Run only on initialize
                        if (!hashChange) {
                            const slideVideos = [];
                            const slideDots = [];

                            // Construct the video and dot elements
                            dpVideosElements.each((key, value) => {
                                // Setup element slide videos
                                const video = $(value).removeClass('vertical-video-video').addClass('slide-video');
                                video.attr({
                                    controls: '',
                                    disablepictureinpicture: '',
                                    controlslist: 'nodownload'
                                });
                                const videoDiv = $('<div>').addClass('slides fade').append(video);
                                slideVideos.push(videoDiv);
                                // Setup element slide dots
                                const slideDotSpan = $('<span>').addClass('slide-dots').attr('data-dot-no', key + 1);
                                slideDots.push(slideDotSpan);
                            });
                            const slideVideosDiv = $('<div>').append(slideVideos);
                            const slideDotsDiv = $('<div>').append(slideDots);

                            splashScreenElement.find(splashScreenBodyClass).html(`
                                <div class="slide-container">
                                    ${slideVideosDiv.prop('outerHTML')}
                                    <div class="slide-navs">
                                        <a class="slide-nav-directions prev" data-nav-value="-1">❮</a>
                                        ${slideDotsDiv.prop('outerHTML')}
                                        <a class="slide-nav-directions next" data-nav-value="1">❯</a>
                                    </div>
                                </div>
                            `);

                            showSlides(slideIndex);
                        }
                    }
                    break;
                case availableSplashScreenAnchors[2]:
                    const dsLink = $('[href*=".pdf"][data-name="PDF"]').first().clone();

                    if (dsLink.length === 1) {
                        displaySplashScreen = true;
                        const documentLink = dsLink.attr('href');

                        splashScreenElement.find(splashScreenBodyClass).html(`
                            <object
                                data="${documentLink}"
                                type="application/pdf"
                                class="splashscreen-body-document">
                                <div>Unable to display PDF file. <a href="${documentLink}">Download</a> instead.</div>
                            </object>
                        `);
                        splashScreenElement.find('i').addClass('fa-2x');
                    }
                    break;
            }

            // Check if the required elements are found
            if (displaySplashScreen) {
                // Display splashscreen
                splashScreenElement
                    .prependTo(document.body)
                    .fadeIn(splashScreenDelay, function () {
                        body.addClass(disableBodyScrollClass);
                        const splashScreenContainer = $(this).find('.splashscreen-container');
                        const splashScreenContainerDelay = splashScreenDelay / 2;
                        // Display content
                        splashScreenContainer.slideDown(splashScreenContainerDelay);
                        // Listen for close actions
                        splashScreenContainer
                            .find('.splashscreen-close')
                            .click(() => {
                                body.removeClass(disableBodyScrollClass);
                                splashScreenContainer.slideUp(splashScreenContainerDelay);
                                splashScreenElement.fadeOut(splashScreenDelay);
                            });
                    });
            }
        }
    }

    // Event listeners for slideshow of videos
    $('.slide-dots').on('click', function () {
        const dotNo = $(this).data('dot-no');
        slideIndex = dotNo;
        showSlides(slideIndex);
    });

    $('.slide-nav-directions').on('click', function () {
        const navValue = parseInt($(this).data('nav-value'));
        slideIndex += navValue;
        showSlides(slideIndex);
    });

    function showSlides(n) {
        let i;
        const slides = $('.slides');
        const dots = $('.slide-dots');

        if (n > slides.length) {
            slideIndex = 1
        }

        if (n < 1) {
            slideIndex = slides.length
        }

        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = 'none';
        }

        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(' active', '');
        }
        slides[slideIndex-1].style.display = 'block';
        dots[slideIndex-1].className += ' active';
    }
});

var swlibsearchfilterclass = '#swlibsearchfilters';
var divtitleinputclass = 'div#titleinput';
var textboxName = "Search";
var textEraseIcon = ".eraseIcon";
var displayCrossIcon = 'dp-display-block';
const removeCrossIcon = 'dp-display-none';
const slideClassSelector = '.slide';
const faangleupclass = 'fa-angle-up';
const faangledownclass = 'fa-angle-down';
const icontag = 'i';
const numresultclass = '.num-result';
const numfilterclass = '.num-filter';
const mchpbtnsolidtext = 'a.mchp-button.solid.current';
const disabletext = 'disable';
const currenttext = 'current disable';
const applicationName = $("#appName").data("app-name");
const searchKeyup = $("#appName").data("search-keyup");

$('.reset-filter').children('div').children('a').addClass(currenttext);

function filterSliderToggle() {
    $('.filter-sliders').slideToggle();
    if ($(slideClassSelector).children().children(icontag).hasClass(faangledownclass)) {
        $(slideClassSelector).children().children(icontag).removeClass(faangledownclass);
        $(slideClassSelector).children().children(icontag).addClass(faangleupclass);
    } else {
        $(slideClassSelector).children().children(icontag).removeClass(faangleupclass);
        $(slideClassSelector).children().children(icontag).addClass(faangledownclass);
    }
}
filterSliderToggle();
const clearFilters = (category = null) => {
    if (category !== null) {
        var allMatches = $.grep($(swlibsearchfilterclass).children(), function(item, index) {
            return $(item).text().trim().indexOf(category.trim()) >= 0
        });
        var count = allMatches.length;
        for (var i = 0; i < count; i++) {
            allMatches[i].remove();
        }
    } else {
        $(swlibsearchfilterclass).children().remove();
    }
}

const buildFilterChip = (category, val) => {
    var eachCard = "";
    clearFilters(category);
    if (Object.values(val).length > 0) {
        for (var i = 0; i < Object.values(val).length; i++) {
            eachCard = eachCard + '<div class="filter-chip" data-key=' + Object.keys(val)[i] + '>' +
                category + " : " + Object.values(val)[i] + '<i class="close-filter fas fa-times"></i></div>';
        }
        $(swlibsearchfilterclass).append(eachCard);
    }
    changeFilterCount();
}
var numresults;
var optionlistclass = '.optionList';
var selectedlistclass = 'li.selected';
const setnumresults = (resultscount) => {
    numresults = resultscount;
}

//sets number of selected filters in software library filtering section
const changeFilterCount = () => {
    var numfilters = 0;
    $(optionlistclass).each(function(index) {
        //if some item is selected inside filteroptionlist component then it will get added
        if ($($(optionlistclass)[index]).find(selectedlistclass).length > 0) {
            numfilters++;
        }
    });

    numresults = numresults > 0 ? numresults : 0;
    if ($(divtitleinputclass).children('div').children('input').val() !== "" &&
        $(divtitleinputclass).children('div').children('input').val() !== undefined) {
        numfilters = numfilters + 1;
    }
    $(numfilterclass).children().remove();
    $(numresultclass).children().remove();

    if (numfilters === 0 && numresults > 0) {
        $(numresultclass).append("<p>" + numresults + " " + applicationName + " available.</p>")
        $(mchpbtnsolidtext).addClass(disabletext)
    } else if (numfilters > 0 && numresults > 0) {
        numfilters === 1 ? $(numfilterclass).append("<b>One filter in use.</b>") :
            $(numfilterclass).append("<b>Using " + numfilters + " filters.</b>")
        $(numresultclass).append("<p>Found " + numresults + " " + applicationName + "</p>")
        $(mchpbtnsolidtext).removeClass(disabletext)
    } else if (numfilters === 0 && numresults === 0) {
        $(numresultclass).append("<p>No " + applicationName + " found!! </p>")
        $(mchpbtnsolidtext).addClass(disabletext)
    } else {
        $(numfilterclass).append("<b>Using " + numfilters + " filters.</b>")
        $(numresultclass).append("<p>No " + applicationName + " found!! </p>")
        $(mchpbtnsolidtext).removeClass(disabletext)
    }
}
changeFilterCount();

$('.reset-filter').click(() => {
    var selectedItemList = $(optionlistclass).children().find(selectedlistclass);
    selectedItemList.each(function(i, selected) {
        var dataVal = selected.children[0].dataset["val"];
        //To:do change code to use id instead of parentelement
        var ele = $(selected).parents(optionlistclass)
        if (selected.className === "selected") {
            selected.classList.remove('selected');
            OLValueToggle(ele, dataVal);
            OLFormat($(ele));
        }
    });
    $(divtitleinputclass).children('div').children('input').val("");
    clearFilters();
    changeFilterCount();
    if ($('.fa-angle-up').length > 0) {
        filterSliderToggle();
    }
});
$(document).ready(function() {
    $(textEraseIcon).click((event) => {
        var eraseIconElem = event.currentTarget;
        $(eraseIconElem).parent().parent().find('input').val("");
        $(eraseIconElem).find('i').removeClass(displayCrossIcon);
        $(eraseIconElem).find('i').addClass(removeCrossIcon);
        clearFilters(textboxName);
        changeFilterCount();

    });

    $(document).on('click', '.close-filter', function(event) {
        var eraseIconElem = event.currentTarget;
        var selectedItemList = $(optionlistclass).children().find(selectedlistclass);
        var deletedval = $(eraseIconElem).parent()[0].dataset.key;
        if ($(divtitleinputclass)[0] !== undefined) {
            if ($(eraseIconElem).parent()[0].innerText.split(":")[0].trim() === textboxName) {
                $(divtitleinputclass).children('div').children('input').val("");
                $(textEraseIcon).find('i').removeClass(displayCrossIcon);
                $(textEraseIcon).find('i').addClass(removeCrossIcon);
            }
        }
        selectedItemList.each(function(i, selected) {
            var dataVal = selected.children[0].dataset["val"];
            var ele = $(selected).parents(optionlistclass);
            var deletecat = $(selected).parents(optionlistclass).find('span').get(0).innerText;
            if (selected.children[0].dataset.val === deletedval && deletecat === $(eraseIconElem).parent()[0].innerText.split(":")[0].trim()) {
                selected.classList.remove('selected');
                OLValueToggle($(ele), dataVal);
                OLFormat($(ele));
            }
        });
        $(eraseIconElem).parent().remove();
        changeFilterCount();

    });
    const addTitleFilter = () => {
        var a = [];
        a.push($(divtitleinputclass)[0].children[0].children[1].value);

        if (a[0].trim().length > 0) {
            buildFilterChip(textboxName, a);
        } else {
            clearFilters(textboxName);
            changeFilterCount();
        }
    }
    $(divtitleinputclass).children('div').children('input').on('keyup', function(e) {
        $(divtitleinputclass).children('div').find(".cross-icons").addClass(displayCrossIcon);
        if (searchKeyup === false) {
            addTitleFilter();
        }
    });

})
$(document).ready(function() {
    var parentArray = [];
    var swlibTableClass = '#swlibrarypagestable';
    var displaynone = "dp-display-none";
    var wcmMode = $('#wcmtest').data('wcmmode');
    var tcWcmmode = $('#wcmmodeval').data('wcmmode');
    var SWLibDataArray;
    var swLibSearchURLText = "swsearch";
    var allPages, mindiAvailable;
    var categorylist = [],
        prodcatlist = [],
        title, numresults, anchortag = 'a';

    var swlifilterclass = '#swlib-filter',
        optionlistclass = '.optionList',
        ddselectid = '#dropdown-select',
        optionlistvaluesclass = '.option-list-values',
        textid = '#text',
        allTermsAndConditionstext = "allTermsAndConditions";
    var setTableClass = "class='fa fa-sort-asc' aria-hidden='true'></i></span>";
    var getuniquearray = (array) => {
        var uniqueNames = [];
        $.each(array, function(i, el) {
            if ($.inArray(el, uniqueNames) === -1) {
                uniqueNames.push(el);
            }
        });
        return uniqueNames;

    }
    var getCategories = (appcatjson, prodcatjson = null) => {
        categorylist = [];
        prodcatlist = [];

        if (appcatjson !== "{}" || prodcatjson !== "{}") {
            JSON.parse(appcatjson, function(key, value) {
                if (key !== "") {
                    categorylist.push(value);
                }
            })
            if (!mindiAvailable) {
                JSON.parse(prodcatjson, function(key, value) {
                    if (key !== "") {
                        prodcatlist.push(value);
                    }
                })
            }
        }
    }
    var getuniqueResults = (array) => {
        var uniqueNames = [];
        var isduplicate;
        $.each(array, function(i, el) {
            isduplicate = false;
            if (uniqueNames.length > 0) {
                for (var uniqueName of uniqueNames) {
                    if (el.Title === uniqueName.Title) {
                        isduplicate = true;
                        break;
                    }
                }
                if (isduplicate === false) {
                    uniqueNames.push(el);
                }
            } else {
                uniqueNames.push(el);
            }
        });
        return uniqueNames;
    }

    const escapeRegExp = (str) => // or better use 'escape-string-regexp' package
        str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")

    var OpenEndedfiltering = (jsonobject, Searchquery) => {
        var filteredResult = [];
        var SearchExpression = new RegExp(escapeRegExp(Searchquery), "i");

        $.each(jsonobject, function(jsonKey, jsonVal) {
            if (!mindiAvailable) {
                if (jsonVal.Title !== undefined && jsonVal.description !== undefined) {
                    if ((jsonVal.Title.search(SearchExpression) !== -1) ||
                        jsonVal.description.search(SearchExpression) !== -1) {
                        filteredResult.push(jsonVal);
                    }
                } else if (jsonVal.Title !== undefined &&
                    (jsonVal.Title.search(SearchExpression) !== -1)) {
                    filteredResult.push(jsonVal);
                }
            } else {
                if (jsonVal.description !== undefined) {
                    if (jsonVal.description.search(SearchExpression) !== -1) {
                        filteredResult.push(jsonVal);
                    }
                }
                if ((jsonVal.Title.search(SearchExpression) !== -1) ||
                    jsonVal.MindiCPN.search(SearchExpression) !== -1 ||
                    jsonVal.Version.search(SearchExpression) !== -1) {
                    filteredResult.push(jsonVal);
                }
            }
            $.each(jsonVal.Tags, function(TagsKey, TagsVal) {
                if (TagsVal.appCategory.search(SearchExpression) !== -1 ||
                    TagsVal.appSubCategory.search(SearchExpression) !== -1 ||
                    TagsVal.productCategory.search(SearchExpression) !== -1 ||
                    TagsVal.productSubCategory.search(SearchExpression) !== -1) {
                    filteredResult.push(jsonVal);
                }
            })
        });
        return getuniqueResults(filteredResult);
    }

    var searchByURL = () => {
        var swlibsearchText = window.location.href.includes(swLibSearchURLText) ?
            (window.location.href).substr((window.location.href).search('=') + 1, (window.location.href).length) :
            '';
        if (swlibsearchText !== '') {
            if (swlibsearchText.includes('%2520')) {
                swlibsearchText = decodeURI(swlibsearchText);
            }
            $('.swlib-landing').find('#titleinput input')[0].value = decodeURI(swlibsearchText);
            swlibsearchclick();
        }
    }
    var tableColFunc = (tableID) => {
        var firstColumn = $(tableID).find("th")[0];
        $(firstColumn).find("i#downarrow").addClass(displaynone);
        $(firstColumn).siblings().find("i").addClass(displaynone);

        $(tableID + ' thead').on('click', 'th', (event) => {
            var $this = $(event.currentTarget);
            $this.siblings().find("i").addClass(displaynone);
            if ($this.find("i.dp-display-none").length > 1) {
                $this.find("i#uparrow").removeClass(displaynone);
            } else {
                $this.find("i.dp-display-none").removeClass(displaynone).siblings().addClass(displaynone);
            }
        });
    }
    const setSwLibDataToTable = (swlibdata) => {
        if (mindiAvailable) {
            $(swlibTableClass).DataTable({
                dom: "flptip",
                data: swlibdata,
                order: [
                    [4, "asc"]
                ],
                autoWidth: false,
                searching: true,
                lengthChange: false,
                info: false,
                pageLength: 20,
                pagingType: 'numbers',
                "scrollX": false,
                columns: [{
                        title: "Category <span><i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow'" +
                            setTableClass,
                        width: "15%"
                    },
                    {
                        title: "Sub-Category <span class='display-inline'><i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'>" +
                            "</i><i id='uparrow' class='fa fa-sort-asc' aria-hidden='true'></i></span> ",
                        width: "15%"
                    },
                    {
                        title: "Mindi CPN <span><i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                            setTableClass,
                        width: "14%"
                    },
                    {
                        title: "Version <span><i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                            setTableClass,
                        width: "12%"
                    },
                    {
                        title: "Title",
                        width: "28%"
                    },
                    {
                        title: "Updated <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                            "class='fa fa-sort-asc' aria-hidden='true'></i>",
                        width: "16%",
                        type: "date"
                    }
                ]

            });
        } else {
            $(swlibTableClass).DataTable({
                dom: "flptip",
                data: swlibdata,
                order: [
                    [2, "asc"]
                ],
                autoWidth: false,
                searching: true,
                lengthChange: false,
                info: false,
                pageLength: 25,
                pagingType: 'numbers',
                "scrollX": false,
                columns: [{
                        title: "Category <span><i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow'" +
                            " class='fa fa-sort-asc' aria-hidden='true'></i></span>",
                        width: "15%"
                    },
                    {
                        title: "Sub-Category <span class='display-inline'><i id='downarrow' class='fa fa-sort-desc'" +
                            " aria-hidden='true'></i><i id='uparrow' class='fa fa-sort-asc' aria-hidden='true'></i></span> ",
                        width: "20%"
                    },
                    { title: "Title", width: "40%" },
                    {
                        title: "Updated <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow'" +
                            " class='fa fa-sort-asc' aria-hidden='true'></i>",
                        width: "20%",
                        type: "date"
                    }
                ]
            });
        }
        tableColFunc(swlibTableClass);
    }


    var formatData4PagesTable = (PagestoForamt) => {
        parentArray = [];
        createChipicons();
        PagestoForamt.map((eachPage) => {
            var childArray = [];
            var categoryArray = [];
            var SubCategoryArray = [];

            if (eachPage.Tags.length !== 0) {
                for (var Tags of eachPage.Tags) {
                    if (Tags.appCategory !== '') {
                        categoryArray.push(Tags.appCategory);
                    }
                    if (Tags.appSubCategory !== '') {
                        SubCategoryArray.push(Tags.appSubCategory);
                    }
                }
                categoryArray = getuniquearray(categoryArray);
                SubCategoryArray = getuniquearray(SubCategoryArray);
            }
            childArray.push(categoryArray.join(", "));
            childArray.push(SubCategoryArray.join(", "));
            if (mindiAvailable) {
                childArray.push(eachPage.MindiCPN);
                childArray.push(eachPage.Version);
            }
            childArray.push('<a href="#" class="swlink" id="swlinknum" data-swlibrary-number="' + allPages.indexOf(eachPage) + '">' + eachPage.Title + '</a>');
            childArray.push(getFormattedDate(eachPage.LastModified));
            parentArray.push(childArray);
        });
        numresults = parentArray !== null ? parentArray.length : 0;
        setnumresults(numresults);
        changeFilterCount();
        setSwLibDataToTable(parentArray);
    };

    const createChipicons = () => {
        if ($(swlifilterclass)[0] !== undefined) {
            for (var numjsonfield = 0; numjsonfield < $(swlifilterclass).find(optionlistclass).children('input').length; numjsonfield++) {
                var ddcategory;
                var jsonval = JSON.parse($(swlifilterclass).find(optionlistclass).children('input')[numjsonfield].value);
                if ($(swlifilterclass).find(optionlistclass).children('span')[numjsonfield] !== undefined) {
                    ddcategory = $(swlifilterclass).find(optionlistclass).children('span')[numjsonfield].innerText;
                }
                buildFilterChip(ddcategory, jsonval);
            }
        }
    }

    function getFormattedDate(date) {
        var date1 = new Date(date);
        var year = date1.getFullYear();

        var month = (1 + date1.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;

        var day = date1.getDate().toString();
        day = day.length > 1 ? day : '0' + day;

        return month + '-' + day + '-' + year;
    }

    $(document).on('click', '.swlink', function(event) {
        var swlibnum = event.target.getAttribute("data-swlibrary-number");
        var navigatedpage = SWLibDataArray.allPages[swlibnum];
        if (wcmMode === "DISABLED") {
            if (navigatedpage.hasTermsAndConditions) {
                sessionStorage.setItem("navigatedpage", JSON.stringify(navigatedpage));
                window.location.replace("/en-us/terms-and-conditions");
            } else {
                window.location.replace((navigatedpage.Path).replace('/content/mchp', ''));
            }
        } else {
            if (navigatedpage.hasTermsAndConditions) {
                sessionStorage.setItem("navigatedpage", JSON.stringify(navigatedpage));
                window.location.replace("/content/mchp/en-us/terms-and-conditions.html");
            } else {
                window.location.replace(navigatedpage.Path + ".html");
            }
        }
    })
    
    var navigatedpagelinks = JSON.parse(sessionStorage.getItem("navigatedpage"));
    if (navigatedpagelinks && sessionStorage.getItem("navigatedpage") !== undefined &&
        $('#Titletextcomponent').children().children('h1')[0] !== undefined &&
        $(textid).children().children('p')[0] !== undefined) {
        var declineBtnId = '#declinebtn';
        var acceptBtnId = '#Acceptbtn';        
        var eachParagraph;
        if (tcWcmmode === "DISABLED") {
            $(acceptBtnId).children().children(anchortag).attr('href', (navigatedpagelinks.Path).replace('/content/mchp', ''));
            if (navigatedpagelinks.MindiCPN !== undefined) {
                $(declineBtnId).children().children(anchortag).attr('href', "/en-us/mindi-sw-library");
            } else {
                $(declineBtnId).children().children(anchortag).attr('href', "/en-us/software-library");
            }
        } else {
            $(acceptBtnId).children().children(anchortag).attr('href', navigatedpagelinks.Path + ".html");
            if (navigatedpagelinks.MindiCPN !== undefined) {
                $(declineBtnId).children().children(anchortag).attr('href', "/content/mchp/en-us/mindi-sw-library.html");
            } else {
                $(declineBtnId).children().children(anchortag).attr('href', "/content/mchp/en-us/software-library.html");
            }
        }
        if (JSON.parse(sessionStorage.getItem(allTermsAndConditionstext))[navigatedpagelinks.termsAndConditions] !== undefined) {
            var terms = JSON.parse(sessionStorage.getItem(allTermsAndConditionstext));
            $('#Titletextcomponent').children().children('h1')[0].innerHTML =
                terms[navigatedpagelinks.termsAndConditions].conditionTitle;
            if ($(textid).children().children('p').length > 1) {
                for (eachParagraph = 0; eachParagraph < $(textid).children().children('p').length; eachParagraph++) {
                    $(textid).children().children('p')[eachParagraph].innerHTML = "";
                }
                $(textid).children().children('p')[eachParagraph - 1].innerHTML =
                    terms[navigatedpagelinks.termsAndConditions].conditionDescription;
            }

        }
    }


    var filterBycategory = (jsonobject, selectedCategorylist) => {
        var filteredResult = [];
        for (var selectedCategory of selectedCategorylist) {
            $.each(jsonobject, function(jsonkey, jsonvalue) {
                $.each(jsonvalue.Tags, function(TagsKey, TagsValue) {
                    if (selectedCategory.split('/').length === 2) {
                        if (TagsValue.appCategory === selectedCategory.split('/')[0].trim() &&
                            TagsValue.appSubCategory === selectedCategory.split('/')[1].trim()) {
                            filteredResult.push(jsonvalue);
                            return false;
                        }
                        return true;
                    } else if ((TagsValue.appCategory === selectedCategory.split('/')[0].trim() &&
                            !mindiAvailable) || (TagsValue.appCategory === "Analog Simulation" &&
                            TagsValue.appSubCategory === selectedCategory.split('/')[0].trim() &&
                            mindiAvailable)) {
                        filteredResult.push(jsonvalue);
                        return false;
                    } else {
                        return true;
                    }
                });
            });
        }
        return getuniqueResults(filteredResult);
    }

    var filterByprodcategory = (jsonobject, selectedProdCategorylist) => {
        var filteredResult = [];
        for (var selectedProdCategory of selectedProdCategorylist) {
            $.each(jsonobject, function(jsonkey, jsonvalue) {
                $.each(jsonvalue.Tags, function(TagsKey, TagsValue) {
                    if (selectedProdCategory.split('/').length === 2) {
                        if (TagsValue.productCategory === selectedProdCategory.split('/')[0].trim() &&
                            TagsValue.productSubCategory === selectedProdCategory.split('/')[1].trim()) {
                            filteredResult.push(jsonvalue);
                            return false;
                        }
                        return true;
                    } else if (TagsValue.productCategory === selectedProdCategory.trim()) {
                        filteredResult.push(jsonvalue);
                        return false;
                    } else {
                        return true;
                    }
                })
            });
        }
        return getuniqueResults(filteredResult);
    }

    function searchSWLibrary() {
        var prodcatjson;
        if ($(swlifilterclass).find(ddselectid).find(optionlistvaluesclass)[0] !== undefined) {
            var appcatjson = $(swlifilterclass).find(ddselectid).find(optionlistvaluesclass)[0].value;
            if (!mindiAvailable) {
                prodcatjson = $(swlifilterclass).find(ddselectid).find(optionlistvaluesclass)[1].value;
            }
            getCategories(appcatjson, prodcatjson);
        }


        title = $(swlifilterclass).find('div#titleinput').children('div').children('input').val();
        var entities = allPages;
        if (entities) {
            if (title.trim()) {
                entities = OpenEndedfiltering(entities, title.trim());
            }
            if (categorylist.length > 0) {
                entities = filterBycategory(entities, categorylist);
            }

            if (prodcatlist.length > 0) {
                entities = filterByprodcategory(entities, prodcatlist);
            }
        }
        return entities;
    }

    function swlibsearchclick() {
        if ($(swlibTableClass).length > 0) {
            var refinedData = searchSWLibrary();
            $(swlibTableClass).dataTable().fnDestroy();
            if (refinedData !== null) {
                formatData4PagesTable(refinedData);
            }
        }
    }

    $(swlifilterclass).find('.eraseIcon').click((event) => {
        swlibsearchclick();
    });

    $(swlifilterclass).find('.reset-filter').click(() => {
        swlibsearchclick();
    });

     $(swlifilterclass).find('.reset-filter').keypress(() => {
            swlibsearchclick();
      });



    $(swlifilterclass).find('.left-elements').off('click').on('click', function() {
        filterSliderToggle();
    });
    var setfilters = () => {
        allPages = SWLibDataArray["allPages"];
    }
    var getSWLibData = () => {
        SWLibDataArray = $("#swpages").data("swlib-data");
        mindiAvailable = $("#swpages").data("mindi-cpn");

        if (SWLibDataArray) {
            sessionStorage.setItem(allTermsAndConditionstext, JSON.stringify(SWLibDataArray.allTermsAndConditions));
            setfilters();
            formatData4PagesTable(allPages);
        }
    }



    getSWLibData();

    $(swlifilterclass).find('div.optionList').children('div').children().on('click', function(event) {
        swlibsearchclick();
    });

    $(swlifilterclass).find('div#titleinput').children('div').children('input').on('keyup', function(e) {
        swlibsearchclick();
    });
    $(document).on('click', '.close-filter', function(event) {
        swlibsearchclick();
    });
    if ($('.swlib-landing').length > 0) {
        searchByURL();
    }
});
const maxResultCount= 500;
const resultIncrementSeed="50,150,500";
const hdnKeyword="#hdnKeyWord";
const hdnCategory="#hdnCategory";
const SearchRefine="#SearchRefine";
const searchVal=".mchp-searchbar-input";
const seachBarAutoCompleteContainer=".mchp-searchbar-suggestion"
const searchDataAttributes="#searchDataAttributes";
const allmchpContent="All Microchip Content";
const developmentTools="Development Tools";
const AllPartsVal="All";
const searchLower='/en-us/search';
const searchUpper='/en-us/Search';
const dropdownSearch='#mydropdown';
const currentBorder='current left-nav-active-border';
const fusionUrl=$(searchDataAttributes).data('fusionurl');
let crossReferenceURL=$(searchDataAttributes).data('crossreferenceurl');
const ProdDomain="https://www.microchip.com";
const datasheetRedirectBaseUrl="https://www.microchip.com/wwwproducts/productds/";
const autoSuggestionAPIEndpoint=$(searchDataAttributes).data('autosuggestfusionendpoint');
const searchResultsAPIEndpoint=$(searchDataAttributes).data('fusionendpoint');
let mdProductPageEndpoint=$(searchDataAttributes).data('mdproductpageendpoint');
const samplesEndpoint=$(searchDataAttributes).data('samplesendpoint');
const crossReferenceSearchAPIEndpoint=$(searchDataAttributes).data('crossreferencesearchapiendpoint');
const invalidCharacters = /[!@#$%^&*()+\=\[\]{};':"\|,.<>?]/;
const invalidCharactersReplace = /[!@#$%^&*()+\=\[\]{};':"\|,.<>?]/g;
const siteSearch = ".siteSearch";
const dataSheets = "Data Sheets";
const refManuals = "Reference Manuals";
const userGuide = "User Guides";
const appNotes = "Application Notes";
const productDocumentDiv = 'li.categoryListElement a.cList[aria-label="Product Documents"]';
const getProductStatusDetails = new Map([
                 ["0", ["New Device Entry", "#F68D2E"]],
                 ["1", ["Future Product", "#F68D2E"]],
                 ["2", ["Samples Available", "#F68D2E"]],
                 ["3", ["In Production", "#72C040"]],
                 ["4", ["Not Recommended for New Designs", "#DA291C"]],
                 ["5", ["End of Life", "#DA291C"]],
                 ["6", ["DOS", "#101820"]]
                 ]);
let FacetsTagDictionary="";
let previousSearchTerm="";
let fusionQueryId;
const APIRootPath=fusionUrl;
const autoSuggestionUrl=APIRootPath+autoSuggestionAPIEndpoint;
const searchResultsApi=APIRootPath+searchResultsAPIEndpoint;
let hideRefineSearch=false;
let urlQueryTerm;
let result;
let keysToFetch;
let specificValues;
const setSiteSearchAriaAttribute = (ariaValue) => {
    $(siteSearch).attr('aria-busy', ariaValue);
}

$(document).ready(function(){
   if($('.siteSearch').length>0 && $('.search-icon').length>0){
        document.querySelector('.search-icon').style.display = 'none';
         if(typeof mdProductPageEndpoint !== "undefined" && !mdProductPageEndpoint.endsWith("/")){
                mdProductPageEndpoint=mdProductPageEndpoint+"/"
         }
    }

    let maintainOriginalKey=false;
    const searchParams=new URLSearchParams(window.location.search)
    if(searchParams.get('searchQuery')!=null){

        urlQueryTerm=searchParams.get('searchQuery');
        if (window.location.href.indexOf(searchLower||searchUpper)>-1 && urlQueryTerm.length > 1) {

            if (/\S/.test(urlQueryTerm)) {
                if (invalidCharacters.test(urlQueryTerm)) {
                    urlQueryTerm = urlQueryTerm.replace(invalidCharactersReplace, "");
                }

            }

            $(hdnKeyword).val(urlQueryTerm);
            $(hdnCategory).val(searchParams.get('category'));

            let qString='&q='+urlQueryTerm;
            let FQ=searchParams.get('fq');

            if(FQ===null){
                FQ="start=0&rows=10";

            }

            let Category=searchParams.get('category');
            if(Category===null){
                Category="ALL";
            }
            const mos=searchParams.get('mos');

            if(mos!==null){

                maintainOriginalKey=true;
            }
            qString=qString+'&'+decodeURIComponent(FQ);

            $(searchVal).val(urlQueryTerm);
            let secondaryFacet=[];

            if((sessionStorage.getItem('sessionsecondaryStorage')!=null)){

                secondaryFacet=sessionStorage.getItem('sessionsecondaryStorage');
                sessionStorage.removeItem("sessionsecondaryStorage");
            }
            FetchFusionSearchResults(encodeURIComponent(qString),Category,secondaryFacet,maintainOriginalKey);

        }
        ShowHideCategory();
    }


    if(sessionStorage.getItem("term")!=null){
            setSiteSearchAriaAttribute(true);
			const term=sessionStorage.getItem("term");
        	sessionStorage.removeItem("term");
            const startIndex=0;
            const countReturn=10;

			getSearchResultFromAPI(term,allmchpContent,startIndex,countReturn,[],[],"")
			$(searchVal).val(term);

	}



});







function submitForm() {

	 let validSearchBarTerm="";
    const searchBarTerm = $('.mchp-searchbar-input').val();
    if($(seachBarAutoCompleteContainer)!==undefined && $(seachBarAutoCompleteContainer).length>0){
            $(seachBarAutoCompleteContainer).hide();
    }
    if (searchBarTerm.length > 1) {

        if (/\S/.test(searchBarTerm)) {

                if (searchBarTerm !== ""&&(previousSearchTerm!==searchBarTerm||$(hdnCategory).val()!==allmchpContent)) {
                    if (invalidCharacters.test(searchBarTerm)) {
                        validSearchBarTerm = searchBarTerm.replace(invalidCharactersReplace, "");

                        if (validSearchBarTerm !== "" && validSearchBarTerm.length > 1){

                                DisplayAllCategory(validSearchBarTerm);
                                previousSearchTerm=validSearchBarTerm;


                        }
                    }
                    else {


                           	 DisplayAllCategory(searchBarTerm);
                            previousSearchTerm=searchBarTerm;



                        }
                    }

                }

        }
    }

function SearchSubmitForm(category,searchTerm) {
    let validSearchBarTerm="";
    if($(seachBarAutoCompleteContainer)!== undefined && $(seachBarAutoCompleteContainer).length>0){
        $(seachBarAutoCompleteContainer).hide();
    }
    if (searchTerm!==undefined && searchTerm.length > 1) {
        if (/\S/.test(searchTerm)) {
            if (searchTerm !== "") {
                if (invalidCharacters.test(searchTerm)) {
                    validSearchBarTerm = searchTerm.replace(invalidCharactersReplace, "");
                    if (validSearchBarTerm !== "" && validSearchBarTerm.length > 1) {
                        DisplayCategory(validSearchBarTerm,category);
                    }
                } else {
                    DisplayCategory(searchTerm,category);
                }
            }
        }
    }
}

function DisplayCategory(keyword, category) {
	const secondaryFacet=[];
    const uncheckedfacets = [];
	var facets = [];
    const startIndex=0;
    const countReturn=10;
    const maintainOriginalKey=false;

    if (keyword === '' || keyword === undefined) {
        keyword = $(hdnKeyword).val();
    }
    else {
        $(hdnKeyword).val(keyword);
    }

    $(hdnCategory).val(category);

    setSiteSearchAriaAttribute(true);

    getSearchResultFromAPI(keyword, category, startIndex, countReturn, facets, uncheckedfacets, maintainOriginalKey);

	$(searchVal).val(keyword);

}

function DisplayAllCategory(keyword){
    const uncheckedfacets = [];
    const facets = [];
    const startIndex=0;
    const countReturn=10;
    var category=allmchpContent;
    const maintainOriginalKey=false;

    if (keyword === '' || keyword === undefined) {
        keyword = $(hdnKeyword).val();
    }
    else {
        $(hdnKeyword).val(keyword);
    }

    $(hdnCategory).val(category);
    setSiteSearchAriaAttribute(true);
    getSearchResultFromAPI(keyword,category,startIndex,countReturn,facets,uncheckedfacets,maintainOriginalKey)
    $(searchVal).val(keyword);
}


function RenderSearchResults(responseText,maintainOriginalKey){
    let rowscountafterFilter=0;
	let filteredResultscount=0;
    const width = (window.innerWidth > 0) ? window.innerWidth : screen.width;

    const renderedJson=responseText;
    const SearchresultsDiv= document.getElementById("SearchResults");
    SearchresultsDiv.innerHTML=" ";

    if (document.contains(document.getElementById("facetsDiv"))) {
        document.getElementById("clearAllFacet").remove();
         document.getElementById("facetsDiv").remove();

    }

    if(renderedJson.TotalResults === 0 && renderedJson.isMatchedCPN === false){


		const NoresultsDiv=document.createElement('div');
		NoresultsDiv.className='noresults';
		const crossReferenceAPI=crossReferenceSearchAPIEndpoint+$(searchVal).val();
		if(typeof typeof Granite === 'undefined' ||  typeof Granite.author === 'undefined'){
                     crossReferenceURL=crossReferenceURL.replace(".html","");

        }

                $.getJSON(crossReferenceAPI, function(data) {
                    if(data!=null || data !==undefined){
                     const microchipEqv=data.MicrochipEquivalents;
                        if(microchipEqv.length>0){
                            const destURL=crossReferenceURL+"?competitorPart="+$(searchVal).val();
                            window.location.href=destURL;
                        }
                        else{
							 $('#toggleLeftNav').hide();
                            $(SearchRefine).hide();
                            hideRefineSearch=true;

                            document.getElementById("SearchRefine").style.display="none";
                            NoresultsDiv.innerHTML='<h3>No items were found matching your search for <b>'+$(searchVal).val()+
                                                        '</b>. <a href="https://www.microchip.com/about-us/contact-us" target="_blank">Please contact us for any query.</a></h3>'+
                                                        '<div class="searchTipsDiv"><p style="padding-left: 25px;">Search Tips</p><ul style="list-style: none;line-height: 2;'+
                                                        'margin-top: -1em;padding-left: 25px;">'+'<li>Reduce the number of keywords used or use more general words.</li>'+
                                                        '<li>Try one of the keyword suggestions that are displayed as you type in the main search input and then use the filters to narrow the results.</li>'+
                                                        '<li>Start with something less specific - you can narrow your search results later.</li><li>Check for spelling mistakes or typos.</li></ul></div>';

                            SearchresultsDiv.appendChild(NoresultsDiv);
                        }
                    }
                });



    } else {

        if (hideRefineSearch) {

            if(width>975){
				$("#toggleLeftNavAnchor").text("Hide Filters");
				$('#toggleLeftNav').show();
            }

			$(SearchRefine).show();
            hideRefineSearch=false;

        }

        const listviewDiv=document.createElement('div');
    	listviewDiv.className='listview';
    	listviewDiv.innerHTML=" ";


        if (renderedJson.Category.toLowerCase() === "product and development tools"){
            renderFusionFacets(renderedJson);
        }

        if(renderedJson.Category.toLowerCase() === "all") {
			result = fetchKeyValues(renderedJson, "Doc_Type_s");
            keysToFetch = [dataSheets, "Errata", refManuals, userGuide, appNotes];
       	    specificValues = fetchSpecificValues(renderedJson, "doc_sub_type_s", keysToFetch);
            fetchCountValues();

        } else {
                const searchkeyword=renderedJson.SearchTerm;
                const queryString="&q="+searchkeyword+"&start=0&rows=0";

                    $.ajax({

                url: APIRootPath + searchResultsAPIEndpoint + encodeURIComponent(queryString) + "&category=ALL&maintainOriginalKey=false",
                type: "GET",
                dataType:'json',
                async: true,
                success: function (responseTxt) {
                    result = fetchKeyValues(responseTxt, "Doc_Type_s");
                    keysToFetch = [dataSheets, "Errata", refManuals, userGuide, appNotes];
                    specificValues = fetchSpecificValues(responseTxt, "doc_sub_type_s", keysToFetch);
                    fetchCountValues();

                }
            });
       	 }

    const resultCount=document.createElement('div');
        resultCount.className='resultCount';
        resultCount.innerHTML="";
        resultCount.innerHTML=resultCount.innerHTML+'<span id="resultcountnumbers">'
                                +renderedJson.TotalResults+' results |  Search Results for '+ '"<span style="color:#1c355e;font-weight: 600;">'+renderedJson.SearchTerm+'</span>" </span>';
		SearchresultsDiv.appendChild(resultCount);
  var SearchResults = document.getElementById('SearchResults');
        var div = document.createElement('div');
        SearchResults.insertBefore(div, SearchResults.secondChild);
        div.className='miniPage';
        const searchTerm=renderedJson.SearchTerm;

		removeCurrentSelectorFromCategory();

        //Displays Chip icon on Select of Category
        if (renderedJson.Category.toLowerCase() !== "ALL".toLowerCase())
        {
                resultCount.innerHTML=resultCount.innerHTML+'<span class="ResultChip"><label style="font-weight:700" id="lblResultText"></label></span>';

                const myCategory =renderedJson.Category;

                let split_Category = myCategory;
                if (myCategory.indexOf('|') >= 0) {
                    split_Category = myCategory.split("|")[1];
                    $("a.subList:contains('"+split_Category+"')").addClass(currentBorder).siblings('span').addClass("current");
                }
                if (myCategory.toLocaleLowerCase() === 'product and development tools'){
                    split_Category = 'Products';
                     $("a.cList:contains('Products')").addClass(currentBorder).siblings('span').addClass("current");
                }
                else{
        			$("a.cList:contains('"+myCategory+"')").addClass(currentBorder).siblings('span').addClass("current");
                }

                document.getElementById('lblResultText').innerHTML = split_Category;


        }
        else {
                    resultCount.innerHTML=resultCount.innerHTML+'<span class="ResultChip"><label style="font-weight:700" id="lblResultText"></label></span>';
                    const split_Category = 'All Content';
                	$("a.cList:contains('All Microchip Content')");
                    document.getElementById('lblResultText').innerHTML = split_Category;
                }


        if(renderedJson.OriginalSearchTerm !== renderedJson.SearchTerm){
            const p=document.createElement("p");
            p.innerHTML='Showing results for <b>"'+renderedJson.SearchTerm+'"</b>.Search instead for <b><i><a class="SearchSuggestion" '+
            'onclick="SearchSuggestion($(this).html())">"'+renderedJson.OriginalSearchTerm+'"</a></i><b>.';
            SearchresultsDiv.appendChild(p);


    	}

       if (window.matchMedia("(min-width: @{screen-lg-min})").matches) {
               swapElements('resultcountnumbers', 'ResultChip');
       }
        if (window.matchMedia("(max-width:1024px)").matches) {
        var contentElement = document.getElementById('resultcountnumbers');
    contentElement.innerHTML += '<br>';
        }
        const results=renderedJson.products;

        for(var i=0;i<results.length;i++){
            if(i===0 && results[i]["Doc_Type"]==="Device" && renderedJson.Category.toLowerCase() === "all"){
                MiniProductPage(div,searchTerm,results[i]);
                continue;
            }
            else {
				 $('div.miniPage:empty').hide();
            }
            fusionQueryId=results[i]["FusionQueryID"];

            if(results[i]["ProductGroupText"]!==""){

                rowscountafterFilter++;



                const rowDiv=document.createElement('div');
                rowDiv.className='row'
                rowDiv.innerHTML=" ";

                if(results[i]["isProduct"]){


                    let imageURL=ProdDomain+results[i]["ImageURL"];
                    if((results[i]["ProductGroup"]) === developmentTools){

                        imageURL="https:"+results[i]["ImageURL"];

                     }
                    rowDiv.innerHTML= rowDiv.innerHTML+`<div class="productImage" ><img style="width:auto;" class="pimage" src="${imageURL}"
                    onerror='this.onerror=null;this.src="https://www.microchip.com/sitesearch/images/photo-not-available.jpg";'></div>`;
                }

                const productSummary=document.createElement('div');
                productSummary.className='productSummary';
                const resultsDiv=document.createElement('div');
                resultsDiv.className='result';

                if((results[i]["SecureGating"]).length > 1){

                    productSummary.innerHTML=productSummary.innerHTML+'<div class="specifications" isnewproduct="'+isNewProduct(results[i]["ProductDoc"].wwwreleasedate_s)+'"><h4><a target="_blank" class="anchorTags" href='
                    +encodeURI(results[i]["DocumentLink"])+'><span class="word-break">'+results[i]["ProductGroupText"]+
                    '</span></a><i class="fas fa-lock" aria-hidden="true"></i><br/>';
                }else{

                    productSummary.innerHTML=productSummary.innerHTML+'<div class="specifications" isnewproduct="'+isNewProduct(results[i]["ProductDoc"].wwwreleasedate_s)+'"><h4><a class="anchorTags" target="_blank" href='
                    +encodeURI(results[i]["DocumentLink"])+'>'
                    +results[i]["ProductGroupText"]+'</h4></a></div>';
                }
                const pStatusDetails = document.createElement('div');
                pStatusDetails.className='pStatusDetails';
                if(results[i]["ProductDoc"].ProductStatus_s){
                 const pStatusID = getProductStatusDetails.get(results[i]["ProductDoc"].ProductStatus_s);
                 pStatusDetails.innerHTML = '<p class="pStatusDescription"><i class="fa-solid fa-circle pStatusColor" style="color:' + pStatusID[1] + '"></i> <b>Status: </b>' + pStatusID[0] + '</p>'
                 }

                const pdescription=document.createElement('p');
                pdescription.className='pdescription';
                pdescription.innerHTML=" ";

                const descriptionText=results[i]["DeviceSummary"].replace(/(\r\n|\n|\r)/gm, "");
                pdescription.innerHTML=pdescription.innerHTML+descriptionText;



                const commercial=document.createElement('p');
                commercial.className='commercial';

                if(results[i]["isWebPurchaseable"]) {
                    const BuyAnchor=document.createElement('a');
                    BuyAnchor.className="AnchorClass Buy";
                    BuyAnchor.setAttribute("target","_blank");
                    BuyAnchor.setAttribute("href",mdProductPageEndpoint+results[i]["CPN"]);
                    BuyAnchor.onclick=function(){
                        SubmitSignals('purchase_intent',$(searchVal).val(),this.href,fusionQueryId);
                    };
                    BuyAnchor.innerHTML='<i style="padding:10px;padding-left:0;font-weight:400;" class="fa-light fa-cart-shopping"></i>Buy';
                    commercial.appendChild(BuyAnchor);

                }
                if (results[i]["Sample"] === 'sample'){
                    const BuyAnchor=document.createElement('a');
                    BuyAnchor.className="AnchorClass";
                    BuyAnchor.setAttribute("target","_blank");
                    BuyAnchor.setAttribute("href",samplesEndpoint+results[i]["CPN"]);
                    BuyAnchor.onclick=function(){
                        SubmitSignals('dev_click',$(searchVal).val(),this.href,fusionQueryId);
                    };
                    BuyAnchor.innerHTML='<i style="padding:10px;padding-left:0;" class="fas fa-vial"></i>Samples';
                    commercial.appendChild(BuyAnchor);
                }
                if(results[i]["Doc_Type"].toLowerCase()==='device' && results[i]["ProductGroup"]!==developmentTools){
                    const BuyAnchor=document.createElement('a');
                    BuyAnchor.className="AnchorClass";
                    BuyAnchor.setAttribute("target","_blank");
                    BuyAnchor.setAttribute("href",datasheetRedirectBaseUrl+results[i]["CPN"]);
                    BuyAnchor.onclick=function(){
                        SubmitSignals('dev_click',$(searchVal).val(),this.href,fusionQueryId);
                    };
                    BuyAnchor.innerHTML='<i style="padding:10px;padding-left:0;" class="far fa-download"></i>Datasheet';
                    commercial.appendChild(BuyAnchor);
                }
				productSummary.appendChild(pStatusDetails);
                productSummary.appendChild(pdescription);
                productSummary.appendChild(commercial);
                rowDiv.appendChild(productSummary);
                resultsDiv.appendChild(rowDiv);
                listviewDiv.appendChild(resultsDiv);
                SearchresultsDiv.appendChild(listviewDiv);

            }else{
				filteredResultscount++;
            }


     }
        $("[isnewproduct='true']").each(function () {
                    $(this).find("h4").append('<sup class="newProductLabel">NEW</sup>');
                 });
        if(filteredResultscount>0){
        	document.getElementById('resultcountnumbers').innerHTML= (renderedJson.TotalResults-filteredResultscount)+' results | Search Results for '+ '"<span style="color:#1c355e;font-weight: 600;">'+renderedJson.SearchTerm+'</span>"';
        }
     if (renderedJson.TotalResults > renderedJson.Rows && renderedJson.Rows < maxResultCount){
        const bottomPager=document.createElement('div');
        bottomPager.className='align-center';
        bottomPager.setAttribute("id","bottomPager");
        bottomPager.innerHTML='<button onclick="javascript: Loadmoreresults('
            +renderedJson.Rows+','+renderedJson.TotalResults+');" class="mchp-button-regular solid btnLoadMore" type="button"><span>Load More</span></button>';
        SearchresultsDiv.appendChild(bottomPager);

    }
    if (renderedJson.TotalResults > 5){
        const divBottomResultsLoader=document.createElement('div');
        divBottomResultsLoader.setAttribute("style","float:right");
        divBottomResultsLoader.setAttribute("id","divBottomResultsLoader");
        divBottomResultsLoader.innerHTML='<a href="#"><i class="fas fa-chevron-up" ></i> Back to Top</a>';
        SearchresultsDiv.appendChild(divBottomResultsLoader);
    }
    }
	var refresh = window.location.protocol + "//" + window.location.host + window.location.pathname + '?searchQuery='+responseText.OriginalSearchTerm+'&category='
                    +responseText.Category+'&fq='+encodeURIComponent(responseText.FacetURL);
    if(maintainOriginalKey&&responseText.TotalResults===0){

         refresh=refresh+'&mos='+true;

    }
    window.history.replaceState({ path: refresh }, '', refresh);



}
function swapElements(element1Id, element2Id) {
  const element1 = document.getElementById(element1Id);
  const element2 = document.getElementsByClassName(element2Id)[0];

  if (element1 && element2) {
    const parent = element1.parentNode;
    const clonedElement1 = element1.cloneNode(true);
    parent.insertBefore(clonedElement1, element2);
    parent.replaceChild(element2, element1);
  }
}


function MiniProductPage(SearchresultsDiv,searchTerm,response) {


        const miniDiv=document.createElement('div');
        miniDiv.className='miniDiv';
        const listviewDiv=document.createElement('div');
        listviewDiv.className='minilistview';
        listviewDiv.innerHTML=" ";
        const resultDiv=document.createElement('div');
        resultDiv.className='miniPgResult';
        const rowDiv=document.createElement('div');
        rowDiv.className='row'
        rowDiv.innerHTML=" ";
        const SecureGating="SecureGating";
        const DocumentLink = "DocumentLink";



                let imageURL=ProdDomain+response["ImageURL"];
                if((response["ProductGroup"]) === developmentTools){
                    imageURL="https:"+response["ImageURL"];

                }
                rowDiv.innerHTML= rowDiv.innerHTML+`<div class="productImg" ><img style="width:auto;" class="pImg" src="${imageURL}"
                onerror='this.onerror=null;this.src="https://www.microchip.com/sitesearch/images/photo-not-available.jpg";'></div>`;

            const prodSummary=document.createElement('div');
            prodSummary.className='prodSummary';
            if((response[SecureGating]).length > 1){

                prodSummary.innerHTML=prodSummary.innerHTML+'<div class="links" isnewproduct="'+isNewProduct(response["ProductDoc"].wwwreleasedate_s)+'"><h4><a target="_blank" class="anchorTags" href='
                +encodeURI(response[DocumentLink])+'><span class="word-break">'+response["ProductGroupText"]+
                '</span></a><i class="fas fa-lock" aria-hidden="true"></i><br/>';

            }else{

                prodSummary.innerHTML=prodSummary.innerHTML+'<div class="links" isnewproduct="'+isNewProduct(response["ProductDoc"].wwwreleasedate_s)+'"><h4><a class="anchorTags" target="_blank" href='
                +encodeURI(response[DocumentLink])+'>'
                +response["ProductGroupText"]+'</h4></a></div>';
            }
    const pStatusDetails = document.createElement('div');
            pStatusDetails.className='pStatusDetails';
            if(response["ProductDoc"].ProductStatus_s){
                 const pStatusID = getProductStatusDetails.get(response["ProductDoc"].ProductStatus_s);
                 pStatusDetails.innerHTML = '<p class="pStatusDescription"><i class="fa-solid fa-circle pStatusColor" style="color:' + pStatusID[1] + '"></i> <b>Status: </b>' + pStatusID[0] + '</p>'
            }
            const pdescription=document.createElement('p');
            pdescription.className='pdescription';
            pdescription.innerHTML=" ";

            const descText=response["DeviceSummary"].replace(/(\r\n|\n|\r)/gm, "");
            pdescription.innerHTML=pdescription.innerHTML+descText;

            const commercialLinks=document.createElement('p');
            commercialLinks.className='commercialLinks';
            if(response["isWebPurchaseable"]) {
                const Buy=document.createElement('a');
                Buy.className="AnchorClass Buy";
                Buy.setAttribute("target","_blank");
                Buy.setAttribute("href",mdProductPageEndpoint+response["CPN"]);
                Buy.onclick=function(){
                    SubmitSignals('purchase_intent',$(searchVal).val(),this.href,fusionQueryId);
                };
                Buy.innerHTML='<i style="padding:10px;padding-left:0;font-weight:400;" class="fa-light fa-cart-shopping"></i>Buy';
                commercialLinks.appendChild(Buy);
            }
            if (response["Sample"] === 'sample'){
                const Buy=document.createElement('a');
                Buy.className="AnchorClass";
                Buy.setAttribute("target","_blank");
                Buy.setAttribute("href",samplesEndpoint+response["CPN"]);
                Buy.onclick=function(){
                    SubmitSignals('dev_click',$(searchVal).val(),this.href,fusionQueryId);
                };
                Buy.innerHTML='<i style="padding:10px;padding-left:0;" class="fas fa-vial"></i>Samples';
                commercialLinks.appendChild(Buy);
            }
            if(response["Doc_Type"].toLowerCase()==='device' && response["ProductGroup"]!==developmentTools){
                const Buy=document.createElement('a');
                Buy.className="AnchorClass";
                Buy.setAttribute("target","_blank");
                Buy.setAttribute("href",datasheetRedirectBaseUrl+response["CPN"]);
                Buy.onclick=function(){
                    SubmitSignals('dev_click',$(searchVal).val(),this.href,fusionQueryId);
                };
                Buy.innerHTML='<i style="padding:10px;padding-left:0;" class="far fa-download"></i>Datasheet';
                commercialLinks.appendChild(Buy);
            }
  			prodSummary.appendChild(pStatusDetails);
            prodSummary.appendChild(pdescription);
            prodSummary.appendChild(commercialLinks);
            rowDiv.appendChild(prodSummary);
            resultDiv.appendChild(rowDiv);
            listviewDiv.appendChild(resultDiv);
            SearchresultsDiv.appendChild(listviewDiv);
}

function Loadmoreresults(currentResultCount, totalResultCount) {

    var resultIncrementSeedArray = resultIncrementSeed.split(",");
    var nextResultCount = maxResultCount;
    for (let  i = 0; i < resultIncrementSeedArray.length; i++) {
        if (resultIncrementSeedArray[i] > currentResultCount) {
            nextResultCount = resultIncrementSeedArray[i];
            break;
        }
    }
    if (nextResultCount > totalResultCount){
        nextResultCount = totalResultCount;
    }
    else if(nextResultCount > maxResultCount){
        nextResultCount = maxResultCount;
    }
    RunFacetsWithPaging(0, nextResultCount);

}


function RunFacetsWithPaging(startindex, count) {

    RunSecondaryCategoryFacetValues('#searchresult');
    const startIndex = startindex;
    const countReturn = count;
    callAjaxForFacet(secondaryFacet,startIndex,countReturn);

}


function SearchSuggestion(keyword){
    const uncheckedfacets = [];
    const facets = [];
    const startIndex=0;
    const countReturn=10;
    const invalidCharactersExp=/[^A-Za-z0-9\.\,_]/g;
    const maintainOriginalKey=true;

    keyword=keyword.replace(invalidCharactersExp,"");
    $(hdnKeyword).val(keyword);
	const category=allmchpContent;
    $(hdnCategory).val(category);
    setSiteSearchAriaAttribute(true);
    getSearchResultFromAPI(keyword,category,startIndex,countReturn,facets,uncheckedfacets,maintainOriginalKey)
    $(searchVal).val(keyword);
}


function getSearchResultFromAPI(keyword,category,startIndex,countReturn,facets,uncheckedfacets,maintainOriginalKey=false){
	let sb="";
    if(keyword!=null){
		sb=sb+"&q=";
		sb=sb+keyword;
    }

    if((facets!==null||facets!==undefined)&& facets.length>0){

        sb=sb+"&facet=on";
        sb=sb+"&facet=true";
        for(const i in facets){

			const object=facets[i];
            const facetKey=object.key;
            const facetValue=object.value;


            if(facetKey === "Category1_ss"){
					sb=sb+"&fq=";
                    sb=sb+"{!tag=";
                    sb=sb+"AA";
                    sb=sb+"}";
                    sb=sb+facetKey;
                    sb=sb+":";
                    sb=sb+encodeURIComponent(facetValue);
                    sb=sb+"&facet.field=";
                    sb=sb+facetKey;
			}
            else{
                	sb=sb+("&fq=");
                    sb=sb+("{!tag=");
                    sb=sb+(FacetsTagDictionary.get(facetKey));
                    sb=sb+("}");
                    sb=sb+(facetKey);
                    sb=sb+(":");
                    sb=sb+encodeURIComponent(facetValue);
                    sb=sb+("&facet.field=");
                    sb=sb+(facetKey);



            }


        }


    }

    if (countReturn > 0)
    {
        sb=sb+"&start=";
        sb=sb+startIndex;
        sb=sb+"&rows=";
        sb=sb+countReturn;
    }
    const queryString=encodeURIComponent(sb);


    if(category === "Products"){
		category="Product and Development Tools";

    }else if(category === allmchpContent){

		category="ALL";
	 }
    category=encodeURIComponent(category);
    FetchFusionSearchResults(queryString,category,facets,maintainOriginalKey)
}

function FetchFusionSearchResults(queryString,category,facets,maintainOriginalKey){

	$.ajax({

        url: searchResultsApi + queryString + '&category=' + category + '&maintainOriginalKey=' + maintainOriginalKey,
        type: "GET",
        dataType:'json',
        async: true,
        success: function (responseText) {
            $(dropdownSearch).html('');
            if(FacetsTagDictionary === ""){
                FacetsTagDictionary = new Map();
                for (var value in responseText.FacetFieldTagDictionary) {
                    FacetsTagDictionary.set(value, responseText.FacetFieldTagDictionary[value])
                }
            }
            validateReturnedResults(queryString, responseText, facets, maintainOriginalKey);
            if (typeof responseText !== "undefined") {
                captureSearchData(responseText);
            }
        },
        error: function(){
            setSiteSearchAriaAttribute(false);
        }

   });
}

function validateReturnedResults(queryString,responseText,facets,maintainOriginalKey){
    let rowfilter=0;

    for(var i=0;i<(responseText.products).length;i++){

        if(responseText.products[i]["ProductGroupText"]===""){

            rowfilter++;
        }

    }

    if((responseText.TotalResults === 0)||(responseText.TotalResults===rowfilter)){

        if((decodeURIComponent(responseText.Category)).includes("|")){
            FetchFusionSearchResults(queryString,encodeURIComponent("Product Documents"));
        }
        else if(responseText.Category.toLowerCase()!==AllPartsVal.toLowerCase()){
            FetchFusionSearchResults(queryString,AllPartsVal);
        }
        else{
            RenderSearchResults(responseText,maintainOriginalKey);

            setSiteSearchAriaAttribute(false);

            if(facets!==undefined && facets.length>0){
                ShowHideCategory();
            }
        }

    } else {

        RenderSearchResults(responseText,maintainOriginalKey);
        setSiteSearchAriaAttribute(false);

        if(facets!==undefined && facets.length>0){
            ShowHideCategory();
        }
    }
}

function readMore(string,maxWords){
    const strippedString=$("<p>"+string+"</p>").text().trim();
    const array=strippedString.split(" ");
    const wordCount=array.length;
    string=array.splice(0,maxWords).join(" ");
    if(wordCount>maxWords){
		string+="...";
    }
    return string;
}

function toggleLeftNav(){

    const leftNavContainer = $(SearchRefine);
    const toggleLeftNavAnchor = $("#toggleLeftNavAnchor");
    const chevronSpan=$("#chevronSpan");
     leftNavContainer.toggle(function(){
         var txt = leftNavContainer.is(':visible') ? 'Hide Filters':'Show Filters';
         toggleLeftNavAnchor.text(txt);
        if(leftNavContainer.is(':visible')){
             chevronSpan.removeClass("fa-chevron-right").addClass("fa-chevron-left");

        }else{
             chevronSpan.removeClass("fa-chevron-left").addClass("fa-chevron-right");
        }
     });

}
function isNewProduct(givenDate){
    const givenDateObject = new Date(givenDate);
    const currentDate = new Date();
    const timeDifference = currentDate - givenDateObject;
    const daysDifference = timeDifference / (1000 * 60 * 60 * 24);
    return daysDifference < 365;
}

//removing "current" selector from Left Navigstion Link
function removeCurrentSelectorFromCategory(){
    if($('.cList').hasClass(currentBorder) || $('.cList').hasClass('current')){
		 $('.cList').removeClass(currentBorder).removeClass('current');
    	 $('.cList').siblings('span').removeClass('current');

	}
	if($('.subList').hasClass(currentBorder) || $('.subList').hasClass('current')){
		 $('.subList').removeClass(currentBorder).removeClass('current');
         $('.subList').siblings('span').removeClass('current');
	}
}
function fetchCountValues(){
     //To access the count values for left nav
var deviceValue = result.deviceValue;
var applicationCenterValue = result.applicationCenterValue;
var documentValue = result.documentValue;
var pcnValue = result.pcnValue;
var corporateInfoValue = result.corporateInfoValue;
var refDesValue = result.refDesValue;
var applicationNotesValue = specificValues[appNotes];
			if(deviceValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Products"]').parent().children("span")[0].innerText='('+deviceValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Products"]').parent().children("span")[0].innerText='(0)';
            }

            if(applicationCenterValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Application Center"]').parent().children("span")[0].innerText='('+applicationCenterValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Application Center"]').parent().children("span")[0].innerText='(0)';
            }

            if(documentValue!==undefined) {
                if(applicationNotesValue !==undefined){
			$(productDocumentDiv).parent().children("span")[0].innerText='('+(documentValue-applicationNotesValue)+')';
                } else {
			$(productDocumentDiv).parent().children("span")[0].innerText='('+(documentValue)+')';
                }
            }else {
				$(productDocumentDiv).parent().children("span")[0].innerText='(0)';
            }

            if(pcnValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Product Change Notification"]').parent().children("span")[0].innerText='('+pcnValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Product Change Notification"]').parent().children("span")[0].innerText='(0)';
            }

			if(corporateInfoValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Corporate Information"]').parent().children("span")[0].innerText='('+corporateInfoValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Corporate Information"]').parent().children("span")[0].innerText='(0)';
            }

            if(refDesValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Reference Design"]').parent().children("span")[0].innerText='('+refDesValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Reference Design"]').parent().children("span")[0].innerText='(0)';
            }

        // To access values for specific keys
        var dataSheetsValue = specificValues[dataSheets];
        var errataValue = specificValues["Errata"];
        var referenceManualsValue = specificValues[refManuals];
        var userGuidesValue = specificValues[userGuide];

             if(dataSheetsValue!==undefined) {
			$('li.leftNavList a.subList[aria-label="Data Sheets"]').parent().children("span")[0].innerText='('+dataSheetsValue+')';
            } else {
				$('li.leftNavList a.subList[aria-label="Data Sheets"]').parent().children("span")[0].innerText='(0)';
            }
             if(errataValue!==undefined) {
			$('li.leftNavList a.subList[aria-label="Errata"]').parent().children("span")[0].innerText='('+errataValue+')';
            } else {
				$('li.leftNavList a.subList[aria-label="Errata"]').parent().children("span")[0].innerText='(0)';
            }
             if(referenceManualsValue!==undefined) {
			$('li.leftNavList a.subList[aria-label="Reference Manuals"]').parent().children("span")[0].innerText='('+referenceManualsValue+')';
            } else {
				$('li.leftNavList a.subList[aria-label="Reference Manuals"]').parent().children("span")[0].innerText='(0)';
            }
             if(userGuidesValue!==undefined) {
			$('li.leftNavList a.subList[aria-label="User Guides"]').parent().children("span")[0].innerText='('+userGuidesValue+')';
            } else {
				$('li.leftNavList a.subList[aria-label="User Guides"]').parent().children("span")[0].innerText='(0)';
            }

            if(applicationNotesValue!==undefined) {
			$('li.categoryListElement a.cList[aria-label="Application Notes"]').parent().children("span")[0].innerText='('+applicationNotesValue+')';
            } else {
				$('li.categoryListElement a.cList[aria-label="Application Notes"]').parent().children("span")[0].innerText='(0)';
            }
}
const SignalsAPIEndpoint = "/sitesearch/api/SearchAPI/SubmitSignalstoFusion";

$(document).on('click', '.anchorTags', function(e) {

    SubmitSignals('dev_click',$('.searchdropdown').val(),this.href,fusionQueryId);

});

$(document).on('click', '.info', function(e) {

	SubmitSignals('dev_click',$('.searchdropdown').val(),this.href,fusionQueryId);

});


function pad(number) {
    if (number < 10) {
        return '0' + number;
    }
    return number;
}

function getLocalHours() {
    const d = new Date();
    return d.getHours()
}

function getDateISO() {
    const date = new Date(Date.now());
    return date.getUTCFullYear() +
        '-' + pad(date.getUTCMonth() + 1) +
        '-' + pad(date.getUTCDate()) +
        'T' + pad(date.getUTCHours()) +
        ':' + pad(date.getUTCMinutes()) +
        ':' + pad(date.getUTCSeconds()) +
        '.' + (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
        'Z';
}

function getLocalDow() {
    const weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    return weekday[new Date().getDay()]
}

function SubmitSignals(signalType, searchTerm, docURL, fusionQueryId) {

    const signalsEndpoint = APIRootPath + SignalsAPIEndpoint;
    if(location.host==="www.microchip.com"&&signalType==="dev_click"){
        signalType="click";

    }
    const timestamp = getDateISO();
    const hours = getLocalHours();
    const dow = getLocalDow();
    let sessionID=''; 
    let genUserCookie = '';
    if (getCookie('asdfdiuglkjhrsu') !== null && getCookie('asdfdiuglkjhrsu') !== '') {
        genUserCookie = getCookie('asdfdiuglkjhrsu');

    }
    if (getCookie('myMCHPVid') !== null && getCookie('myMCHPVid') !== '') {
        sessionID = getCookie('myMCHPVid');
    }
        
    const payload = [
        {
            "type": signalType,
            "timestamp": timestamp,
            "params": {
                "fusionQueryId": fusionQueryId, // This is the fusion query-id returned when a request is sent to fusion.
                "date_year": timestamp,
                "date_month": timestamp,
                "date_day": timestamp,
                "hour_of_day": hours,
                "day_of_week": dow,
                "flag": "event",                
                "docId": docURL , // This is field that will be aggregated on the signals aggreation job. URl for this case.
                "url": docURL,
                "query": searchTerm,
                "query_orig_s": searchTerm,
                "query_t": searchTerm,
                "count": 1,
                "userId": genUserCookie,
                "sessionId": sessionID,                              
            }
    }];

   
    $.ajax({
        type: "POST",
        url: signalsEndpoint,
        data: JSON.stringify(payload),
        contentType: 'application/json; charset=utf-8',
        success: function(responseData, textStatus, jqXHR) {
            //signals posted to Fusion
        },
        error: function (responseData, textStatus, errorThrown) {
            //error has occured
        }
    });


}



let secondaryFacet = [];
let secondaryFacetUnchecked = [];
const chevUp='fas fa-chevron-up';
const chevDown='fas fa-chevron-down';
const searchResultDiv='#searchresult';
const Category2=".Category2";
const Category3=".Category3";
const Category4=".Category4";
const ncFacetChecked='.nc-facet:checked';
const inputCheck="input:checked";
const mediaQuery = window.matchMedia('(max-width: 975px)');
const categoryListDiv = document.getElementsByClassName("categoryList")[0];
const leftNavFilterResults = $('.leftNavFilterResults');
const leftNavUnderlay = $('.leftNav-underlay');
const subCategoryDiv = $('#subCategoryDiv');
let leftNavigationTitle;
let facetsLabel;
const categoryContainer=document.getElementsByClassName("navContainer")[0];
const docEle=document.querySelector('[aria-label="Product Documents"]');

$(document).ready(function(){

const searchParams=new URLSearchParams(window.location.search);
const validTerms = [
  'Product Documents',
  'Product Documents|Data Sheets',
  'Product Documents|Errata',
  'Product Documents|Reference Manuals',
  'Product Documents|User Guides'
];

    if(searchParams.get('searchQuery')!=null){
    const urlQueryTerm=searchParams.get('category');

        if(validTerms.includes(urlQueryTerm)){
			subCategoryDiv.css('display', 'block');
        } else {
			subCategoryDiv.css('display', 'none');

        }
    }

    if(document.getElementById("hiddenleftNavTitle")!==null){
    	 leftNavigationTitle= document.getElementById("hiddenleftNavTitle").innerHTML;

    }
    if($('.siteSearch').length>0){

		mediaQuery.addEventListener('change',handleTabletChange);
        handleTabletChange(mediaQuery);
        handleleftNavTitle(mediaQuery);
        getSearchFacets();
    }


if(docEle!==undefined && docEle){
     docEle.addEventListener('click', function(event) {


       subCategoryDiv.css('display', 'block');
	   event.stopPropagation();
    });

    $('.cList').on('click', function () {
    subCategoryDiv.hide();
});


    subCategoryDiv.click(function (event) {
        event.stopPropagation();
    });
}

    $('.cList').click(function() {
        var searchValue = $(searchVal).val();
         if (searchValue>=1) {

            SearchSubmitForm($(this).text(),searchValue);
            slideContainer();
         }
        else {
			var clistClass=$('.cList');
			clistClass.removeClass('current left-nav-active-border');
            clistClass.siblings('span').removeClass('current');
            SearchSubmitForm($(this).text(),searchValue);
            slideContainer();
        }

    });

    $('.subList').click(function() {
        var subSearchValue = $(searchVal).val();

        const subCat = $(this).parents('.subCategoryContainer').siblings('.cList').text() + "|" + $(this).text();
        if (subSearchValue>=1) {

        SearchSubmitForm(subCat,subSearchValue);
        slideContainer();

        }
        else {
			var clistClass=$('.subList');
			clistClass.removeClass('current left-nav-active-border');
            clistClass.siblings('span').removeClass('current');
            SearchSubmitForm(subCat,subSearchValue);
        	slideContainer();
        }

    });


    $(searchResultDiv).delegate(".nc-facet", "click", function () {

        const startIndex = 0;
        const countReturn=10;
        ClearOtherCategoryFacets()
        RunSecondaryCategoryFacetValues(searchResultDiv);

        setSiteSearchAriaAttribute(true);
        callAjaxForFacet(secondaryFacet,startIndex,countReturn);
        slideContainer();

    });
    $(document).on('click', '.leftNavFilterCloseBtn, .leftNavbtn', function (event) {

        slideContainer();

    });




});



function  handleleftNavTitle(e){

    if(!e.matches){

		document.getElementsByClassName("leftNavTitle")[0].innerHTML=leftNavigationTitle;

    }


}

function handleTabletChange(e) {

  // Check if the media query is true
  var txt = $("#SearchRefine").is(':visible') ? 'Hide Filters':'Show Filters';
  $("#toggleLeftNavAnchor").text(txt);

  if (e.matches) {

    changeH3_tobtn();
	categoryContainer.style.display="none";
	leftNavUnderlay.hide();
    document.getElementById("toggleLeftNav").style.display="none";
      if(document.getElementById("SearchRefine").style.display==="none"&&!hideRefineSearch){
		document.getElementById("SearchRefine").style.display="block";
      }

  }
  else{
	changebtn_toH3()
    categoryContainer.style.display="block";
    leftNavFilterResults.hide();
    if(!hideRefineSearch){
        document.getElementById("toggleLeftNav").style.display="block";
    }
  }
}

//render Fusion Facets from returned JSON
function renderFusionFacets(renderedJson){

    let catId=0;
    const AllPartsValue="PRODUCT AND DEVELOPMENT TOOLS";
    const facetsDiv=document.createElement('div');
    facetsDiv.innerHtML="";
    facetsDiv.setAttribute("id",'facetsDiv');

    const ClearAllFacet=document.createElement('div');
    ClearAllFacet.setAttribute("id",'clearAllFacet');
    ClearAllFacet.className="col-xs-121";
    ClearAllFacet.innerHTML='<div class="chip-icon">Selected Filters<a href="javascript:void(0);" onclick="ClearAllFacets(true);" style="float:right;">Clear All</a></div>';
    categoryListDiv.appendChild(ClearAllFacet);

    const uniqueFacetList=renderedJson.UniqueFacetFields;
    const facetObjectList=renderedJson.FacetFieldsList;

    for( const i in uniqueFacetList){

        const fbo=facetObjectList.find(facetObject =>facetObject['FusionName'] === uniqueFacetList[i]);
        const fusionName=fbo.FusionName;

        const JsonCategory=renderedJson.Category;
        const JsonFacetURL=renderedJson.FacetURL;

        if(fusionName.includes("Category")&&( JsonCategory.toLocaleLowerCase() === AllPartsValue.toLocaleLowerCase() || (JsonFacetURL.toLocaleLowerCase().includes("facet=on")))){


            catId=catId+1;
            const conditionforfacets=((fbo.FacetKeyValues).lenth === 1 && (fbo.FacetKeyValues).filter(c=>c.Key.toString().toLowerCase().includes("other")).length === 1)
            const isFacetValueEmpty = ((fbo.FacetKeyValues).length === 0 || conditionforfacets) ? true : false;

            if(!isFacetValueEmpty){

                const FacetsDiv=document.createElement('div');

                FacetsDiv.className=(catId>1 ? ["Category",catId," hide"].join(''):["Category",catId].join(''));

                const heading=document.createElement('h4');
                heading.className="panel-title nc-facet-title";
                heading.setAttribute('onclick','ShowHideNCFacet(this);');
                heading.innerHTML = `<i class="${chevUp} nc-facet-caret pull-right" aria hidden="true"></i>
                ${fbo.FusionName.toLowerCase() === "category1_ss" ? AllPartsValue : facetsLabel[fusionName]}`;

                const fList=document.createElement('ul');
                fList.className="list-group borderless facetHeight col-xs-12";

                const fragment=document.createDocumentFragment();

                for(const kvp in fbo.FacetKeyValues){

                    let catResourceKey="";
                    let ecsFacetKey=fbo.FacetKeyValues[kvp].Key
                    ecsFacetKey=encodeURI(ecsFacetKey);

                    ecsFacetKey=ecsFacetKey.replaceAll("%EF%BF%BD","%C2%AE");

                    ecsFacetKey=decodeURI(ecsFacetKey);

                    catResourceKey=["cat",fbo.FacetKeyValues[kvp].Key.replaceAll(" ","").replaceAll("-","").replaceAll("/","")].join();
                   const fragmentList=document.createElement('li');
                    fragmentList.className="list-group-item checkbox c-facet-list nc-facet-list";
                    fragmentList.style="display:list-item;";

                    fragmentList.innerHTML= '<label class="facetLabel" style="'+
                                        ';padding-left:0px;"><input type="checkbox" class="c-facet nc-facet"'+
                                        (Boolean(fbo.FacetKeyValues[kvp].Value.Value) ? "checked=checked" : "")+
                                        '" facet-attr="'+fbo.FusionName+'" facet-friendlyattr="'+fbo.FriendlyName+
                                        '" facet-resourcekey="'+catResourceKey+'" value="'+fbo.FacetKeyValues[kvp].Key+'">'+
                                        ecsFacetKey+'<span class="facetCount" style="color: #737373;">('+fbo.FacetKeyValues[kvp].Value.Key+')</span></label>';
                    fragment.appendChild(fragmentList);


                }


                fList.appendChild(fragment);
                FacetsDiv.appendChild(heading);
                FacetsDiv.appendChild(fList);
                facetsDiv.appendChild(FacetsDiv);
                categoryListDiv.appendChild(facetsDiv);

                var showbutton = document.createElement("div");
                showbutton.innerHTML = "Show More";
                showbutton.className = "show-more-button";
                showbutton.setAttribute('onclick','toggleList(this)');
                if(fList.childNodes.length>5){
                	FacetsDiv.appendChild(showbutton);
                }
                else {
                     fList.classList.remove('facetHeight');
                }

        }

    }
}

    if((renderedJson.Category.toLowerCase())===(AllPartsValue.toLowerCase())||(renderedJson.FacetURL.toLowerCase().includes("facet=on"))){
        const dynamicFacetsDiv=document.createElement('div');
        dynamicFacetsDiv.className="dynamicFacetsWrapper hide";

        uniqueFacetList.sort();

        for(const i in uniqueFacetList){
            const fbo=facetObjectList.find(facetObject =>facetObject['FusionName'] === uniqueFacetList[i]);
			const fusionName=fbo.FusionName;
            if(fbo.FusionName.includes("_df")){

                const conditionforfacets=((fbo.FacetKeyValues).lenth === 1 && (fbo.FacetKeyValues).filter(c => c.Key.toString().toLowerCase().includes("other")).length === 1);
                const isFacetValueEmpty = ((fbo.FacetKeyValues).length === 0 || conditionforfacets)? true : false;
                if(!isFacetValueEmpty){

                    const heading=document.createElement('h4');
                    heading.className="panel-title nc-facet-title";
                    heading.setAttribute('onclick','ShowHideNCFacet(this);');
                    heading.innerHTML='<i class="'+chevUp+' nc-facet-caret pull-right" aria hidden="true"></i>'+facetsLabel[fusionName];

                    const fList=document.createElement('ul');
                    fList.className="list-group borderless facetHeight col-xs-12";

                    const fragment=document.createDocumentFragment();


                    for(const kvp in fbo.FacetKeyValues){

                       const fragmentList=document.createElement('li');
                        fragmentList.className="list-group-item checkbox nc-facet-list";
                        fragmentList.style="display:list-item;";

                        fragmentList.innerHTML= '<label class="facetLabel" style="'+
                                                ';padding-left:0px;"><input type="checkbox" style="margin-top: 1px;" class="nc-facet"'+
                                                (Boolean(fbo.FacetKeyValues[kvp].Value.Value) ? "checked=checked" : "")+'" facet-attr="'+fbo.FusionName+
                                                '" facet-friendlyattr="'+fbo.FriendlyName+'" value="'+fbo.FacetKeyValues[kvp].Key+'">'+fbo.FacetKeyValues[kvp].Key+
                                                '<span class="facetCount" style="color: #737373;padding-left:2px;">('+fbo.FacetKeyValues[kvp].Value.Key+')</span></label>';

                        fragment.appendChild(fragmentList);


                    }
                    fList.appendChild(fragment);
                    dynamicFacetsDiv.appendChild(heading);
                    dynamicFacetsDiv.appendChild(fList);
                    facetsDiv.appendChild(dynamicFacetsDiv);
                    categoryListDiv.appendChild(facetsDiv);

                      var showbuttondiv = document.createElement("div");
                      showbuttondiv.innerHTML = "Show More";
                      showbuttondiv.className = "show-more-button";
                      showbuttondiv.setAttribute('onclick','toggleList(this);');
                      if(fList.childNodes.length>5){
                         dynamicFacetsDiv.appendChild(showbuttondiv);
                      }
                      else {
                              fList.classList.remove('facetHeight');
                      }

                }


            }


        }
        $('input[type="checkbox"]').on('change', function () {
    updateSelectedFilter();
});


updateSelectedFilter();




    }



}
function updateSelectedFilter() {
    const checkedInputs = $('input[type="checkbox"].nc-facet:checked');
const facetClear = $('#clearAllFacet');
    if (checkedInputs.length > 0) {
        const filterDiv = document.createElement('div');
        filterDiv.className = "selected-filter";
		filterDiv.innerHTML='<div class="chip-icon">Selected Filters<a href="javascript:void(0);" onclick="ClearAllFacets(true);" style="float:right;">Clear All</a></div>';
        checkedInputs.each(function () {
            const checkboxValue = $(this).val();
            filterDiv.innerHTML += '<div class="filterInput">' + checkboxValue + '<i class="fa-solid fa-xmark closeMark"></i></div>';
        });

        facetClear.html('').append(filterDiv);
        facetClear.removeClass('hide').addClass('block');

        $('.closeMark').on('click', function () {
            const filterInput = $(this).closest('.filterInput');
            const valueToRemove = filterInput.text().trim();
            filterInput.remove();

            $('input[type="checkbox"][value="' + valueToRemove + '"]').prop('checked', false);
            const begin = 0;
                        const countReturns=10;
                        RunSecondaryCategoryFacetValues(facetsDiv);
                        setSiteSearchAriaAttribute(true);
                        callAjaxForFacet(secondaryFacet,begin,countReturns);

            if ($('input[type="checkbox"]:checked').length === 0) {
                facetClear.removeClass('block').addClass('hide');
            }
        });
    } else {
        facetClear.removeClass('block').addClass('hide');
    }
}
function toggleList(element) {
var content1 = element.previousSibling;
var listItems = content1.querySelectorAll('li');
var maxItemsToShow = 5;
    if (listItems.length > maxItemsToShow) {
    content1.classList.toggle('expanded');
    element.innerHTML = content1.classList.contains('expanded') ? 'Collapse' : 'Show More';
    }else {
        element.innerHTML = '';
    }
}

//generate secondaryFacet containing category and its value checked

function RunSecondaryCategoryFacetValues(parentElement) {
    const arrays = [];
    const arrsecondaryFacetUnchecked = [];
    const facetAttr='facet-attr';
    secondaryFacetUnchecked = [];


    const $boxes = $(parentElement).children().find(ncFacetChecked);
    const $unchekedboxes = $(parentElement).children().find(".nc-facet:checkbox:not(:checked)");

    $boxes.each(function () {
        if (arrays.indexOf($(this).attr(facetAttr)) === -1) {

            arrays.push($(this).attr(facetAttr));

        }
    });
    $unchekedboxes.each(function () {
        if (arrays.indexOf($(this).attr(facetAttr)) === -1 && arrsecondaryFacetUnchecked.indexOf($(this).attr(facetAttr)) === -1) {
            arrsecondaryFacetUnchecked.push($(this).attr(facetAttr));

            secondaryFacetUnchecked.push({ FacetName: $(this).attr(facetAttr) });///.push("{"+$(this).attr("facet-attr")+"}");

        }

    });

    secondaryFacet = [];
    for (let i = 0; i < arrays.length; i++) {
        const $checkedboxes = $(parentElement).children().find("input["+facetAttr+"='" + arrays[i] + "']:checked");

        let facetvalue = "";
        if ($checkedboxes.length > 1) {
            facetvalue = "(";
            for (let y = 0; y < $checkedboxes.length; y++) {
                const elem = $checkedboxes.eq(y);
                if (y === $checkedboxes.length - 1) {
                    facetvalue += '"' + $(elem).val() + '"';
                }
                else {
                    facetvalue += '"' + $(elem).val() + '" OR ';
                }

            }
            facetvalue += ")";

        }
        else {
            facetvalue = '("' + $checkedboxes.first().val() + '")';
        }

        secondaryFacet.push({ key: arrays[i], value: facetvalue });
        sessionStorage.setItem('sessionsecondaryStorage',secondaryFacet);



    }
}




//Calls ajax for facetted search




function callAjaxForFacet(facets,startIndex,countReturn) {

    const keyword = $("#hdnKeyWord").val();
    let category = $(hdnCategory).val();
    if(category===""){
	category="ALL";
    }
    const uncheckedfacets = secondaryFacetUnchecked;

    getSearchResultFromAPI(keyword,category,startIndex,countReturn,facets,uncheckedfacets);
    $(searchVal).val(keyword);
}




//Shows the next sibling hidden div of a Category



function ShowHideNCFacet(ele1) {
    $(ele1).next().children(".nc-facet-list").toggle();
    if ($(ele1).next().children(".nc-facet-list").is(":visible")) {
        $(ele1).children(".nc-facet-caret").removeClass(chevDown).addClass(chevUp);
        $(ele1).next().addClass("facetHeight");
        $(ele1).siblings('.show-more-button').removeClass('hide');
    }
    else {
        $(ele1).children(".nc-facet-caret").removeClass(chevUp).addClass(chevDown);
        $(ele1).next().removeClass("facetHeight");
        $(ele1).siblings('.show-more-button').addClass('hide');

    }
}


function ShowHideCategory() {

    const checkedCategory1 = $(".Category1 "+inputCheck).length;
    const checkedCategory2 = $(Category2+" "+inputCheck).length;
    const checkedCategory3 = $(Category3+" "+inputCheck).length;


		if (checkedCategory1 > 0) {
        $(Category2).removeClass('hide');
        if (checkedCategory2 > 0) {
            $(Category3).removeClass('hide');
            $(".dynamicFacetsWrapper").removeClass('hide');
            if (checkedCategory3 > 0) {
                $(Category4).removeClass('hide');
            }
        }
    }
    else{
		$(Category2).addClass('hide');

    }


}

function ClearOtherCategoryFacets() {

    const checkedCategory1 = $("#facetsDiv .Category1 "+inputCheck).length;
    const checkedCategory2 = $("#facetsDiv "+Category2+" "+inputCheck).length;
    const checkedCategory3 = $("#facetsDiv "+Category3+" "+inputCheck).length;

    if (checkedCategory1 === 0) {
        $(Category2+" "+ncFacetChecked+", "+Category3+" "+ncFacetChecked+", "+Category4+" "+ncFacetChecked).prop("checked", false);
    } else if (checkedCategory2 === 0) {
        $(Category3+" "+ncFacetChecked+", "+Category4+" "+ncFacetChecked).prop("checked", false);
        $(".dynamicFacetsWrapper "+ncFacetChecked).prop("checked", false);
    }
    else if (checkedCategory3 === 0) {
        $(Category4+" "+ncFacetChecked).prop("checked", false);
    }
}



//Clears the sibbling facets of the Category
function ClearSiblingFacets(ele1) {

    $(ele1).parent().siblings().children().find(ncFacetChecked).prop("checked", false);
    const startIndex = 0;
    const countReturn=10;

    if ($(ele1).parent().parent().parent().hasClass("Category1")) {

        const categoryName = "Products";
        $(hdnCategory).val(categoryName);
        $(Category2).find(ncFacetChecked).prop("checked", false);
        $(Category3).find(ncFacetChecked).prop("checked", false);
        $(Category4).find(ncFacetChecked).prop("checked", false);
    }
    if ($(ele1).parent().parent().parent().hasClass(Category2)) {
        $(Category3).find(ncFacetChecked).prop("checked", false);
        $(Category4).find(ncFacetChecked).prop("checked", false);
    }
    if ($(ele1).parent().parent().parent().hasClass("Category3")) {
        $(Category4).find(ncFacetChecked).prop("checked", false);
    }
    if ($(ele1).parents("#mobileFacetList").length > 0){
        RunSecondaryCategoryFacetValues('#mobileFacetList');
    }
    else{
        RunSecondaryCategoryFacetValues(searchResultDiv);
    }

    setSiteSearchAriaAttribute(true);
    callAjaxForFacet(secondaryFacet,startIndex,countReturn);
    slideContainer();

}


function ClearAllFacets(fromDesktop) {

    if ($(ncFacetChecked).length > 0) {

        $(ncFacetChecked).prop("checked", false);
        RunSecondaryCategoryFacetValues(searchResultDiv);
        const startIndex = 0;
        const countReturn=10;
        const category = "Products";

        $(hdnCategory).val(category);
        setSiteSearchAriaAttribute(true);
        callAjaxForFacet(secondaryFacet,startIndex,countReturn);
    }
    slideContainer();

}

function changeH3_tobtn(){
     if(document.querySelector('h3[class~="leftNavTitle"]')!==null){
    
        const btnele=document.querySelector('h3[class~="leftNavTitle"]');
        btnele.outerHTML='<button class="leftNavbtn search-btn-mchp mchp-button-regular solid">'+'<i class="fa-solid fa-sliders-up"></i> '+leftNavigationTitle+'</button>'
     }
}
function changebtn_toH3(){

    if(document.querySelector('button[class~="leftNavbtn"]')!==null){
    
            const h3ele=document.querySelector('button[class~="leftNavbtn"]');
            h3ele.outerHTML='<h3 class="leftNavTitle">'+leftNavigationTitle+'</h3>'
         }

}

function slideContainer(){
    if(mediaQuery.matches){
        $('.categoryContainer').css('display','block');
        $('.navContainer').animate({
            width:'toggle'
        },250);
        leftNavFilterResults.toggle();
        leftNavFilterResults.css('display','flex');
        leftNavUnderlay.toggle();
    }

}

function getSearchFacets(){

    $.ajax({

        url:"/bin/sitesearchfacets",
        type: "GET",

        dataType:'json',
        async: false,
        success: function (resp) {
            initializefacets(resp);

    	}
    });


}

function initializefacets(resp){
	facetsLabel=resp.facets;
}
//function to fetch counts for left nav categories
function fetchKeyValues(renderedJson, fusionName) {

    const facetFields = renderedJson.FacetFieldsList.find(item => item.FusionName === fusionName);

    if (facetFields) {
        const catCount = facetFields.FacetKeyValues.reduce((result, item) => {
            if (item.Key === 'Application Center') {
                result.applicationCenterValue = item.Value.Key;
            } else if (item.Key === 'Device') {
                result.deviceValue = item.Value.Key;
            } else if (item.Key === 'Document') {
                result.documentValue = item.Value.Key;
            } else if (item.Key === 'PCN') {
                result.pcnValue = item.Value.Key;
            } else if (item.Key === 'Corporate Information') {
                result.corporateInfoValue = item.Value.Key;
            } else if (item.Key === 'Reference Design') {
                result.refDesValue = item.Value.Key;
            }
            return result;
        }, {});

        return catCount;

    } else {
        return {};
    }
}

//function to fetch counts for subcategories
function fetchSpecificValues(renderedJson, subFusionName, keys) {
    const facetFieldsValues = renderedJson.FacetFieldsList.find(item => item.FusionName === subFusionName);

    if (facetFieldsValues) {
        const specificValues = facetFieldsValues.FacetKeyValues
            .filter(item => keys.includes(item.Key))
            .map(item => ({
                key: item.Key,
                value: item.Value.Key
            }))
            .reduce((result, item) => {
                result[item.key] = item.value;
                return result;
            }, {});

        return specificValues;
    } else {
        return {};
    }
}

const dcfTitleSelector = '.dcf-title';
const iconStar='far fa-star';
const iconStarMarked='fas fa-star';
const unMarkClassNames = "fa-duotone fa-star";
const favoriteAnchor='.AddProductPrefLink';
const GUID='asdfdiuglkjhrsu';
const spinner='fas fa-spinner fa-pulse';
const devAEMDomainName='http://localhost:4502';
const qaAEMDomainName='aem.microchip.com';
const stageAEMDomainName='aem-stage.microchip.com';
let productSelector='/en-us/product/';
let devtoolSelector='/en-us/development-tool/';
let APIAppName='Microchip.Com.api';
let pageRootPath=location.protocol + '//' + location.host + '/';
let onProdDomain = true;


$(document).ready(function () {

	setDomainUniqueInfo();

    $(dcfTitleSelector).append($(' <a class="AddProductPrefLink" title="Add to your preference list on myMicrochip"><em class="far fa-star"></em></a>').attr({
 		'href': "javascript:void(0)",
        'data-gating-callback': "updateUserDevicePreference"
	}));

});

function setDomainUniqueInfo(){

	const source = window.location.origin.toLowerCase().trim();
	pageRootPath = 'https://www.microchip.com/';

	if (source.indexOf(devAEMDomainName.toLowerCase().trim()) > -1 || source.indexOf(qaAEMDomainName.toLowerCase().trim()) > -1) {
		pageRootPath = 'https://chn-vm-tweb/';
        onProdDomain=false;
	}else if (source.indexOf(stageAEMDomainName.toLowerCase().trim()) > -1) {
		pageRootPath = 'https://stageapps.microchip.com/';
        onProdDomain=false;
    }

    if(isAuthorHost()){
		productSelector='/content/mchp/en-us/products/product.';
        devtoolSelector='/content/mchp/en-us/development-tools-tools-and-software/devtool.';
    }

    if(onProdDomain){
        APIAppName='webdata';
    }

}


function updateUserDevicePreference(a){

    if(location.pathname.includes(productSelector) && !(a).find('em').hasClass(iconStarMarked) && !(a).find('em').hasClass(unMarkClassNames)){
       $(a).find('em').removeClass(iconStar).addClass(spinner);
	   SaveUserCpnDevices(a);
	}
	else if(location.pathname.includes(devtoolSelector) && !(a).find('em').hasClass(iconStarMarked) && !(a).find('em').hasClass(unMarkClassNames)){
       $(a).find('em').removeClass(iconStar).addClass(spinner);
	   SaveUserDevtools(a);
	}

}

//Save User Devtool Preferences
function SaveUserDevtools(a){

	const saveDevtoolEndpoint = $(dcfTitleSelector).attr("data-saveDevtool");
    const userDevtoolInfo={
        userGuid:getCookie(GUID),
        cpns: $(dcfTitleSelector).parent().siblings('.dcftextfield').children()[0].innerText.split(':')[1].trim()
    };
	const token = localStorage.getItem("AccessToken");
		$.ajax({
            type: "POST",
            url: saveDevtoolEndpoint,
            contentType: 'application/json; charset=utf-8',
            data:JSON.stringify(userDevtoolInfo),
            dataType:'json',
            beforeSend: function(xhr){
				//Include the bearer token in Authorization header
				xhr.setRequestHeader("Authorization", 'Bearer ' + token);
        	},success:function(responseData){
                if(responseData){
            	    toggleStarIconState(a, true);
                }else{
                    toggleStarIconState(a, false);
                }
			},
			error:function(code){
				toggleStarIconState(a, false);
                if (code === 401) {
                    handleApiUnauthorizedError();
                }
			}
    });

}

//Save User Device Preferences(Silicon)
function SaveUserCpnDevices(a){
    const saveProductEndpoint = $(dcfTitleSelector).attr("data-saveProduct");
	const productName = $(favoriteAnchor).parent()[0].innerText;

    const token = localStorage.getItem("AccessToken");

	 $.ajax({
            type: "POST",
            url: saveProductEndpoint + "?products=" + productName,
            contentType: 'application/json; charset=utf-8',
            dataType:'json',
            beforeSend: function(xhr){
				//Include the bearer token in Authorization header
				xhr.setRequestHeader("Authorization", 'Bearer ' + token);
        	},success:function(responseData){
               if(responseData.isDeviceAndCPNCollnStored){
                    toggleStarIconState(a, true);
                }else{
                    toggleStarIconState(a, false);
                }
			},
			error:function(code){
				toggleStarIconState(a, false);
                if (code === 401) {
                    handleApiUnauthorizedError();
                }
            }
    });

}

//get  Bearer Token for Authorisation
function getSecureToken(){

    return $.ajax({
        type: "POST",
        url: pageRootPath+APIAppName+'/api/MchpApiSecurity/GetMchpWWWApiSecureToken',
        contentType: 'application/json'
    });

}
//check is domain in author
function isAuthorHost() {
    return "localhost" === location.hostname || location.hostname.includes("author") || location.hostname.includes("aem.microchip.com")
}

function handleApiUnauthorizedError() {
    window.localStorage.removeItem('AccessToken');
    window.localStorage.removeItem('IdToken');
    window.location.href = "https://www.microchip.com";
}

function toggleStarIconState(a, shallMark){
	$(a).find('em').removeClass(spinner);
    if (shallMark) {
        $(a).find('em').removeClass(iconStar).addClass(iconStarMarked);
    } else {
        $(a).find('em').removeClass(iconStarMarked).addClass(iconStar);
    }
}

const  documentFavChildClass = '.docFavorite a';
const favIconClass = 'em';
const requestedHeaderPropertyName = 'Authorization';
const requestedHeaderPropertyValue = 'Bearer ';
const accessToken = "AccessToken";
const requestedContentTypeValue = 'application/json; charset=utf-8';
const requestedDataType = 'json';
const documentTableClassName = ".DocumentTable";
const favDocumentsPropertyName = 'favDocuments';

function AddToFavDocuments(ele){
    try{
        $(ele).find(favIconClass).removeClass(iconStar).addClass(spinner);
        const dateString=$(ele).closest('td').data('display-date');
        const dateinformat=reformatDateString(dateString);
        const documentName= $(ele).closest('td').data('mchp-documentname');
        var dsNumber = $(ele).closest('td').data('mchp-dsnumber');
        if (dsNumber) {
            dsNumber = String(dsNumber);
        }

        const DocumentData={
            documentName: documentName ? documentName : "",
            category:$(ele).closest('td').data('document-category'),
            releaseDate:dateinformat,
            documentID:$(ele).closest('td').closest('td').data('documentid'),
            url:$(ele).closest('td').data('mchp-link'),
            documentTitle:$(ele).closest('td').siblings('.title-column')[0].innerText.trim(),
            dsNumber:dsNumber
        };
         const saveUserDocumentsAPIEndpoint = $(documentTableClassName).data('saveuserdocumentsapiendpoint');
         const token = localStorage.getItem(accessToken);

            $.ajax({
                type: "POST",
                url: saveUserDocumentsAPIEndpoint,
                contentType: requestedContentTypeValue,
                data:JSON.stringify(DocumentData),
                dataType:requestedDataType,
                beforeSend: function(xhr){
                //Include the bearer token in Authorization header
                    xhr.setRequestHeader(requestedHeaderPropertyName, requestedHeaderPropertyValue + token);
                },success:function(responseData){
                      if(responseData){
                        toggleStarIconState(ele, true);
                      }else{
                        toggleStarIconState(ele, false);
                      }
                },
                error:function(code){
                    toggleStarIconState(ele, false);
                    if (code === 401) {
                        handleApiUnauthorizedError();
                    }
                }
        });
    }catch(error){
	    toggleStarIconState(ele, false);
    }
}

function reformatDateString(ds) {
   var months = {jan:'01',feb:'02',mar:'03',apr:'04',may:'05',jun:'06',
                 jul:'07',aug:'08',sep:'09',oct:'10',nov:'11',dec:'12'};
   var b = ds.split(' ');
   return b[2] + '-' + months[b[1].toLowerCase()] + '-' + b[0] + 'T00:00:00';
}

function handleApiUnauthorizedError() {
    window.localStorage.removeItem(accessToken);
    window.localStorage.removeItem('IdToken');
    window.localStorage.removeItem(favDocumentsPropertyName);
    window.location.href = "https://www.microchip.com";
}

 $(document).ready(function(e) {
     if($('body').find('.DocumentTable').length) {
           getAllFavDocuments();
      }
 });

   function MarkFavAndUnFevDocuments(ele) {
          if($(ele).find(favIconClass).hasClass('far')) {
               AddToFavDocuments(ele);
          } else {
               unFavDocument(ele);
          }
     }

 function getAllFavDocuments() {
       try{
        const getUserDocumentsAPIEndpoint = $(documentTableClassName).data('getuserdocumentsapiendpoint');
        const token = localStorage.getItem(accessToken);
           if(typeof getUserDocumentsAPIEndpoint !== "undefined" && getUserDocumentsAPIEndpoint !== null && token !== null) {
             $.ajax({
                 type: "GET",
                 url: getUserDocumentsAPIEndpoint,
                 contentType: requestedContentTypeValue,
                 dataType:requestedDataType,
                 beforeSend: function(xhr){
                 //Include the bearer token in Authorization header
                     xhr.setRequestHeader(requestedHeaderPropertyName, requestedHeaderPropertyValue + token);
                 },success:function(responseData) {
                     localStorage.setItem(favDocumentsPropertyName, JSON.stringify(responseData));
                     fillIconForFavDocuments(responseData);
                 },
                 error:function(code){
                      $(documentFavChildClass).find(favIconClass).removeClass(iconStarMarked).addClass(iconStar);
                     if (code === 401) {
                         handleApiUnauthorizedError();
                     }
                 }
             });
         }
     }catch(error){
 	    $(documentFavChildClass).find(favIconClass).removeClass(iconStarMarked).addClass(iconStar);
     }
  }


   function unFavDocument(ele) {
      try{
          const token = localStorage.getItem(accessToken);
          const documentId = $(ele).find(favIconClass).attr('docId');
          const deleteUserDocumentsAPIEndpoint = $(documentTableClassName).data('deleteuserdocumentsapiendpoint');
           $(ele).find(favIconClass).removeClass(iconStar).addClass(spinner);
              $.ajax({
                  type: "POST",
                  url: deleteUserDocumentsAPIEndpoint+documentId,
                  contentType: requestedContentTypeValue,
                  dataType:requestedDataType,
                  beforeSend: function(xhr){
                  //Include the bearer token in Authorization header
                      xhr.setRequestHeader(requestedHeaderPropertyName, requestedHeaderPropertyValue + token);
                  },success:function(responseData) {
                      if(responseData) {
                         toggleStarIconState(ele, false);
                         removeFavDocumentFromLS(documentId);
                      } else {
                         toggleStarIconState(ele, true);
                      }
                  },
                  error:function(code){
                          toggleStarIconState(ele, true);
                      if (code === 401) {
                          handleApiUnauthorizedError();
                      }
                  }
          });
      }catch(error) {
  	     toggleStarIconState(ele, true);
      }
    }

   function removeFavDocumentFromLS(documentId) {
           const favDocuments = JSON.parse(localStorage.getItem(favDocumentsPropertyName));
           const removeIndex = favDocuments.findIndex(object => {
                    return object.documentId === documentId;
              });
          if(removeIndex >= 0) {
            favDocuments.splice(removeIndex, 1);
           localStorage.setItem(favDocumentsPropertyName, JSON.stringify(favDocuments));
         }
     }

   function fillIconForFavDocuments(response) {
          response.map((item) => {
              if (item.documentId) {
                $(documentFavChildClass).find(`${favIconClass}[docId=${item.documentId}]`).removeClass(iconStar).addClass(iconStarMarked);
              }
          });
     }

var $table = $('#eventsTable');
var TOOLINPUT = '.toolbar input:checked';
$(document).ready(function() {
    var checkedRows = [];

    $table.on('check.bs.table', function(e, row) {
        checkedRows.push({
            key: row.key,
            bucketName: row.bucketName,
            size: row.size,
            owner:row.owner
        });
        console.log(checkedRows);
    });

    $table.on('check-all.bs.table', function(e, row) {
        $.each(row, function(index, value) {
            checkedRows.push({
                key: value.key,
                bucketName: value.bucketName,
                size: value.size,
                owner:row.owner
            });
            console.log(checkedRows);
        });

    });

    $table.on('uncheck.bs.table', function(e, row) {
        $.each(checkedRows, function(index, value) {
            if (value.key === row.key) {
                checkedRows.splice(index, 1);
            }
        });
        console.log(checkedRows);
    });

	$table.on('uncheck-all.bs.table', function(e, row) {
    	checkedRows = [];
        console.log(checkedRows);

    });
    
    $("#refreshawsdoctable").click(function(event ) {
        event.preventDefault();
		var queryParamsType = $(TOOLINPUT).next().text();
          $table.bootstrapTable('refreshOptions', {
            queryParamsType: queryParamsType
        })
       checkedRows = [];
       console.log(checkedRows);

    });
    
    $("#add_cart").click(function(event ) {
        event.preventDefault();
		$.ajax({
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/bin/mchp/migrateawsdocs",
            data: JSON.stringify(checkedRows),
            complete: function(data, textStatus, jqXHR) {
               alert(data.responseText);
                $table.bootstrapTable('uncheckAll');
                var queryParamsType = $(TOOLINPUT).next().text();
                $table.bootstrapTable('refreshOptions', {
                    queryParamsType: queryParamsType
                })
            }
        
        });

    });
});



function queryParams(params) {
    params.bucketName = $(TOOLINPUT).next().text();
    return params;
}

$(function() {
    $('.toolbar input').change(function() {
        var queryParamsType = $(TOOLINPUT).next().text();

        $table.bootstrapTable('refreshOptions', {
            queryParamsType: queryParamsType
        })
    })
})
/**
 * Mchp dialog Dialog.
 */
class MchpDialog {
  static DIRECTIVE = {
    TEMPLATE: 'mchp-dialog-template',
    CLOSE: 'mchp-dialog-close',
    TEMPLATE_PARENT: 'mchp-dialog-template-parent'
  };

  static ID = {
    DYNAMIC_TEMPLATE: 'mchp-dialog-dynamic-template',
  };

  static CSS = {
    OVERLAY: 'mchp-dialog-overlay',
    DIALOG: 'mchp-dialog',
    CLOSE_ICON: 'dialog__close',
    TITLE: 'dialog__title',
    BODY: 'dialog__body',
    FOOTER: 'dialog__footer',
    NO_SCROLL: 'mchp-dialog-no-scroll',
  };

  static SELECTOR = {
    OVERLAY: `.${MchpDialog.CSS.OVERLAY}`,
    DIALOG: `.${MchpDialog.CSS.OVERLAY} .${MchpDialog.CSS.DIALOG}`,
    DYNAMIC_TEMPLATE: `.${MchpDialog.CSS.OVERLAY} #${MchpDialog.ID.DYNAMIC_TEMPLATE}`,
    CLOSE_ICON: `.${MchpDialog.CSS.CLOSE_ICON}`,
    CLOSE_DIRECTIVE: `[${MchpDialog.DIRECTIVE.CLOSE}]`,
  };

  template = null;

  /**
   * Create a new dialog.
   *
   * @param {{
   *  title?: string,
   *  body?: string,
   *  footer?: string,
   *  template?: string,
   *  target?: string
   * }} options - title, body and footer to build a dynamic dialog. 
   * template is the selector for an existing template. 
   * target is the where to place the dialog overlay (default BODY).
   */
  constructor(options) {
    // add overlay to the page. If it does not exist yet.
    if ($(MchpDialog.SELECTOR.OVERLAY).length === 0) {
      $(options.target ?? document.body).append(
        `<div class="${MchpDialog.CSS.OVERLAY}" style="display: none;">
            <div id="${MchpDialog.ID.DYNAMIC_TEMPLATE}" class="${MchpDialog.CSS.DIALOG}" style="display: none;">
            </div>
        </div>`
      );

      // close if click outside the dialog.
      $(MchpDialog.SELECTOR.OVERLAY).on('click', (ev) => {
        if (ev.target.className === MchpDialog.CSS.OVERLAY) {
          this.close();
        }
      });

      // close if press ESC key.
      $(document).on('keyup', (ev) => {
        if (ev.key === 'Escape') {
          this.close();
        }
      });
    }

    if (options.template) {
      this.template = options.template;

      // Moves overlay to "target", if informed. Or to "template" parent.
      if (!$(this.template).data(MchpDialog.DIRECTIVE.TEMPLATE_PARENT)) {
        $(this.template).data(MchpDialog.DIRECTIVE.TEMPLATE_PARENT, $(this.template).parent());
      }
      const templateParent = $(this.template).data(MchpDialog.DIRECTIVE.TEMPLATE_PARENT);
      $(MchpDialog.SELECTOR.OVERLAY).appendTo(options.target ?? templateParent);
    } else if(options.body) {
      // Moves overlay to "target", if informed. Or to BODY.
      $(MchpDialog.SELECTOR.OVERLAY).appendTo(options.target ?? document.body);

      let content = '';
      content += options.title
        ? `<div class="${MchpDialog.CSS.TITLE}">${options.title}</div>`
        : '';
      content += options.body
        ? `<div class="${MchpDialog.CSS.BODY}">${options.body}</div>`
        : '';
      content += options.footer
        ? `<div class="${MchpDialog.CSS.FOOTER}">${options.footer}</div>`
        : '';

      $(MchpDialog.SELECTOR.DYNAMIC_TEMPLATE).html(`${content}`);

      this.template = MchpDialog.SELECTOR.DYNAMIC_TEMPLATE;
    }

    // Close/hide any previous dialog.
    this.close();

    const jqTemplate = $(this.template);

    if (jqTemplate.length === 0) {
      throw new Error('template not found:' + this.template);
    }

    // Move template into overlay.
    jqTemplate.appendTo(MchpDialog.SELECTOR.OVERLAY);
    
    // Add dialog class to template.
    jqTemplate.addClass(MchpDialog.CSS.DIALOG);

    // Add closeIcon to the template.
    if (jqTemplate.find(MchpDialog.SELECTOR.CLOSE_ICON).length === 0) {
        jqTemplate.append(`<div class="${MchpDialog.CSS.CLOSE_ICON}" ${MchpDialog.DIRECTIVE.CLOSE}></div>`);
    }

    // Add close handles.
    jqTemplate.find(MchpDialog.SELECTOR.CLOSE_DIRECTIVE)
      .off('click')
      .on('click', (ev) => {
        this.close();
      });

    // Make template visible. But overlay is not visible yet.
    jqTemplate.show();

  }

  /**
   * attachEvents - call the function after template is ready.
   * 
   * Attach any events related to the template.
   * 
   * @param {(dialog) => void} fn 
   */
  attachEvents(fn) {
    if (typeof fn === 'function') {
      fn(this);
    } else {
      throw new Error('not a function: ' + fn);
    }

    return this;
  }

  /**
   * Open the dialog.
   *
   * @returns this
   */
  open() {
    // Show overlay.
    $(MchpDialog.SELECTOR.OVERLAY).show();
    // Apply no-scroll on BODY
    $(document.body).addClass(MchpDialog.CSS.NO_SCROLL);

    return this;
  }

  /**
   * Close the dialog.
   *
   * @returns this
   */
  close() {
    MchpDialog.closeDialog();

    return this;
  }

  /**
   * Static closeDialog. Close any dialog that may be open.
   */
  static closeDialog() {
    // Revert no-scroll on BODY.
    $(document.body).removeClass(MchpDialog.CSS.NO_SCROLL);
    // Hide overlay (and dialogs)
    $(MchpDialog.SELECTOR.OVERLAY).hide();
    // Hide all existing dialogs.
    $(MchpDialog.SELECTOR.DIALOG).hide();
  }

  /**
   * Apply click handler to MchpDialog templates triggers.
   */
  static handleTemplates() {
    $(`[${MchpDialog.DIRECTIVE.TEMPLATE}]`)
      .off('click')
      .on('click', (ev) => {
        const template = $(ev.currentTarget).attr(
          MchpDialog.DIRECTIVE.TEMPLATE
        );
        if (template) {
          new MchpDialog({ template }).open();
        }
      });
  }
}

$(document).ready(() => {
  MchpDialog.handleTemplates();
});

$(document).ready(function() {
    $('img').filter(function() {
        return !$(this).attr('alt');
    }).each(function() {
        var src = $(this).attr('src');
        var filename = src.substring(src.lastIndexOf('/') + 1, src.lastIndexOf('.'));
        $(this).attr('alt', filename);
    });
});
var ipCoreIndex = 1;
var smallImageclass1 = "ipCore-img-sm-";
setImageSlideId();
showIpCoreSlide(ipCoreIndex);
setImage();
function plusIpCoreSlide(n) {
  var next = 1 + n;
  showIpCoreSlide(next);
  nextIpCoreSlide();
  setImage();
}
function minusIpCoreSlide(n) {
  var prev = 1 + n;
  showIpCoreSlide(prev);
  prevIpCoreSlide();
  setImage();
}
function getSmSlides1(){
  return document.getElementsByClassName("ipCore-img-sm");
}
function showIpCoreSlide(n) {
  var i;
  var y;
  var counter;
  var smslides = getSmSlides1();
  if (smslides.length > 0) {
    if (n > smslides.length) {
      ipCoreIndex = 1
    }
      if (n < 1) {
        ipCoreIndex = smslides.length
      }
      for (i = 0; i < smslides.length; i++) {
        smslides[i].style.display = "none";
      }

      if (smslides.length<3) {
		    counter = smslides.length;
      }
      else {
		    counter = 3;
      }

      for(y=0;y<counter;y++)
      {
        if(smslides[y] !== null){
          smslides[y].style.display = "";
        }
      }
  }
}
function setImage() {
  var lgslide = document.getElementById("ipCore-img-lg");
  var firstImage =  document.getElementById(smallImageclass1+"0");
  var secondImage =  document.getElementById(smallImageclass1+"1");
  if (firstImage !== null) {
    if (secondImage !== null) {
      lgslide.src = secondImage.src;
      lgslide.alt = lgslide.src.substring(lgslide.src.lastIndexOf('/')+1, lgslide.src.lastIndexOf('.'));
      secondImage.classList.add("current-ipCore-slide");
    }
    else {
      lgslide.src = firstImage.src;
      lgslide.alt = lgslide.src.substring(lgslide.src.lastIndexOf('/')+1, lgslide.src.lastIndexOf('.'));
      firstImage.classList.add("current-ipCore-slide");
    }
  }
}
function setImageSlideId() {
  var i;
  var smslides = getSmSlides1();
  if (smslides !== null) {
    for (i = 0; i < smslides.length; i++) {
      smslides[i].setAttribute("id", smallImageclass1 + i);
    }
  }
}
function nextIpCoreSlide() {
  var i;
  var smslides = getSmSlides1();
  var firstImgSrc =  document.getElementById(smallImageclass1+"0").src;
  if (smslides !== null) {
    for (i = 0; i < smslides.length; i++) {
      var nextCounter = i+1;
      var currentElement = document.getElementById(smallImageclass1+ i);

      if (nextCounter < smslides.length) {
        currentElement.src = document.getElementById(smallImageclass1 + nextCounter).src;
      } else{
        currentElement.src = firstImgSrc;
      }
    }
  }
}
function prevIpCoreSlide() {
  var i;
  var smslides = getSmSlides1();
  var lastImgSrc =  document.getElementById(smallImageclass1 + (smslides.length - 1)).src;
  if (smslides !== null) {
    for (i = (smslides.length - 1); i >= 0; i--) {
      var nextCounter = i - 1;
      var currentElement = document.getElementById(smallImageclass1 + i);

      if(i > 0) {
        currentElement.src =  document.getElementById(smallImageclass1 + nextCounter).src;
      }
      else {
        currentElement.src = lastImgSrc;
      }
    }
  }
}
$(function () {
  "use strict";
  if ($('.ip-core-tool-detail-page').length > 0) {
    const expandSummary = "▼ Read more";
    const minimizeSummary = "▲ Collapse";
    const height250px = "minimize-ipCore-h250";
    const fullHeight = "expand-ipCore-h100";
    const summarySection = document.getElementsByClassName("ip-core-main-content-main")[0];
    const readMoreDiv = document.getElementById("ipCore-readmore");
    const imageDiv = document.getElementsByClassName("image-container")[0];

    if(summarySection !== null && typeof summarySection !== 'undefined') {
      summarySection.className += " minimize-ipCore-h250";
    }
    
    if(readMoreDiv !== null && typeof readMoreDiv !== 'undefined') {
      readMoreDiv.innerHTML = expandSummary;
    }

    const btn = document.getElementById("ipCore-readmore");
    
    if(btn !== null && typeof btn !== 'undefined' ) {
      btn.onclick = function() {   
        const isMinimized = document.getElementsByClassName("ip-core-main-content-main minimize-ipCore-h250")[0];
    
        if(isMinimized !== null && typeof isMinimized !== 'undefined'){
          summarySection.classList.remove(height250px);
          summarySection.classList.add(fullHeight);
          readMoreDiv.innerHTML = readMoreDiv.innerHTML.replace(expandSummary, minimizeSummary);
        } 
        else {
          summarySection.classList.remove(fullHeight);
          summarySection.classList.add(height250px);
          readMoreDiv.innerHTML = readMoreDiv.innerHTML.replace(minimizeSummary, expandSummary);
        }
      }
    }
     if(summarySection.innerText.length < 235 && imageDiv.innerText.length > 0 ) {
    				readMoreDiv.classList.add('hide-ipCore-section');
     }
 }
}());





var refdesIndex = 1;
var smallImageclass = "refdes-img-sm-";
setImgSlideId();
showRefDesSlide(refdesIndex);
setPrimaryImg()
function plusRefDesSlide(n) {
  var next = 1 + n;
  showRefDesSlide(next);
  nextRefDesSlide();
  setPrimaryImg()
}
function minusRefDesSlide(n) {
  var prev = 1 + n;
  showRefDesSlide(prev);
  prevRefDesSlide();
  setPrimaryImg()
}
function getSmSlides(){
  return document.getElementsByClassName("refdes-img-sm");
}
function showRefDesSlide(n) {
  var i;
  var y;
  var counter;
  var smslides = getSmSlides();
  if (smslides.length > 0) {
    if (n > smslides.length) {
      refdesIndex = 1
    }
      if (n < 1) {
        refdesIndex = smslides.length
      }
      for (i = 0; i < smslides.length; i++) {   
        smslides[i].style.display = "none";
      }     

      if (smslides.length<3) {          
		    counter = smslides.length;
      }
      else {
		    counter = 3;
      }

      for(y=0;y<counter;y++)
      {
        if(smslides[y] !== null){
          smslides[y].style.display = "";
        }
      }
  }
}
function setPrimaryImg() {
  var lgslide = document.getElementById("refdes-img-lg");  
  var firstImage =  document.getElementById(smallImageclass+"0");
  var secondImage =  document.getElementById(smallImageclass+"1");
  if (firstImage !== null) {
    if (secondImage !== null) {
      lgslide.src = secondImage.src;
      lgslide.alt = lgslide.src.substring(lgslide.src.lastIndexOf('/')+1, lgslide.src.lastIndexOf('.'));
      secondImage.classList.add("current-refdes-slide");
    } 
    else {
      lgslide.src = firstImage.src;
      lgslide.alt = lgslide.src.substring(lgslide.src.lastIndexOf('/')+1, lgslide.src.lastIndexOf('.'));
      firstImage.classList.add("current-refdes-slide");
    }
  }
}
function setImgSlideId() {
  var i;
  var smslides = getSmSlides();
  if (smslides !== null) {
    for (i = 0; i < smslides.length; i++) {
      smslides[i].setAttribute("id", smallImageclass + i);    
    }
  }
}
function nextRefDesSlide() {
  var i;
  var smslides = getSmSlides();  
  var firstImgSrc =  document.getElementById(smallImageclass+"0").src;
  if (smslides !== null) {
    for (i = 0; i < smslides.length; i++) {
      var nextCounter = i+1;
      var currentElement = document.getElementById(smallImageclass+ i); 

      if (nextCounter < smslides.length) {
        currentElement.src = document.getElementById(smallImageclass + nextCounter).src;
      } else{
        currentElement.src = firstImgSrc;
      }
    }
  }
}
function prevRefDesSlide() {
  var i;
  var smslides = getSmSlides(); 
  var lastImgSrc =  document.getElementById(smallImageclass + (smslides.length - 1)).src;  
  if (smslides !== null) {
    for (i = (smslides.length - 1); i >= 0; i--) {
      var nextCounter = i - 1;
      var currentElement = document.getElementById(smallImageclass + i);

      if(i > 0) {
        currentElement.src =  document.getElementById(smallImageclass + nextCounter).src;
      }
      else {
        currentElement.src = lastImgSrc;
      }
    }
  }
}
$(function () {
  "use strict";

  if ($('.reference-design-detail-page').length > 0) {
    let rootPath = 'https://login.microchip.com/';
    const devAEM = 'http://localhost:4502';
    const qaAEM = 'aem.microchip.com';
    const stageAEM = 'aem-stage.microchip.com';
    var allowDesignFiles = document.getElementById('refdesignfiles-access');

    if (allowDesignFiles !== null && typeof allowDesignFiles !== 'undefined') {
      setTimeout(function() {
        document.getElementById("refdesignfiles-access").scrollIntoView({
          behavior: "auto",
          block: "center",
          inline: "center"
        });
      }, 300);
    }
    const activeRefdesPanel = " active refdes-active-panel"
    var tablist = document.getElementsByClassName("refdes-tabs");
    var tabpanellist = document.getElementsByClassName("refdes-panel-button");

    if (tablist.length !== 0) {
      var tablistCount;
      tablist[0].style.display = "block";

      if (tablist.length > 1) {
        for (tablistCount = 1; tablistCount < tablist.length; tablistCount++) {
          tablist[tablistCount].style.display = "none";
        }
      }
    }

    if (tabpanellist.length !== 0) {
      var tabPanelCount;
      tabpanellist[0].className += activeRefdesPanel;

      if (tabpanellist.length > 1) {
        for (tabPanelCount = 1; tabPanelCount < tabpanellist.length; tabPanelCount++) {
          tabpanellist[tabPanelCount].className = tabpanellist[tabPanelCount].className.replace(activeRefdesPanel, "");
        }
      }
    }
    var expandSummary = "▼ Read more";
    var minimizeSummary = "▲ Collapse";
    var height250px = "minimize-refdes-h250";
    var fullHeight = "expand-refdes-h100";
    var summarySection = document.getElementsByClassName("ref-design-main-content-main")[0];
    var readMoreDiv = document.getElementById("refdes-readmore");

    const hideSection = "hide-refdes-section";
    const lastLine = document.getElementById("refdes-end-of-summary");

    const inViewportOf = (parent, element) => {
      const elementTop = $(element).offset().top;
      const elementBottom = elementTop + $(element).outerHeight();
    
      const viewportTop = $(parent).offset().top;
      const viewportBottom = viewportTop + $(parent).height();
    
      return elementTop > viewportTop && elementBottom < viewportBottom;
    }
    
    if (inViewportOf(summarySection, lastLine)) {
      summarySection.classList.add(fullHeight);
      summarySection.classList.remove(height250px);
      readMoreDiv.classList.add(hideSection);
    }

    if(summarySection !== null && typeof isMinimized !== 'undefined') {
      summarySection.className += " minimize-refdes-h250";
    }

    if(readMoreDiv !== null && typeof readMoreDiv !== 'undefined') {
      readMoreDiv.innerHTML = expandSummary;
    }
    var btn = document.getElementById("refdes-readmore");

    if(btn !== null && typeof btn !== 'undefined' ) {
      btn.onclick = function() {
        var isMinimized = document.getElementsByClassName("ref-design-main-content-main minimize-refdes-h250")[0];

        if (isMinimized !== null && typeof isMinimized !== 'undefined') {
          summarySection.classList.remove(height250px);
          summarySection.classList.add(fullHeight);
          readMoreDiv.innerHTML = readMoreDiv.innerHTML.replace(expandSummary, minimizeSummary);
        } else {
          summarySection.classList.remove(fullHeight);
          summarySection.classList.add(height250px);
          readMoreDiv.innerHTML = readMoreDiv.innerHTML.replace(minimizeSummary, expandSummary);
        }
      }
    }
    const countryCanada = 'Canada  CA';
    const countryUsa = 'United States of America  US';
    const marketSegment = 'market-segment';
    const projStatus = 'project-status';
    const projTimeline = 'project-timeline';
    const prodFeed = 'product-feed';
    const stateProvince = 'state-province';
    const idFieldFirstName = 'first-name';
    var refdesADFsubmit = document.getElementById("btn-refdes-adfsubmit");
    var sf_fname = document.getElementById(idFieldFirstName);
    var sf_lname = document.getElementById("last-name");
    var sf_email = document.getElementById("email");
    var sf_phone = document.getElementById("phone");
    var sf_company = document.getElementById("company");
    var sf_country = document.getElementById("country");
    var sf_state = document.getElementById("state-province");
    const stateLabel = document.getElementById("stateId");
    stateLabel.style.display = "none";
    sf_state.style.display = "none";
    const fieldErrorMessageIdExtension = '-error-message';

    // Toggle for accordion
    $('.form-accordion').click(function() {
      this.classList.toggle('form-accordion-active');
      const panel = this.nextElementSibling;

      if (panel.style.maxHeight) {
        panel.style.maxHeight = null;
      } else {
        panel.style.maxHeight = panel.scrollHeight + 'px';

        if (panel.scrollHeight <= 300) {
          const checkbox = getCheckboxElement(panel.nextElementSibling);

          // Enable immediately checkbox. Agreement has no scrolling
          checkbox.prop('disabled', false);
          // Remove validation message if there is
          checkboxErrorMessage(checkbox.attr('id'), false)
        }
      }
    });

    // Validation for agreement checkbox when user has not yet read the agreement
    $('.refdes-agreement-field').click(function() {
      const checkbox = getCheckboxElement(this);

      // Display error message when checkbox is disabled
      if (checkbox.is(':disabled')) {
        checkboxErrorMessage(checkbox.attr('id'), true);
      }
    });

    // Enable checkbox for agreement when scrolled to the bottom agreement in accordion
    $('.form-accordion-panel').scroll(function() {
      if (Math.ceil($(this).scrollTop() + $(this).innerHeight()) >= $(this)[0].scrollHeight) {
        const checkbox = getCheckboxElement(this.nextElementSibling);

        // Enable checkbox
        checkbox.prop('disabled', false);
        // Remove validation message if there is
        checkboxErrorMessage(checkbox.attr('id'), false);
      }
    })

    // Listen to changes in the form
    $('#salesforce-form').change(function(event) {
      const elementId = event.target.id;
      const validation = validateField(elementId)
      // Update error message
      updateErrorMessage(elementId, validation);
      // Enable or disable submit button
      enableSubmitSalesForm();
    });

    function checkboxErrorMessage(elementId, hasError) {
      let validation = {
        has_error: false,
        message: ''
      };

      if (hasError) {
        validation = {
          has_error: true,
          message: 'Please read the agreement to be able to agree.'
        }
      }

      updateErrorMessage(elementId, validation);
    }

    function getCheckboxElement(parentElement) {
      return $(parentElement).children().first();
    }

    function validateForm() {
      let hasErrors = false;
      const fieldErrors = [];
      // Check only specific fields + dynamic checkboxes
      const fields = [
        idFieldFirstName,
        'last-name',
        'email',
        'phone',
        'company',
        'country',
         marketSegment,
         projStatus,
        'eau',
         projTimeline,
         prodFeed,
        'solutions',
        'privacy-statement-cb'
      ];
      const country = $('#country').find(':selected').val();

      // Add state if country is either canada or usa
      if (country === countryCanada || country === countryUsa) {
        fields.push(stateProvince);
      }

      // Add checkboxes to fields for validation
      $('.refdes-agreement-checkbox').each((index, element) => {
        fields.push(element.id);
      });

      $('#salesforce-form')
        .find('input, textarea, select')
        .each((id, element) => {
          if (fields.includes(element.id)) {
            const validation = validateField(element.id);

            fieldErrors.push(validation.has_error);
          }
        });
      // Check if fields has errors
      hasErrors = fieldErrors.filter((value) => value).length > 0 ? true : false;

      return hasErrors;
    }

    function validateRequiredField(fieldValue, fieldMessage = 'Please fill out this required field') {
      let validation = {
        has_error: false,
        message: ''
      }

      // Check field if required and empty
      if (fieldValue === '') {
        validation = {
          has_error: true,
          message: fieldMessage
        }
      }

      return validation
    }

    function validateField(elementId) {
      let validation = {
        has_error: false,
        message: ''
      }

      // Check if field is a checkbox
      if (!$('#'+ elementId).is(':checkbox')) {
        // Trim field value
        const fieldValue = $.trim($('#' + elementId).val());

        switch (elementId) {
          case idFieldFirstName:
            validation = validateRequiredField(
              fieldValue,
              'First name is required'
            );
            break;
          case 'last-name':
            validation = validateRequiredField(
              fieldValue,
              'Last name is required'
            );
            break;
          case 'email':
            validation = validateRequiredField(
              fieldValue,
              'Email is required'
            );

            if (!validation.has_error) {
              // Check email format
              if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test($.trim($('#' + elementId).val())))) {
                validation = {
                  has_error: true,
                  message: 'Email format is not valid'
                }
              }
            }
            break;
          case 'phone':
            validation = validateRequiredField(
              fieldValue,
              'Phone is required'
            );

            if (!validation.has_error && fieldValue !== 'N/A') {
              // Check phone number format
              if (!(/^\+?(\d{1,3})?[-.\s]?\(?\d{1,3}\)?[-.\s]?\d{1,4}[-.\s]?\d{4,5}$/.test($.trim($('#' + elementId).val())))) {
                validation = {
                  has_error: true,
                  message: 'Phone format is not valid.'
                }
              }
            }
            break;
          case 'company':
            validation = validateRequiredField(
              fieldValue,
              'Company is required'
            );
            break;
          // Country
          case 'country':
            validation = validateRequiredField(
              fieldValue,
              'Country is required'
            );

            if (!validation.has_error) {
              // Check if valid state
              validateState();
            }
            break;
          // State
          case stateProvince:
            validation = validateRequiredField(
              fieldValue,
              'State / Province is required'
            );

            if (!validation.has_error) {
              // Check if valid state
              const country = sf_country.options[sf_country.selectedIndex];

              if (country.value === countryCanada || country.value === countryUsa) {
                validateState();
              }
            }
            break;
          // Market
          case marketSegment:
            validation = validateRequiredField(
              fieldValue,
              'Market Segment is required'
            );
            break;
          // Project
          case projStatus:
            validation = validateRequiredField(
              fieldValue,
              'Project Status is required'
            );
            break;
          // Estimated Annual Units
          case 'eau':
            validation = validateRequiredField(
              fieldValue,
              'Estimated Annual Units (EAU) is required'
            );
            break;
          // Project Timeline
          case projTimeline:
            validation = validateRequiredField(
              fieldValue,
              'Project Timeline is required'
            );
            break;
          // Question 1
          case prodFeed:
            validation = validateRequiredField(fieldValue);
            break;
          // Question 2
          case 'solutions':
            validation = validateRequiredField(
              fieldValue,
              'Please fill out this required field'
            );
            break;
        }
      } else {
        // Validate Checkboxes
        if (!$('#'+ elementId).is(':checked')) {
          validation = {
            has_error: true,
            message: 'Please check if you agree on ' + $('#'+ elementId).data('agreement-name')
          };
        }
      }

      return validation;
    }

    function updateErrorMessage(elementId, validation) {
      const fieldErrorMessageId = '#' + elementId + fieldErrorMessageIdExtension;

      if (validation.has_error) {
        // Apply error style
        $('#' + elementId).css({'margin-bottom': '0', 'background': '#ffe6ee', 'border': '1px solid #b1395f'});
        $(fieldErrorMessageId).html(validation.message);
        $(fieldErrorMessageId).css({
          'color': '#c12020',
          'font-weight': 'bold',
          'font-size': '10pt',
          'margin-bottom': '2px'
        });
      } else {
        // Remove error style
        $('#' + elementId).removeAttr('style');
        $(fieldErrorMessageId).html('');
        $(fieldErrorMessageId).removeAttr('style');
      }
    }

    function toggleStatefield(mode) {
      if (mode === 'show') {
        sf_state.style.display = "block";
        stateLabel.style.display = "block";
      } else {
        const stateFieldId = '#state-province';

        $(stateFieldId).removeAttr('style');
        $(stateFieldId + fieldErrorMessageIdExtension).html('');
        $(stateFieldId + fieldErrorMessageIdExtension).removeAttr('style');
        $(stateFieldId).attr('style');
        sf_state.selectedIndex = 0;
        sf_state.style.display = "none";
        stateLabel.style.display = "none";
      }
    }

    function validateState() {
      const country = sf_country.options[sf_country.selectedIndex];
      const state = sf_state.options[sf_state.selectedIndex];
      let validState = false;

      if (country.value === countryCanada || country.value === countryUsa) {
        validState = state.value === "" ? false : true;
        refdesADFsubmit.style.opacity = "0.5";
        refdesADFsubmit.disabled = true;
        toggleStatefield("show");
      } else if (country.value !== countryCanada || country.value !== countryUsa) {
        validState = state.value !== "" ? false : true;
        refdesADFsubmit.style.opacity = "1";
        refdesADFsubmit.disabled = false;
        toggleStatefield("hide");
      }

      return validState;
    }

    function enableSubmitSalesForm() {
      const hasErrors = validateForm();

      if (
        !hasErrors
        && validateState()
      ) {
        refdesADFsubmit.style.opacity = "1";
        refdesADFsubmit.disabled = false;
      } else {
        refdesADFsubmit.style.opacity = "0.5";
        refdesADFsubmit.disabled = true;
      }
    }

    // Close modal
    $('.form-close-modal').click(() => {
      const modalUnsafeContainer = $('.mchp-unsafe-html-modal-container');
      const body = $('body');

      modalUnsafeContainer.removeClass('show-embed-modal').addClass('hide-embed-modal');
      body.removeClass('disable-body-scroll');
    });

    const adfBtn = document.getElementById("refdes-adf-btn");

    if (adfBtn !== null && typeof adfBtn !== 'undefined') {
      adfBtn.addEventListener("click", function() {
        getUserProfile();
      });
    }

    function checkEnvironment() {
      const source = window.location.origin.toLowerCase().trim();
      if (source.indexOf(devAEM.toLowerCase().trim()) > -1) {
        rootPath = 'https://testlogin.microchip.com/';
      } else if (source.indexOf(qaAEM.toLowerCase().trim()) > -1) {
        rootPath = 'https://testlogin.microchip.com/';
      } else if (source.indexOf(stageAEM.toLowerCase().trim()) > -1) {
        rootPath = 'https://stagelogin.microchip.com/';
      }
    }

    function getUserProfile() {
      checkEnvironment();
      const target = rootPath + "ssoapi/api/SecuredUser/GetUserProfile";
      const accessToken = localStorage.getItem("AccessToken");

      if (accessToken !== null && typeof accessToken !== 'undefined') {
        try {
          $.ajax({
            url: target,
            type: 'GET',
            dataType: "json",
            headers: {
              Authorization: 'Bearer ' + accessToken
            },
            success: function(data) {
              if(data.hasOwnProperty('firstName')){
                const firstname = data.firstName !== "" ? data.firstName : "N/A";
                sf_fname.value = firstname;
              }
              if(data.hasOwnProperty('lastName')){
                const lastname = data.lastName !== "" ? data.lastName : "N/A";
                sf_lname.value = lastname;
              }
              if(data.hasOwnProperty('phoneNumber')){
                const phoneNumber = data.phoneNumber !== "" ? data.phoneNumber : "N/A";
                sf_phone.value = phoneNumber;
              }
              if(data.hasOwnProperty('emailAddress')){
                const emailAddress = data.emailAddress !== "" ? data.emailAddress : "N/A";
                sf_email.value = emailAddress;
              }
              if(data.hasOwnProperty('companyName')){
                const companyName = data.companyName !== "" ? data.companyName : "N/A";
                sf_company.value = companyName;
              }
            },
            error: function(error) {
              console.log(error);
            },
          });
        }
        catch (error) {
          console.log(error);
        }
      }
    }
  }
}());

function refdesTabs(evt, tab) {  
  const activePanel = " active refdes-active-panel";
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("refdes-tabs");
  tablinks = document.getElementsByClassName("refdes-panel-button");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(activePanel, "");
  }
  document.getElementById(tab).style.display = "block";
  evt.currentTarget.className += activePanel;
}

function showRefdesModal(){
  const getadf = "Request Access to Design Files";
  const logingetadf = "Login for Design Files";  
  const spanadf = document.getElementsByClassName("span-refdes-adf")[0];
  const modalUnsafeContainer = $('.mchp-unsafe-html-modal-container');
  const body = $('body');
  if(modalUnsafeContainer.hasClass('hide-embed-modal')){
    spanadf.innerHTML = spanadf.innerHTML.replace(logingetadf, getadf);
    showUnsafeHTMLModalForm(modalUnsafeContainer, body);
    getUserProfile();
  }
}

$(function () {
    $('.download-all-button-wrapper').off('click').on('click',function(event){
        event.preventDefault();
        const hrefs = [];
        $('.mchp-document-datatable').DataTable().rows().iterator('row', function(context, index){
            hrefs.push($(this.row(index).node()).find('a').first().prop('href'));
        });
        clickAll(hrefs);
    });
});
function clickAll(hrefs){
    const href = hrefs.pop();
    var tempTag = document.createElement('a');
    tempTag.style.display = 'none';
    document.body.appendChild(tempTag);
    tempTag.setAttribute('href', href);
    tempTag.setAttribute('class', 'tempTag');
    tempTag.setAttribute('download', href.basename());
    tempTag.click();
    setTimeout(() => {
        if(hrefs.length > 0){
            clickAll(hrefs);
        } else {
            $('.tempTag').remove();
        }
    }, 200);
}
$(function () {
  "use strict";
  const dataTableDefaults = { "columnDefs": [{ "targets": "no-sort", "orderable": false }], "paging": true,"pagingType": "simple_numbers","searching": false, "pageLength": 12 };
  $.each(['tableSiliconProducts'], function (i, tableClass) {
    const dataTableOptions = Object.assign({}, dataTableDefaults);
    if ($('.' + tableClass).data('total-items') <= 12) {
      dataTableOptions.paging = false;
    }
    $('.' + tableClass + ' table').DataTable(dataTableOptions);
  });
}());
$(document).ready(function() {
    var docCodeFilterID = '#docCode-filter',
        doccodeTable = '#docListingCodeTable',
        hideDisplay = 'dp-display-none',
        optionlistvaluesclass = '.option-list-values',
        ddselectid = '#dropdown-select',
        parentArray, numresults, childArray, categorylist, prodcatlist,
		docCodeErrorDiv = '.docCode-error',
		titlesinput = 'div#titleinput',
		docCodeTables = '#docCode-table',
        sorthtml = "class='fa fa-sort-asc' aria-hidden='true'></i>",
        CodeExamplesArray = $('#CodeExamples').data('code-examples');

    var getuniqueResults = (array) => {
        var uniqueNames = [];
        var isduplicate;
        $.each(array, function(i, el) {
            isduplicate = false;
            if (uniqueNames.length > 0) {
                for (var uniqueName of uniqueNames) {
                    if (el.title === uniqueName.title) {
                        isduplicate = true;
                        break;
                    }
                }
                if (isduplicate === false) {
                    uniqueNames.push(el);
                }
            } else {
                uniqueNames.push(el);
            }
        });
        return uniqueNames;
    }

    function getFormattedDate(date) {
        var date1 = new Date(date);
        var year = date1.getFullYear();
        var month = (1 + date1.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;
        var day = date1.getDate().toString();
        day = day.length > 1 ? day : '0' + day;
        return month + '-' + day + '-' + year;
    }

    const setCodeExamplesDataToTable = (codeExamples, tableID) => {
        $(tableID).DataTable({
            data: codeExamples,
            order: [
                [0, "asc"]
            ],
            autoWidth: false,
            searching: true,
            lengthChange: false,
            pageLength: 20,
            pagingType: 'numbers',
            "scrollX": false,
            columns: [{
                    title: "Application <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                        sorthtml,
                    width: "16%"
                }, {
                    title: "Function <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                        sorthtml,
                    width: "16%"
                }, {
                    title: "Product Family <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                        sorthtml,
                    width: "14%"
                }, {
                    title: "Title <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                        sorthtml,
                    width: "38%"
                },
                {
                    title: "Updated <i id='downarrow' class='fa fa-sort-desc' aria-hidden='true'></i><i id='uparrow' " +
                        sorthtml,
                    width: "12%",
                    type: "date"
                }
            ]

        });
        var firstColumn = $(tableID).find("th")[0];
        $(firstColumn).find("i#downarrow").addClass(hideDisplay);
        $(firstColumn).siblings().find("i").addClass(hideDisplay);

        $(tableID + ' thead').on('click', 'th', (event) => {
            var $this = $(event.currentTarget);
            $this.siblings().find("i").addClass(hideDisplay);
            if ($this.find("i.dp-display-none").length > 1) {
                $this.find("i#uparrow").removeClass(hideDisplay);
            } else {
                $this.find("i.dp-display-none").removeClass(hideDisplay).siblings().addClass(hideDisplay);
            }
        });
    }

    var formatData4DocCodeTable = (PagestoFormat) => {
        parentArray = [];
        createChipicons();
        PagestoFormat.map(eachPage => {
            childArray = [];
            childArray.push(eachPage.applications);
            childArray.push(eachPage.functions);
            childArray.push(eachPage.family);
            childArray.push('<a href="' + eachPage.path + '" class="docLink" aria-label="'+eachPage.title+'" id="doc" data-docListing-number="' + PagestoFormat.indexOf(eachPage) + '">' + eachPage.title + '</a>');
            childArray.push(getFormattedDate(eachPage.lastUpdated));
            parentArray.push(childArray);
        });

        numresults = parentArray !== null ? parentArray.length : 0;
        setnumresults(numresults);
        changeFilterCount();
        setCodeExamplesDataToTable(parentArray, doccodeTable);
    };


    var getCategories = (appcatjson, prodcatjson = null) => {
        categorylist = [];
        prodcatlist = [];

        if (appcatjson !== "{}" || prodcatjson !== "{}") {
            JSON.parse(appcatjson, function(key, value) {
                if (key !== "") {
                    categorylist.push(value);
                }
            })
            JSON.parse(prodcatjson, function(key, value) {
                if (key !== "") {
                    prodcatlist.push(value);
                }
            })

        }
    }

    var OpenEndedfiltering = (jsonobject, Searchquery) => {
        var filteredResult = [];
        var SearchExpression = new RegExp(escapeRegExp(Searchquery), "i");
        $.each(jsonobject, function(jsonKey, jsonVal) {
            if (jsonVal.functions.join(',').search(SearchExpression) !== -1 ||
                jsonVal.applications.join(',').search(SearchExpression) !== -1 ||
                jsonVal.family.join(',').search(SearchExpression) !== -1 ||
                jsonVal.title.search(SearchExpression) !== -1) {
                filteredResult.push(jsonVal);
            }
        });
        return getuniqueResults(filteredResult);
    }
    var filterByappFunc = (jsonobject, selectedCategorylist) => {
        var filteredResult = [];
        for (var selectedCategory of selectedCategorylist) {
            $.each(jsonobject, function(jsonkey, jsonvalue) {
                if (selectedCategory.split('/').length === 2) {
                    for (var i = 0; i < jsonvalue.applications.length; i++) {
                        if (jsonvalue.applications[i] === selectedCategory.split('/')[0].trim() &&
                            jsonvalue.functions[i] === selectedCategory.split('/')[1].trim()) {
                            filteredResult.push(jsonvalue);
                        }
                    }
                } else {
                    for (var app of jsonvalue.applications) {
                        if (app === selectedCategory.split('/')[0].trim()) {
                            filteredResult.push(jsonvalue);
                        }
                    }
                }
            })
        }
        return getuniqueResults(filteredResult);
    }

    var filterByProdCat = (jsonobject, selectedProdCategorylist) => {
        var filteredResult = [];
        for (var selectedProdCategory of selectedProdCategorylist) {
            $.each(jsonobject, function(jsonkey, jsonvalue) {
                for (var prodfamily of jsonvalue.family) {
                    if (prodfamily === selectedProdCategory.split('/')[0].trim()) {
                        filteredResult.push(jsonvalue);
                    }
                }
            });
        }
        return getuniqueResults(filteredResult);
    }

    function searchDocCode() {
        var prodcatjson;
        if ($(docCodeFilterID).find(ddselectid).find(optionlistvaluesclass)[0] !== undefined) {
            var appcatjson = $(docCodeFilterID).find(ddselectid).find(optionlistvaluesclass)[0].value;
            prodcatjson = $(docCodeFilterID).find(ddselectid).find(optionlistvaluesclass)[1].value;
            getCategories(appcatjson, prodcatjson);
        }
        var title = $(docCodeFilterID).find(titlesinput).children('div').children('input').val();
        var entities = CodeExamplesArray;
        if (entities) {
            if (title.trim()) {
                entities = OpenEndedfiltering(entities, title.trim());
            }
            if (categorylist.length > 0) {
                entities = filterByappFunc(entities, categorylist);
            }

            if (prodcatlist.length > 0) {
                entities = filterByProdCat(entities, prodcatlist);
            }
        }
        return entities;
    }

    function docCodesearchclick() {
        if ($(doccodeTable).length > 0) {
            var refinedData = searchDocCode();
            $(doccodeTable).dataTable().fnDestroy();
            if (refinedData !== null) {
                formatData4DocCodeTable(refinedData);
            }
        }
    }
    const createChipicons = () => {
        if ($(docCodeFilterID).length > 0) {
            for (var numjsonfield = 0; numjsonfield < $(docCodeFilterID).find(optionlistclass).children('input').length; numjsonfield++) {
                var ddcategory;
                var jsonval = JSON.parse($(docCodeFilterID).find(optionlistclass).children('input')[numjsonfield].value);
                if ($(docCodeFilterID).find(optionlistclass).children('span')[numjsonfield] !== undefined) {
                    ddcategory = $(docCodeFilterID).find(optionlistclass).children('span')[numjsonfield].innerText;
                }
                buildFilterChip(ddcategory, jsonval);
            }
        }
    }

    const escapeRegExp = (str) => { // or better use 'escape-string-regexp' package
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
    }
    var getDocuments = () => {
        if (CodeExamplesArray && $(docCodeFilterID).length > 0) {
            formatData4DocCodeTable(CodeExamplesArray);
        }
    }
    getDocuments();
    $(docCodeFilterID).find('.left-elements').off('click').on('click', function() {
        filterSliderToggle();
    });
    $(docCodeFilterID).find('.eraseIcon').click((event) => {
        docCodesearchclick();
    });

    $(docCodeFilterID).find('.reset-filter').click(() => {
        docCodesearchclick();
    });

    $(docCodeFilterID).find('.reset-filter').keypress(() => {
            docCodesearchclick();
        });

    $(docCodeFilterID).find('div.optionList').children('div').children().on('click', function(event) {
        docCodesearchclick();
    });

    $(docCodeFilterID).find(titlesinput).children('div').children('input').on('keyup', function(e) {
		 var d = [];
	     d.push($(docCodeFilterID).find(titlesinput)[0].children[0].children[1].value);
         if(d[0].length > 2 || d[0].length === 0 ){
            $(docCodeErrorDiv).attr('style', 'display:none');
            docCodesearchclick();
			$(docCodeTables).show();
        }
		else {
            $(docCodeTables).hide();
            $(docCodeErrorDiv).empty();
            $(docCodeErrorDiv).append('<h1>Please use at least 3 characters for your search!</h1>')
            $(docCodeErrorDiv).attr('style', 'display:block');
        }
    });
    $(document).on('click', '.close-filter', function(event) {
        docCodesearchclick();
    });
});
$(function () {
  "use strict";
  $.fn.tooltip = function () {
    this.each(function (i, element) {
      const spanTag = '<span></span>';
      var tooltip;
      var elementParent = $(element);
      elementParent.addClass('tooltip-initialized');
      $(this).hover(function () {
        const elementThis = $(this);
        let position = 'top';
        if (elementThis.data('tooltip-position')) {
          position = elementThis.data('tooltip-position');
        }
        tooltip = $(spanTag).addClass('tooltip').html(elementThis.data('tooltip'));
        var tooltipArrow = $(spanTag).addClass('tooltip-arrow');
        $('body').append(tooltip.append(tooltipArrow)).show();
        let offset;
        if (elementThis.data('tooltip-offset')) {
          offset = elementThis.data('tooltip-offset');
        } else {
          offset = parseInt(getComputedStyle(document.querySelector('.tooltip')).getPropertyValue('--offset'));
        }
        const arrowWidth = parseInt(getComputedStyle(document.querySelector('.tooltip')).getPropertyValue('--arrow-width'));
        const tooltipOffset = arrowWidth + offset;
        if (position === 'top') {
          tooltip.addClass('tooltip-top');
          tooltip.css('top', elementParent.offset().top - tooltip.outerHeight() - tooltipOffset);
          tooltip.css('left', elementParent.offset().left + elementParent.outerWidth() / 2 - tooltip.outerWidth() / 2);
        } else if (position === 'right') {
          tooltip.addClass('tooltip-right');
          tooltip.css('top', elementParent.offset().top + elementParent.outerHeight() / 2 - tooltip.outerHeight() / 2);
          tooltip.css('left', elementParent.offset().left + elementParent.outerWidth() + tooltipOffset);
        } else if (position === 'bottom') {
          tooltip.addClass('tooltip-bottom');
          tooltip.css('top', elementParent.offset().top + elementParent.outerHeight() + tooltipOffset);
          tooltip.css('left', elementParent.offset().left + elementParent.outerWidth() / 2 - tooltip.outerWidth() / 2);
        } else if (position === 'left') {
          tooltip.addClass('tooltip-left');
          tooltip.css('top', elementParent.offset().top + elementParent.outerHeight() / 2 - tooltip.outerHeight() / 2);
          tooltip.css('left', elementParent.offset().left - tooltip.outerWidth() - tooltipOffset);
        } else if (position === 'top-center') {
          tooltip.addClass('tooltip-top-center');
          tooltip.css('top', elementParent.offset().top - tooltip.outerHeight() - tooltipOffset);
          tooltip.css('left', elementParent.offset().left + elementParent.outerWidth() / 2 - tooltip.outerWidth() / 2);
        }
        if (elementThis.data('tooltip-color')) {
          tooltip.css('color', elementThis.data('tooltip-color'));
        }
        const backgroundColorDataName = 'tooltip-background-color';
        if (elementThis.data(backgroundColorDataName)) {
          tooltip.css('background-color', elementThis.data(backgroundColorDataName));
          tooltip.css('border-color', elementThis.data(backgroundColorDataName));
          tooltipArrow.css('border-' + position + '-color', elementThis.data(backgroundColorDataName));
        }
      }, function () {
        tooltip.remove();
      }).on('remove', function () {
        tooltip.remove();
      });
    });
    return this;
  };
  tooltipInit();
}());
function tooltipSetHTML(html){
  $('.tooltip').html(html);
  $('.tooltip').append($('<span></span>').addClass('tooltip-arrow'));
}
function tooltipInit(){
  if (typeof window.tooltipInitTimeout !== 'undefined') {
    clearTimeout(window.tooltipInitTimeout);
  }
  window.tooltipInitTimeout = setTimeout(() => {
    const initItems = $('[data-tooltip]').not('[data-tooltip=""]').not('.tooltip-initialized');
    if(initItems.length > 0){
      initItems.tooltip();
    }
    tooltipInit();
  }, 300);
}
$(document).ready(function() {

    $('.parametricsearch').each(function() {
        const $this = $(this);
        const paramentricSRnumOfDocuments = $this.data('numofproducts');
        const pDefaultSortColumn = $this.data('defaultSortColumn');
        const pDomTable = $this.find('table:first');
        const datatablePaginate = $this.find('.dataTables_paginate');
        
        if (!pDomTable) {
            return;
        }
        if (pDomTable.find("tr").length > 0) {
            let pDaTable = createParametricsearchresultablewithoutPagination(pDomTable, pDefaultSortColumn, paramentricSRnumOfDocuments, false, $this);


            $("#parametricpagination").change(function() {
                if (this.checked) {
                    removePaginationDom($this);
                    pDaTable = createParametricsearchresultablewithPagination(pDomTable, pDefaultSortColumn, paramentricSRnumOfDocuments, true, $this);
                    if (pDaTable.page.info() && pDaTable.page.info().pages === 1) {
                        removePaginationDom($this);
                    } else {
                        showPaginationDom($this);
                    }
                } else {
                    removePaginationDom($this);
                    pDaTable = createParametricsearchresultablewithoutPagination(pDomTable, pDefaultSortColumn, paramentricSRnumOfDocuments, true, $this);
                }
            });

            // hide the pagination
            if (pDaTable.page.info() && pDaTable.page.info().pages === 1) {
                datatablePaginate.hide();
            } else {
                showPaginationDom($this);
            }

        } else {
            return;
        }
    });
});

const showPaginationDom = (currentContext) => {
   currentContext.find('.dataTables_info').appendTo(currentContext);
}  
const createParametricsearchresultablewithPagination = (domTable, defaultSortColumn, numDocsPerPage, needToDestroy, currentContext) => {

    const dataTable = $(domTable).DataTable({

        dom: "flptip",
        language: {
            info: "_END_ of _TOTAL_ results",
        },
        pageLength: numDocsPerPage,
        pagingType: 'numbers',
        destroy: needToDestroy,
        order: [
            [defaultSortColumn, "asc"]
        ],
        columnDefs: [{
                targets: [0],
                orderable: false
            },

        ],
        initComplete: function() {
            currentContext.show();
        }
    });
    return dataTable;
}

const createParametricsearchresultablewithoutPagination = (domTable, defaultSortColumn, numDocsPerPage, needToDestroy, currentContext) => {

    const pDataTable = $(domTable).DataTable({

        language: {
            info: "_END_ of _TOTAL_ results",
        },
        paging: false,
        scrollY: 600,
        scrollX: true,
        pagingType: 'numbers',
        fixedHeader: true,
        destroy: needToDestroy,
        order: [
            [defaultSortColumn, "asc"]
        ],
        columnDefs: [{
                targets: [0],
                orderable: false
            },

        ],
        initComplete: function() {
            currentContext.show();
        }
    });

    return pDataTable;
}
$(document).ready(function(e) {

    var vids = $('#dynamicCFVideosplaylist video');

    // load first video element in main player as default
    var defaultvideocopy = $(vids[0]).clone();

    $('.dynamic-player').append(defaultvideocopy);
    if ($('#dynamicCFVideosplaylist')[0] !== undefined) {
        $('#dynamicCFVideosplaylist').find('video').attr('controls', true);
        $('.dynamic-playicon').css({
            'display': 'block',
        });
    }
    var v_cards = $('.vertical-video-card');
    v_cards.each(function() {
        var self = $(this);
        $(self).on('click', function(e) {
            e.preventDefault();

            var video = $(this).find('video');
            var videocardcopy = $(video).clone();
            $('.dynamic-player video').replaceWith(videocardcopy);

            if ($('#dynamicCFVideosplaylist')[0] !== undefined) {
                $('#dynamicCFVideosplaylist').find('video').attr('controls', true);
            }
            $('.dynamic-player video').get(0).play();

            $('.dynamic-playicon').css({
                'display': 'none',
            });

            $(self).css({
                'opacity': '0.5',
            })

        })
    })

    $('.dynamic-player video').parent().click(function() {
        if ($(this).find("video").get(0).paused) {
            $(this).find(".dynamic-playicon").fadeOut();
        } else {
            $(this).find(".dynamic-playicon").fadeIn();
        }
    });


});
$(document).ready(function () {

  //On tab click, carousel needs to be reinitialized to ensure correct size
  $('.cmp-tabs__tab').click(function() {
    const items = $(".related-tools-card-container");

    items.each(function (idx, item) {
      $(item).slick('unslick');
    });

    setTimeout(initCarousels, 1);
  });

  initCarousels();
});

function initCarousels() {
  const items = $(".related-tools-card-container");

  items.each(function (idx, item) {

    $(item).not('.slick-initialized').slick({
      slidesToShow: 4,
      slidesToScroll: 1,
      adaptiveHeight: false,
      infinite: true,
      responsive: [
        {
          breakpoint: 1150,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3,
            infinite: true,
            dots: false
          }
        },
        {
          breakpoint: 900,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2
          }
        },
        {
          breakpoint: 635,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }
      ]
    });
  });
}
//product-partnumber identifies the button from HTML
const dropdown = $("#product-partnumber");
const symbolContainer = $('.symbol-dropdown');
const deviceFamily = $("#cf-device-family").attr('data-device-family');

const hideClass = 'hide-content';

//Need to register the server before making call to Microchip direct here for CORS restrition, sample working URLs below

//Uncomment below line to make API call works on Prod
//const productInfoURL = 'https://www.microchipdirect.com/api/product/ProductInfo?deviceFamily=' + deviceFamily  ;

const productInfoURL = $("#cf-device-family").attr('data-api-url') + deviceFamily;

const ultralibrarianURL = 'https://vendor.ultralibrarian.com/microchip?vdrpn=';

// On button click, populate dropdown made with anchor tag with 'CPN' values from JSON got from ProductInfo API call.
// the anchor tag is used to support gating-callback on live site.

dropdown.unbind('click').on('click keypress', function () {
    symbolContainer.toggleClass(hideClass);
});


//Selection of each dropdown will update the ultraLibrarian iframe url with specific part info rendered in iframe
function getPartNumberInfo(selection) {
    const partnumber = $(selection).data('id');
    $("#partnumber-information").attr('src', ultralibrarianURL + partnumber);

    setTimeout(function () {
        $('.modal-container').removeClass(hideClass);
    }, 500);
}

//In case of error/empty in productInfoURL call, remove the Symbol button.
$(document).ready(function () {
    if (typeof deviceFamily === "undefined") {
        dropdown.hide();
    } else {
        // Only call when siliconDeviceData object is present is head tag.
        // This code id for adobe analytics on product page.
        if (typeof siliconDeviceData != "undefined" && siliconDeviceData && Object.keys(siliconDeviceData).length > 0) {
            console.log("pushing the product data to the adobe: ", siliconDeviceData)
            adobeDataLayer.push({
                "event": "prodView",
                "productData": siliconDeviceData
            });
        }

        // only call API when deviceFamily is defined
        $.ajax({
            type: 'GET',
            crossDomain: true,
            dataType: 'json',
            url: productInfoURL,
            success: function (data) {
                if (typeof data === "string") {
                    // most likely API returned a message string instead of a JSON object
                    dropdown.hide();
                    // do not process returned data
                    return;
                }
                if (data && Object.keys(data).length === 0) {
                    dropdown.hide();
                    return;
                }

                //value itself is cpn
                $.each(data, function (key, value) {
                    symbolContainer.append($('<a class="symbol-item"></a>').attr({
                        'data-id': value,
                        'href': "#",
                        'data-gating-callback': "getPartNumberInfo"
                    }).text(value));
                })
            },
            error: function () {
                dropdown.hide()
            }
        });
    }



    $(".readmore-button").on("focus", function(e) {
   		symbolContainer.addClass(hideClass);

	});

    $(".top-feature-button > .mchp-button").on("focus", function(e) {
   		symbolContainer.addClass(hideClass);

	});

    $('.modal-container').click(function (e) {
        $(e.currentTarget).addClass(hideClass);
    });

    $('body').click(function () {
        symbolContainer.addClass(hideClass);
    })

    $('#partnumber-information').click(allowClick);
    symbolContainer.click(allowClick);
    dropdown.click(allowClick);

});

function allowClick(e) {
    //TODO - in future revisit and try if there is any way to handle same and unregister this click handler for symbol's anchors from gating.js -
    //...as of now seems not possible as gating js loads before md api call gets completed and in-turn gives part list for loading symbols dropdown
    //What it does: this "stopPropagation" shall only be invoked if not generated by parent element(s) of actual symbol anchor items, and current item is symbol anchor
    //for such anchors as gating has to take place, hence Propagation shall not be stopped as gating click has to run next part of same click event chain
    if (!($(e.currentTarget).hasClass('symbol-dropdown') && $(e.target).hasClass('symbol-item') && e.handleObj.handler.name.toLowerCase() === 'allowclick')) {
        e.stopPropagation();
    }

}

$(document).ready(function () {
    //PLEASE NOTE: dcf-title is used on other pages to dynamically add the title.
    //Consider checking other components before altering.
    const dcfTitleElement = $(".dcf-title");
    if (dcfTitleElement !== undefined && dcfTitleElement.length > 0)
    {
        const firstElement = dcfTitleElement.first();
        if (firstElement.length > 0) {
            document.title = dcfTitleElement.first()[0].innerText + ' | Microchip Technology';
        }
    }
});
$(document).ready(function() {
    //Event Handler to update the cart amount and count on click of add to cart button
    $(document).on('click', '.buy-button , .deals-card .addtocart', function() {
        setTimeout(() => {
            getCartCountAndTotal();
        }, 1500);
    });
});
$(document).ready(function() {

    $('.silicondevices').each(function() {
        const $this = $(this);
        const numOfDocuments = $this.data('numofproducts');
        const defaultSortColumn = $this.data('defaultSortColumn');
        let defaultPagination = $this.data('pagination'); 
        if (defaultPagination === undefined) {
        	 defaultPagination = false;
       	}
        const domTable = $this.find('table:first');
        if (!domTable) {
            return;
        }
        if (domTable.find("tr").length > 0) {
            const dataTable = createSiliconDevicesTable(domTable, defaultSortColumn, numOfDocuments, defaultPagination, $this);
            // hide the pagination
            if (dataTable.page.info() && dataTable.page.info().pages === 1) {
                $this.find('.dataTables_paginate').hide();
            } 
        } else {
            return;
        }
    });
});

const createSiliconDevicesTable = (domTable, defaultSortColumn, numDocsPerPage, defaultPagination, currentContext) => {

    const dataTable = $(domTable).DataTable({

        dom: "ftip",
        language: {
            info: "_END_ of _TOTAL_ results",
        },
        pageLength: numDocsPerPage,
        paging:!defaultPagination,
        pagingType: 'simple_numbers',
        order: [
            [defaultSortColumn, "asc"]
        ],
        columnDefs: [{
                targets: [0],
                orderable: false
            },

        ],
        initComplete: function() {
            currentContext.show();
        }
    });

    return dataTable;
}
const buttonSelector = '.readmore-button';
const panelSelector = '.readmore-panel';
const heightAttribute = 'data-height';
const maxHeightSelector = 'max-height';
const hideContent = 'hide-content';

$(document).ready(() => {
    initReadMoreButtons();

});

//Handles read more button click
function handleButtonClick(e) {
    const button = $(e.currentTarget);
    const container = button.closest('.readmore-container');

    const buttonIcon = $('.readmore-chevron', container);
    const buttonText = $('.readmore-buttontext', container);

    const readmorePanel = $(panelSelector, container);
    const readmoreOverlay = $('.readmore-overlay', container);

    buttonIcon.toggleClass('fa-angle-down');
    buttonIcon.toggleClass('fa-angle-up');

    readmoreOverlay.toggleClass(hideContent);

    //Toggles a max-height css rule
    //Can't use class because the height is sometimes calculated with javascript
    if (readmorePanel.css(maxHeightSelector) === 'none') {
        const desiredPanelHeight = readmorePanel.attr(heightAttribute) || '200px';
        readmorePanel.css(maxHeightSelector, desiredPanelHeight);
    } else {
        readmorePanel.css(maxHeightSelector, 'none');
    }

    const currentButtonText = buttonText.text();
    const readMoreLabel = button.attr('data-readmore') || 'Read More';
    const readLessLabel = button.attr('data-readless') || 'Collapse';

    if (currentButtonText === readLessLabel) {
        buttonText.text(readMoreLabel);
        button.attr('aria-label', readMoreLabel);
    } else {
        buttonText.text(readLessLabel);
        button.attr('aria-label', readLessLabel);
    }
}

//Hides the read more button if text is less than 200px high
function initReadMoreButtons() {
    const readMorePanels = $(panelSelector);

    if ($('.product-features').length) {
        initProductFeatures();
    }

    $.each(readMorePanels, (i) => {
        const panel = $(readMorePanels[i]);
        const contentHeight = panel.height();
        let desiredHeight = panel.attr(heightAttribute) || '200px';
        desiredHeight = desiredHeight.replace('px', '');

        const container = panel.closest('.readmore-container');
        const button = $(buttonSelector, container);
        const overlay = $('.readmore-overlay', container);

        //We have only a small amount of content
        //Hide Read More button
        if (contentHeight < desiredHeight) {
            button.addClass(hideContent);
            overlay.addClass(hideContent);
        //We have a lot of content
        //Restrict its height
        } else {
            button.removeClass(hideContent);
            overlay.removeClass(hideContent);
            panel.css(maxHeightSelector, `${desiredHeight}px`);
        }
    });

    $(buttonSelector).unbind('click').click(handleButtonClick);
}

function initProductFeatures() {
    const productFeatures = $('.product-features');

    const sideColumn = $('.parametrics', productFeatures);
    const sideColumnHeight = sideColumn.outerHeight();

    const buttonContainer = $('.button-container', productFeatures);
    const buttonContainerHeight = buttonContainer.outerHeight();

    let panelHeight = sideColumnHeight - buttonContainerHeight;

    //Adjust to 200px if the height is too small to show much text
    if (panelHeight < 100) {
        panelHeight = 200;
    }

    const readMorePanel = $(panelSelector, productFeatures);
    readMorePanel.attr(heightAttribute, `${panelHeight}px`);
    readMorePanel.css(maxHeightSelector, `${panelHeight}px`);

}
$(document).ready(function () {

    const SEARCH_API = '/bin/mchp/rohsinfosearch';
    const ROHSTable = $('.ROHSTable');
    const ROHSDataTableContainer = ROHSTable.find('.mchp-rohs-table');
    const searchInput = ROHSTable.find('.ROHSTable--searchbar-field');
    const searchButton = ROHSTable.find('.ROHSTable--searchbar-button');
    const searchClear = ROHSTable.find('.search-clear');

    // messages
    const noHits = ROHSTable.find('.rohs-no-hits');
    const emailSuccess = ROHSTable.find('.rohs-email-table-success');
    const apiCallError = ROHSTable.find('.rohs-table-fail');
    const emailIncorrect = ROHSTable.find('.rohs-incorrect-email');
    const emailEmpty = ROHSTable.find('.rohs-empty-email');
    const emptySearchResultsWarning = ROHSTable.find('.rohs-empty-results-warning');
    const emptyRohsSearchTerm = ROHSTable.find('.rohs-empty-search-term');
    const emptyRohsData = ROHSTable.find('.rohs-table-no-data');

    const emailField = ROHSTable.find('.ROHSTable--email-field');

    const materialDeclaration = ROHSTable.data('materialDeclaration');
    const shippingWeight = ROHSTable.data('shippingWeight');
    const rohsCertificate = ROHSTable.data('rohsCertificate');
    const reachCertificate = ROHSTable.data('reachCertificate');

    const rohsDataTable = $('.ROHSTable--table').DataTable({
        "dom": "Bflrtip",
        "buttons": {
            "buttons": [
                {
                    text: 'Send Email',
                    action: function (e, dt) {
                        const data = dt.buttons.exportData();
                        const tableData = JSON.stringify(data);
                        const email = emailField.val().trim();

                        hideEmailMessages();

                        if (data.body.length === 0) {
                            emptySearchResultsWarning.show();
                            rohsDataTable.buttons().disable();
                        } else if (email.length === 0) {
                            emailEmpty.show();
                        } else if (!isValidEmail(email)) {
                            emailIncorrect.show();
                            rohsDataTable.buttons().disable();
                        } else {
                            $.ajax({
                                url: "/bin/mchp/sendrohssearchresult",
                                type: "POST",
                                contentType: "application/javascript",
                                data: JSON.stringify({
                                    "emailRecipient": email,
                                    "tableData": tableData
                                }),
                                success: function () {
                                    emailSuccess.show();
                                },
                                error: function () {
                                    apiCallError.show();
                                },
                            })
                        }
                    }
                }
            ],
            dom: {
                button: {
                    className: 'rohs-email-btn'
                }
            }
        },
        "fnDrawCallback": function () {
            const pagination = $('.mchp-rohs-table .dataTables_paginate');
            if (this.api().page.info().pages === 1) {
                pagination.hide();
            } else {
                pagination.show();
            }

			var api = this.api();

			var columnDatarohs = api.column(3).data().join('');
			var columnDatareach = api.column(4).data().join('');
			var columnDatascip = api.column(5).data().join('');
            var columnDatapkgsize = api.column(12).data().join('');
            var pmc = window.location.pathname.toString().toLowerCase();

            if ((columnDatarohs.length===0 && pmc.indexOf("product-material-compliance")>=0) || (pmc.indexOf("/products/")>=0 || pmc.indexOf("/product/")>=0)) {
                api.column(3).visible(false);
            } else {
                api.column(3).visible(true);
            }
 			if ((columnDatareach.length===0 && pmc.indexOf("product-material-compliance")>=0) || (pmc.indexOf("/products/")>=0 || pmc.indexOf("/product/")>=0)) {
     			api.column(4).visible( false );
 			} else {
     			api.column(4).visible(true);
 			}
            if (columnDatascip.length===0 ) {
                api.column(5).visible( false );
            } else {
                api.column(5).visible(true);
            }
            if (columnDatapkgsize.length===0){
                api.column(12).visible( false );
            } else {
                api.column(12).visible(true);
            }

            if (api.column(15).data().join('').indexOf("TRUE")>=0  ) {
				api.column(1).visible(false);
                api.column(10).visible(false);
                api.column(11).visible(false);
                api.column(13).visible(false);
            } else {
                api.column(1).visible(true);
                api.column(10).visible(true);
                api.column(11).visible(true);
                api.column(13).visible(true);
            }

            api.column(14).visible(false);
            api.column(15).visible(false);

        },
        "scrollX": true,
        "pageLength": 10,
        "language": {
            "info": "_END_ of _TOTAL_ results",
        },
        "columnDefs": [
            {
                "targets": 4,
                //"visible": materialDeclaration,
                "visible": reachCertificate,
                createdCell: function (cell, cellData, rowData) {
                    if (/<\/?[a-z][\s\S]*>/i.test(rowData[4]) === false && rowData[4] !== '' && rowData[4] !== '-') {
                        if (rowData[4].toLowerCase().startsWith("en")) {
                        	$(cell).html(`<a href="/bin/mchp/materialdeclaration?search=${rowData[4]}"  target="_blank" aria-label="Rohs reach Certificate"><i class="fas fa-file reachCertificate"></i></a>`);
                        } else if (rowData[4].toLowerCase().startsWith("http://")) {
                                $(cell).html(`<a href="${rowData[4].toLowerCase().replace('http://', 'https://')}"  target="_blank" aria-label="Rohs reach Certificate"><i class="fas fa-file reachCertificate"></i></a>`);
                        } else {
							$(cell).html(`<a href="${rowData[4]}"  target="_blank" aria-label="Rohs reach Certificate"><i class="fas fa-file reachCertificate"></i></a>`);
                        }
                    } else if (rowData[4] === '-') {
                        $(cell).text('');
                    }
                }
            },
 			{
                 "targets": 3,
                 //"visible": materialDeclaration,
                 "visible": rohsCertificate,
                 createdCell: function (cell, cellData, rowData) {
                     if (/<\/?[a-z][\s\S]*>/i.test(rowData[3]) === false && rowData[3] !== '' && rowData[3] !== '-') {
						if (rowData[3].toLowerCase().startsWith("en")) {
                         	$(cell).html(`<a href="/bin/mchp/materialdeclaration?search=${rowData[3]}"   target="_blank" aria-label="Rohs Certificate"><i class="fas fa-file rohsCertificate"></i></a>`);
                         } else if (rowData[3].toLowerCase().startsWith("http://")) {
                                $(cell).html(`<a href="${rowData[3].toLowerCase().replace('http://', 'https://')}"   target="_blank" aria-label="Rohs Certificate"><i class="fas fa-file rohsCertificate"></i></a>`);
                         } else {
							$(cell).html(`<a href="${rowData[3]}"   target="_blank" aria-label="Rohs Certificate"><i class="fas fa-file rohsCertificate" ></i></a>`);
                         }
                     } else if (rowData[3] === '-') {
                         $(cell).text('');
                     }
                 }
            },
            {
                 "targets": 7,
                  "visible": materialDeclaration,
                 createdCell: function (cell, cellData, rowData) {
                     if (/<\/?[a-z][\s\S]*>/i.test(rowData[7]) === false && rowData[7] !== '' && rowData[7] !== '-') {
                         if (rowData[7].toLowerCase().startsWith("en")) {
                         	$(cell).html(`<a href="/bin/mchp/materialdeclaration?search=${rowData[7]}"   target="_blank" aria-label="Material Declaration"><i class="fas fa-file materialDeclaration"></i></a>`);
                         } else if (rowData[7].toLowerCase().startsWith("http://")) {
                                $(cell).html(`<a href="${rowData[7].toLowerCase().replace('http://', 'https://')}"   target="_blank" aria-label="Material Declaration"><i class="fas fa-file materialDeclaration"></i></a>`);
                         } else {
							$(cell).html(`<a href="${rowData[7]}"   target="_blank" aria-label="Material Declaration"><i class="fas fa-file materialDeclaration"></i></a>`);
                         }
                     } else if (rowData[7] === '-') {
                           $(cell).text('');
                     }
                 }
            },
            {
                "targets": 9,
                "visible": shippingWeight
            },
            {
                "targets": 2,
                createdCell: function (cell, cellData, rowData) {
                    if (/<\/?[a-z][\s\S]*>/i.test(rowData[2]) === false) {
                        if (rowData[2].toLowerCase() === 'rohs') {
                        	$(cell).html(`<div class="rohs-check"></div>`);
                        } else if (rowData[2].toLowerCase() === 'non_rohs') {
                            $(cell).html(`<div class="rohs-non-rohs"></div>`);
                        } else if (rowData[2].toLowerCase() === 'eu_ce') {
                       		 $(cell).html(`<div class="rohs-eu-ce"></div>`);
                        } else if (rowData[2].toLowerCase() === 'oos') {
                             $(cell).html(`<div class="rohs-oos"></div>`);
                        } else {
                             $(cell).html(`<div class=""></div>`);
                        }
                    }
                }
            },
            {
                "targets": 6,
                createdCell: function (cell, cellData, rowData) {
                    if (/<\/?[a-z][\s\S]*>/i.test(rowData[6]) === false) {
                        if (rowData[6].toLowerCase() === 'china-efup') {
                        	$(cell).html(`<div class="rohs-chinaefup"></div>`);
                        } else if (rowData[6].toLowerCase() === 'china_rohs_50') {
                        	$(cell).html(`<div class="rohs-chinaefup-fifty"></div>`);
                        } else {
                            $(cell).html(`<div class=""></div>`);
                        }
                     }
                 }
            }
        ],
        "aaSorting": [],
        "order": [[0, "desc"]],
        "initComplete": function() {
            // add dataTables button to email container
            $('.dt-buttons').appendTo('.ROHSTable-email-container');
          }

    });

    const search = (searchTerm) => {

        $.ajax({
            url: SEARCH_API,
            method: 'GET',
            data: {'search': searchTerm}
        }).done(function (result, status) {
            const data = result.data;
            const error = result.error;
            if (status === 'success') {
                if (error === 'no_hits') {
                    noHits.show();
                } else if (data.length > 0) {
                    ROHSDataTableContainer.show();
                    rohsDataTable.clear().rows.add(data).draw();
                    enableEmail();
                } else if (data.length === 0) {
                    emptyRohsData.show();
                }
            }
        }).fail(function () {
            enableEmail();
            apiCallError.show();
        });
    }

    const isValidEmail = (email) => {
        const emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,6})?$/;
        return emailReg.test(email);
    }

    const searchItem = () => {
        const searchTerm = searchInput.val().trim();
        if (searchTerm === '') {
            emptyRohsSearchTerm.show();
        } else {
            search(searchTerm.toUpperCase());
        }
    }

    const disableEmail = () => {
        emailField.attr('disabled', 'disabled');
        rohsDataTable.buttons().disable();
    }

    const enableEmail = () => {
        emailField.removeAttr('disabled');
        rohsDataTable.buttons().enable();
    }


    const resetAll = () => {
        ROHSDataTableContainer.hide();
        rohsDataTable.clear().draw();
        disableEmail();
        // hide messages
        emptyRohsSearchTerm.hide();
        noHits.hide();
        emptyRohsData.hide();
        hideEmailMessages();
    };

    const hideEmailMessages = () => {
        emailSuccess.hide();
        emailIncorrect.hide();
        emailEmpty.hide();
        emptySearchResultsWarning.hide();
        apiCallError.hide();
    }

    emailField.on('keyup', function (event) {
        const email = emailField.val().trim();
        hideEmailMessages();

        if (!isValidEmail(email)) {
            emailIncorrect.show();
            rohsDataTable.buttons().disable();
        } else {
            rohsDataTable.buttons().enable();
            emailIncorrect.hide();
        }
        if (event.keyCode === 13) {
            $('.rohs-email-btn').click();
        }
    });

    searchInput.on('keypress', function (e) {
        if (e.keyCode === 13) {
            resetAll();
            searchItem();
        }
    });

    searchButton.on('click', function () {
        resetAll();
        searchItem();
    });

    searchClear.on('click', function () {
        resetAll();
    })





});

$(document).ready(function() {
    if ($('.productcomparison').length > 0) {
		$('.alternateProductCompare').click(function(e) {
            e.preventDefault(); 
            var url = $(this).data('url'); 
            var target = $(this).data('target'); 
            window.open(url, target);
        });
        $('#productComparisonAlternateProdDropdown a').click(function() {

            var product2name = $('.product2-name').data("product2-name");
            var pageURL = $(location).attr('href');
            var newProduct2name = $(this).text();
            pageURL = pageURL.replace(product2name, $.trim(newProduct2name));
            if (pageURL) {
                window.location.href = pageURL;
            }
        });
        
        var product1Title = $('.product1-name').data("product1-name");
        var product2Title = $('.product2-name').data("product2-name");
        $('.product-comparison-table-title').html("Compare <strong>" + product1Title + "</strong> and <strong>" + product2Title+"</strong>");
        
        $('.product-row:has(div.productcomparebtn)').addClass('product-row-btngrp');
    }
});

window.onclick = function(event) {
    if (!event.target.matches('.productComparisondropbtn')) {
        var dropdowns = document.getElementsByClassName("product-dropdown-content");
        var i;
        for (i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];
            if (openDropdown.classList.contains('show')) {
                openDropdown.classList.remove('show');
            }
        }
    }
}

function showAlternateProdDropdown() {
    document.getElementById("productComparisonAlternateProdDropdown").classList.toggle("show");
}
//Collapses the left column of the grid if there is no image carousel
//Also applies to silicon product pages, which also use a grid-container layout
$(document).ready(function () {
    const hasImageCarousel = !!$('.dcfimagecarousel .smallmediacarousel').length;

    if (!hasImageCarousel) {
        const gridContainer = $('.grid-container>.section-grouping>.aem-Grid');

        gridContainer.css('grid-template-columns', '0 1fr 33%');
    }

});



$(document).ready(function () {
    hideProductFeatures();
    hideRelatedTools();

});

//Hides product feature section if there is no data
function hideProductFeatures() {
    const section = $('.product-features');

    const buttonLinks = $('.dcfproductfeaturebuttonlink', section);
    let hasButtons = false;

    buttonLinks.each((i) => {
        const button = $(buttonLinks[i]);
        if (button.find('a').length) {
            hasButtons = true;
        }
    });

    const readMoreContainer = $('.readmore-panel', section);
    const hasReadMoreContent = readMoreContainer.children().length > 1;

    const hasParametricTable = $('.pmtctable', section).length;

    const hideSection = !(hasButtons || hasReadMoreContent || hasParametricTable);

    if (hideSection) {
        section.addClass(hideClass);
        $('[href="#Features"]').addClass(hideClass);
    }


}

//Can hide individual tabs or whole section if no data is present
function hideRelatedTools() {
    const toolSection = $('.related-tools-section');
    const tabPanels = $('.cmp-tabs__tabpanel', toolSection);
    const totalPanels = tabPanels.length;
    let inactivePanels = 0;

    tabPanels.each(function(index) {
        const panel = $(tabPanels[index]);
        if (!panel.find('.not-configured').length && !panel.find('.slick-list').length) {
            inactivePanels++;

            const tabId = panel.attr('aria-labelledby');
            const tab = $(`.cmp-tabs__tab[aria-controls="${tabId}-tabpanel"`);
            tab.addClass(hideClass);
        }

    });


    if (totalPanels === inactivePanels) {
        $('.related-tools-section').addClass(hideClass);
        $('[href="#Development%20Environment"]').addClass(hideClass);
    } else {
        const activeTab = $('.cmp-tabs__tab--active', toolSection);
        if (activeTab.hasClass('hide-content')) {
            activeTab.removeClass('cmp-tabs__tab--active');

            const activePanel = $('.cmp-tabs__tabpanel--active', toolSection);
            activePanel.removeClass('cmp-tabs__tabpanel--active');

            const visibleTabs = $('.cmp-tabs__tab:not(.hide-content)', toolSection);

            const newActiveTab = visibleTabs.eq(0);
            newActiveTab.addClass('cmp-tabs__tab--active');

            let activeTabId = newActiveTab.attr('id');
            activeTabId = activeTabId.replace('-tab', '');

            const newActivePanel = $(activeTabId);
            newActivePanel.addClass('cmp-tabs__tabpanel--active');
        }

    }
}
$(document).ready(function() {
    const searchBar = $('.has-search-clear');
    searchBar.on('input', showSearchClear)

    const searchClear = $('.search-clear');
    searchClear.on('click', clearSearchBar);
});

function showSearchClear(e) {
    const searchBox = $(e.currentTarget);
    const searchTerm = searchBox.val();

    const searchContainer = searchBox.closest('.search-container');
    const searchClear = $('.search-clear', searchContainer);
    const hideClass = 'hide-content';

    if (searchTerm) {
        searchClear.removeClass(hideClass);
    } else {
        searchClear.addClass(hideClass);
    }
}

function clearSearchBar(e) {
    const clearButton = $(e.currentTarget);
    const searchContainer = clearButton.closest('.search-container');
    const searchBox = $('.has-search-clear', searchContainer);

    const enterEvent = jQuery.Event("keyup");
    enterEvent.keyCode = 13;

    searchBox.val('');
    searchBox.trigger(enterEvent);

    clearButton.addClass('hide-content');
    const searchSuggestion = $(".mchp-searchbar-suggestion");

    searchSuggestion.hide();
    $('#sitewide-search-submit').prop("disabled", true);
}
/**
 * Inserts Previous and Next pagination skip buttons into parametric chart pagination HTML structure
 * with functionality for incrementing/decrementing the displayed results.
 * @param {String} wrapperSelector A string representing a valid HTML selector for the parent of the data table and pagination elements
 * @param {String} paginationSelector A string representing a valid HTML selector for a pagination parent element
 * @param {String} pageSelector A string representing a valid HTML selector for the pagination page elements
 * @param {String} pageDownLabel A text label for the pageDown pagination button
 * @param {String} pageUpLabel A text label for the pageUp pagination button
 */
const addPageButtons = (wrapperSelector, paginationSelector, pageSelector, pageDownLabel, pageUpLabel) => {
    const thisTable = $(wrapperSelector);
    const thisPagination = thisTable.find(paginationSelector);
    const totalPages = eval(thisPagination.find(pageSelector).last().text());
    const currentPage = eval(thisPagination.find('.current').text());
    const tableId = thisTable.attr("id");
    const pageDownButton = `<button class="paginate-skip-button pageDownButton pagePrevButton${tableId}"><i class="fas fa-chevron-left"></i> ${pageDownLabel} </button>`;
    const pageUpButton = `<button class="paginate-skip-button pageUpButton pageNextButton${tableId}"> ${pageUpLabel} <i class="fas fa-chevron-right"></i></button>`;

    $(thisPagination).find('.pageNextButton' + tableId ).remove();
    $(thisPagination).find('.pagePrevButton' + tableId ).remove();

    if (currentPage !== 1) {
        thisPagination.prepend(pageDownButton);
    }

    if (currentPage !== totalPages) {
        thisPagination.append(pageUpButton);
    }

    $('.pagePrevButton' + tableId).on('click', function () {
        if (currentPage > 1) {
            thisPagination.find('.current').prev().click();
        }
    })

    $('.pageNextButton' + tableId).on('click', function () {
        if (currentPage < totalPages) {
            thisPagination.find('.current').next().click();
        }
    })

    $(pageSelector).not('.current').on('click', function () {
        addPageButtons(wrapperSelector, paginationSelector, pageSelector, pageDownLabel, pageUpLabel);
    })
}

$(document).ready(function() {

    const dcpagediv = "#paramchart-dc-page";
    const paramChartTable = 'paramchart-table';
    const similarDeviceTable = "similar-devices-table";
    const dcsimilardevicediv ="#dc-page-similardevicediv";
    const similardevicejumplink = "a[href='#Similar%20Devices']";
    const dcparamchartdiv ="#dc-page-chartdiv";
    const dcpageloader = ".dcpage-content-loader";
    const contentShowClass = "content-show";
    const contentHideClass = "content-hide";
    const displaynoneClass = "display-none";
    const hidedcPCLoader = (currentTableId) => {
        $(dcpageloader).removeClass(contentShowClass);
        $(dcpageloader).addClass(contentHideClass);
        if(currentTableId.indexOf(similarDeviceTable) === -1) {
            $(currentTableId).parents(dcparamchartdiv).addClass(contentShowClass);
            $(currentTableId).parents(dcparamchartdiv).removeClass(contentHideClass);
        }
        else{
            $(currentTableId).parents(dcsimilardevicediv).addClass(contentShowClass);
            $(currentTableId).parents(dcsimilardevicediv).removeClass(contentHideClass);
        }
        $(dcpagediv).attr("aria-busy", false);
    }

    const showdcPCLoader = (currentTableId) => {
        const currentPCLoader = $(currentTableId).parents(dcpagediv).children(dcpageloader);
        $(currentPCLoader).addClass(contentShowClass).siblings().removeClass(contentShowClass);
        $(currentPCLoader).removeClass(contentHideClass).siblings().addClass(contentHideClass);
        $(currentPCLoader).attr("aria-busy", true);
    }

    const paginateButton = '.paginate_button';
    const environmentURL = $(location).attr('origin');
    const promiseFailError = "Native Promise: Failed from timeout";
    const dotcomAPIError = "Error while calling the dot com API.";
    const stageUrl = "aem-stage.microchip.com";
    const  chartEnv = new MchpEnvContext();

    if ($(dcpagediv) && $(dcpagediv).length > 0) {
        const noRecordsMessageClass = ".no-records-message";
        const noSimilarRecordsMessageClass = ".no-similardevice-records-message";
        const pcsearchClass = ".pc-search";
        const dataChartId = "data-chartid";
        const dataViewType = "data-view-type";
        const dataBranchId = "data-branchid";
        const buttonsChartId = "data-chart-id";
        const paramChartTableDiv = ".param-chart-table-div";
        const paramChartTableId = "#paramchart-table";
        const similarDeviceTableId = "#similar-devices-table";
        const similarDeviceProperties = "#similar-device-data";
        const paramChartAllButtons = ".paramchart-all-buttons";
        const similarDeviceAllButton = ".similar-devices-all-button";

        var getEnvironment = (envURL) => {
            if (chartEnv.isStage()) {
                return 'https://stageapps.microchip.com'
            } else if (chartEnv.isProd()) {
                return 'https://www.microchip.com'
            } else {
                return 'https://test.microchip.com'
            }
        }
        const fetchSimiarDevicesData = (deviceFamily) => {
            var apiDomain = getEnvironment(environmentURL);
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: apiDomain + '/chartAPIPreviewExternal/api/Chart/GetSimilarDevicesAndParametrics?deviceName=' +
                        deviceFamily,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',

                    success: function(data) {
                        resolve(data.similarDevices)
                    },
                    error: function(error) {
                        reject(error)
                    },
                })
            })

        }

        const applyColorsForSimilarDevices = () => {
            if($(similarDeviceTableId).find("th").length > 0) {
                $(similarDeviceTableId).find("th").css({
                    "backgroundColor":$(similarDeviceProperties).data("tableheaderregular"),
                    "color":$(similarDeviceProperties).data("tableheadertextregular")});
                $(similarDeviceTableId).find("th").hover(function(){
                    $(this).css({
                     "backgroundColor":$(similarDeviceProperties).data("tableheaderhover"),
                     "color":$(similarDeviceProperties).data("tableheadertexthover")});
                }, function(){
                    $(this).css({
                        "backgroundColor":$(similarDeviceProperties).data("tableheaderregular"),
                        "color":$(similarDeviceProperties).data("tableheadertextregular")});
                });

                $(similarDeviceTableId).find("a").css({
                         "color":$(similarDeviceProperties).data("productlinkregular"),
                         "text-decoration":"underline"});
                const rowSelectors = ["tr:odd", "tr:even"];
                const backgroundColors = {"odd": "#F9F9F9", "even": "#FFFFFF"};
                for(var rowIdx=0; rowIdx<rowSelectors.length; rowIdx++) {
                    $(similarDeviceTableId).find(rowSelectors[rowIdx]).hover(function(){
                         $(this).find("td").css({
                             "backgroundColor":$(similarDeviceProperties).data("tablerowhover"),
                             "color":$(similarDeviceProperties).data("tabletexthover")});
                         $(this).find("a").css({"color":$(similarDeviceProperties).data("tabletexthover")});
                    }, function(){
                         $(this).find("td").css({
                             "backgroundColor": backgroundColors[$(this).attr("class")],
                             "color":"#2c2c2b"});
                         $(this).find("a").css({"color":$(similarDeviceProperties).data("productlinkregular")});
                    });
                }
            }

        }

        const populateSimilarDevices = (similarDevices) => {

            if ($.fn.dataTable.isDataTable(similarDeviceTableId)) {
                $(similarDeviceTableId).dataTable().fnDestroy();
            }

            var tableData = [], tblColumnArray = [];
            var columns = Object.keys(similarDevices[0]);
            for (let i = 0; i < columns.length; i++) {
                const eachColumnObj = { title: "" };
                eachColumnObj.title = columns[i];
                tblColumnArray.push(eachColumnObj);
            }
            for(var idx=0; idx<similarDevices.length; idx++) {
                if(similarDevices[idx]['Product'] !== deviceFamily) {
                    var similarDeviceRow = [];
                    for(var colIdx=0; colIdx<columns.length; colIdx++){
                       if(columns[colIdx] === 'Product') {
                            var productLinkAnchor = '<a href = "' + chartEnv.getProductPageLink(similarDevices[idx][columns[colIdx]]) +
                            '" target = "_blank">' + similarDevices[idx][columns[colIdx]] + '</a>';
                            similarDeviceRow.push(productLinkAnchor);
                        }
                        else {
                            similarDeviceRow.push(similarDevices[idx][columns[colIdx]]);
                        }
                    }
                    tableData.push(similarDeviceRow);
                }
            }
            if(tableData.length>0) {
                $(similarDeviceTableId).DataTable({
                    data: tableData,
                    columns: tblColumnArray,
                    autoWidth: false,
                    searching: false,
                    lengthChange: false,
                    info: true,
                    paging: true,
                    pageLength: 6
                })
                .on( 'draw.dt', function () {
                    applyColorsForSimilarDevices();
                });
            }
            else {
                hidedcPCLoader(similarDeviceTableId);
                $(dcsimilardevicediv).removeClass(contentShowClass);
                $(dcsimilardevicediv).addClass(contentHideClass);
                $(similardevicejumplink).removeClass(contentShowClass);
                $(similardevicejumplink).addClass(contentHideClass);
            }
        }


        const showNoRecordMessage = (chartid) => {
            const withPrefix = "chartno_" + chartid;
            $("[" + dataChartId + "='" + chartid + "']").find(noRecordsMessageClass).removeClass(displaynoneClass);
            $("[" + dataChartId + "='" + chartid + "']").find(noRecordsMessageClass).siblings().addClass(displaynoneClass);
            $("[" + dataBranchId + "='" + chartid + "']").find(pcsearchClass).addClass(displaynoneClass);

            $("[" + dataChartId + "='" + withPrefix + "']").find(noRecordsMessageClass).removeClass(displaynoneClass);
            $("[" + dataChartId + "='" + withPrefix + "']").find(noRecordsMessageClass).siblings().addClass(displaynoneClass);
            $("[" + dataBranchId + "='" + withPrefix + "']").find(pcsearchClass).addClass(displaynoneClass);

        }
        let chartsOnThepage = [];
        let chartviewtypeArray = {};

        const getChartIdForTab = (correspondingTabPanel) => {

            let chartId = correspondingTabPanel.find(paramChartTableDiv).attr(dataChartId)?.trim();
            if (chartId !== undefined && chartId.indexOf('chartno_') !== -1) {
                chartId = chartId.replace('chartno_', '');
            }
            return chartId;
        }

        const parentTabsComponent = $('.paramchart-dc-page').parents('.cmp-tabs');
        //if tabs are used with paramchart
        if(parentTabsComponent && parentTabsComponent.length > 0) {

            //Load for active tabs only
            const activeTabs = parentTabsComponent.find('.cmp-tabs__tab--active');
            activeTabs.each(function() {

                const correspondingTabPanelId = $(this).attr('id').split('-tab')[0];
                const correspondingTabPanel = $(this).parents('.cmp-tabs').find('#' + correspondingTabPanelId);
                const chartId = getChartIdForTab(correspondingTabPanel);
                if(chartId != null) {
                    chartsOnThepage.push(chartId);
                }
                $(correspondingTabPanel).find(paramChartTableId).attr('id', paramChartTable + '-' + chartId);
                $(correspondingTabPanel).find(paramChartAllButtons).attr(buttonsChartId, chartId);
                const viewtypeID = correspondingTabPanel.find(paramChartTableDiv).attr(dataViewType)?.trim();
                if (viewtypeID && viewtypeID === 'false') {
                    chartviewtypeArray[chartId] = "designcenterview" + "Regular";
                } else if (viewtypeID && viewtypeID === 'true') {
                    chartviewtypeArray[chartId] = "designcenterview" + "IsPopular";
                }
            });

            //event listeners for all tabs
            const parentTabs = parentTabsComponent.find('.cmp-tabs__tab')
            parentTabs.each(function() {
                 $(this).on('click', function() {
                    chartsOnThepage = [];
                    chartviewtypeArray = {};

                    const correspondingTabPanelId = $(this).attr('id').split('-tab')[0];
                    const correspondingTabPanel = $(this).parents('.cmp-tabs').find('#' + correspondingTabPanelId);
                    const chartId = getChartIdForTab(correspondingTabPanel);
                    if(chartId !== undefined && $(correspondingTabPanel).find(paramChartTableId+"-"+chartId).length === 0) {
                        chartsOnThepage.push(chartId);
                        $(correspondingTabPanel).find(paramChartTableId).attr('id', paramChartTable + '-' + chartId);
                        $(correspondingTabPanel).find(paramChartAllButtons).attr(buttonsChartId, chartId);

                        const viewtypeID = correspondingTabPanel.find(paramChartTableDiv).attr(dataViewType)?.trim();
                        if (viewtypeID && viewtypeID === 'false') {
                            chartviewtypeArray[chartId] = "designcenterview" + "Regular";
                        } else if (viewtypeID && viewtypeID === 'true') {
                            chartviewtypeArray[chartId] = "designcenterview" + "IsPopular";
                        }

                        if (chartsOnThepage && chartsOnThepage.length > 0) {
                            for(var idx=0; idx<chartsOnThepage.length; idx++){
                                const currentChartId = chartsOnThepage[idx];
                                showdcPCLoader(paramChartTableId + "-" + currentChartId);
                                callBranchidAPIMongo(currentChartId)
                                    .then(dotcomAPIData => {
                                        builddcpageTableDataMongo(dotcomAPIData);
                                        hidedcPCLoader(paramChartTableId + "-" + currentChartId);
                                    })
                                    .catch((err) => {
                                    sessionStorage.setItem('chartapicallerror', err);
                                    if (err.statusText === 'timeout') {
                                        console.error(promiseFailError);
                                    }
                                    console.error(dotcomAPIError, err);
                                    hidedcPCLoader(paramChartTableId + "-" + currentChartId);
                                });
                            }
                        }
                    }

                });
            });
        }
        $(".legacyparametrictable").each(function() {

            const isSimilarDevice = $(this).find(dcpagediv).data("issimilardevice");
            if(isSimilarDevice) {
                const deviceFamily =$("#similar-device-data").data("devicefamily");
                showdcPCLoader(similarDeviceTableId);
                fetchSimiarDevicesData(deviceFamily)
                .then(similarDevices => {
                    if(similarDevices?.length > 1) {
                        populateSimilarDevices(similarDevices);
                        applyColorsForSimilarDevices();
                        hidedcPCLoader(similarDeviceTableId);
                        $(noSimilarRecordsMessageClass).addClass(displaynoneClass);
                        $(noSimilarRecordsMessageClass).siblings().removeClass(displaynoneClass);
                        var similarDevicesViewAllPath = "/en-us/similar-devices";
                        if(chartEnv.isAuthor()) {
                            similarDevicesViewAllPath = "/content/mchp" + similarDevicesViewAllPath + ".html";
                        }
                        $(similarDeviceAllButton).attr("href",similarDevicesViewAllPath + "?deviceFamily=" + deviceFamily);
                    }
                    else {
                        hidedcPCLoader(similarDeviceTableId);
                        $(dcsimilardevicediv).removeClass(contentShowClass);
                        $(dcsimilardevicediv).addClass(contentHideClass);
                        $(similardevicejumplink).removeClass(contentShowClass);
                        $(similardevicejumplink).addClass(contentHideClass);

                    }
                })
                .catch((err) => {
                    hidedcPCLoader(similarDeviceTableId);
                    $(dcsimilardevicediv).removeClass(contentShowClass);
                    $(dcsimilardevicediv).addClass(contentHideClass);
                    $(similardevicejumplink).removeClass(contentShowClass);
                    $(similardevicejumplink).addClass(contentHideClass);
                    console.error("Error while fetching similar devices : ", err);
                });
            }

            else if($(this).parents('.cmp-tabs').length===0)  {
                let eachChartID = $(this).find(paramChartTableDiv).attr(dataChartId)?.trim();
                try {
                    const eachviewtypeID = $(this).find(paramChartTableDiv).attr(dataViewType)?.trim();


                    if (eachChartID !== undefined && eachChartID.indexOf('chartno_') !== -1) {
                        eachChartID = eachChartID.replace('chartno_', '');
                    }

                    chartsOnThepage.push(eachChartID);

                    $(this).find(paramChartTableId).attr('id', paramChartTable + '-' + eachChartID);
                    $(this).find(paramChartAllButtons).attr(buttonsChartId, eachChartID);

                    if (eachviewtypeID && eachviewtypeID === 'false') {
                        chartviewtypeArray[eachChartID] = "designcenterview" + "Regular";
                    } else if (eachviewtypeID && eachviewtypeID === 'true') {
                        chartviewtypeArray[eachChartID] = "designcenterview" + "IsPopular";
                    }
                } catch (e) {
                    console.error("Error while assign chart ids.", e);
                    hidedcPCLoader(paramChartTableId + "-" + eachChartID);
                }
            }

        });

       const toggleSortIcon = (clickTargetSelector) => {
            const iconSelector = '.sort-icon';
            const unsortedIconClass = 'far';
            const sortedIconClass = 'fas';
            $(document).on('click', clickTargetSelector, function (e) {
                if (!$(e.target).find(iconSelector).hasClass(sortedIconClass)) {
                    $('.' + sortedIconClass).toggleClass(sortedIconClass, unsortedIconClass);
                    $(e.target).find(iconSelector).addClass(sortedIconClass);
                }
            })
        }

        const customizedcTableObj = (tableData, tableColumns, sortcolumn, sortorder, _chartid) => {
            try {
                if (sortorder) {
                    sortorder = sortorder.trim();
                } else {
                    sortorder = 'asc';
                }

                const tableOptions = {
                    data: tableData,
                    order: [
                        [sortcolumn, sortorder]
                    ],
                    autoWidth: false,
                    searching: true,
                    lengthChange: false,
                    info: false,
                    paging: true,
                    columns: tableColumns,
                    pageLength: 8,
                    pagingType: 'numbers',
                    language: { search: '', searchPlaceholder: "Search Parametric Data" }


                }
                return tableOptions;
            } catch (e) {
                console.error("Error while forming the table obj.", e);
                showNoRecordMessage(_chartid);
                hidedcPCLoader(paramChartTableId + "-" + eachChartID);
            }
            return null;
        }


        const callBranchidAPIMongo = (chartId) => {
            var apiDomain = getEnvironment(environmentURL);
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: apiDomain + '/chartAPIPreviewExternal/api/Chart/GetChartParametricDesignCenterPageViewById?chartId=' + chartId,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    timeout: 50000,

                    success: function(data) {
                        data.chartId = chartId;
                        resolve(data)
                    },
                    error: function(error) {
                        reject(error)
                    },
                })
            })
        }

        const createTableRowsMongo = (eachchartObjdata, _chartid) => {
            const chartnumber = _chartid;
            try {
                const tableRowsArray = [];
                let domainurl = "www.microchip.com";
                const stageurlCheck = window.location.hostname;
                if (stageurlCheck.indexOf("author-microchip-stage65e.adobecqms.net") !== -1 || stageurlCheck.indexOf(stageUrl) !== -1) {
                    domainurl = stageUrl;
                }
                const popularViewColumns = eachchartObjdata["chartData"];
                for (let j = 0; j < popularViewColumns.length; j++) {
                    const eachRow = [];
                    const chartObjSortOrder = Object.keys(eachchartObjdata["chartData"][0]["demographics"]);
                    for (let m = 0; m < chartObjSortOrder.length; m++) {
                        const eachColumnVal = popularViewColumns[j]["demographics"][chartObjSortOrder[m]];
                        eachRow.push(eachColumnVal)
                    }
                    const productpage = "https://" + domainurl + "/en-us/product/" + eachRow[0];
                    const productLink = '<a class="productlink" href="' + productpage + '"  target="_blank">' + eachRow[0] + '</a>';
                    const mdapiLink = "";
                    const productDocAnchorLink = "";
                    eachRow[0] = '<div class="product-column">' +
                        '<div class="productname"><span>' + productLink + '</span><span class="pc-buy-button">' + mdapiLink + '</span></div>' +
                        productDocAnchorLink +
                        '</div>';

                    tableRowsArray.push(eachRow);
                }
                return tableRowsArray;
            } catch (e) {
                console.error("Error while creating table rows.", e);
                showNoRecordMessage(chartnumber);
                hidedcPCLoader(paramChartTableId + "-" + _chartid);
            }
            return null;
        }

        /**
         * @purpose: Function to build the table columns.
         */
        const createTableColumnsMongo = (eachchartObjdata, _chartid) => {

            try {
                const tblColumnArray = [];
                const chartDataColumns = Object.keys(eachchartObjdata["chartData"][0]["demographics"]);
                for (let i = 0; i < chartDataColumns.length; i++) {
                    const eachColumnObj = { title: "" };
                    eachColumnObj.title = chartDataColumns[i];
                    tblColumnArray.push(eachColumnObj);
                }
                return tblColumnArray;
            } catch (e) {
                console.error("Error while creating table columns.", e);
                showNoRecordMessage(_chartid);
                hidedcPCLoader(paramChartTableId + "-" + _chartid);
            }
            return null;
        }

        const initdcParamTableMongo = (chartid, chartObj, sortorder, sortcolumnName) => {
            try {
                const tblColumnArraydcpage = createTableColumnsMongo(chartObj, chartid);
                const tableRowsArrayDatadcpage = createTableRowsMongo(chartObj, chartid);

                if (tableRowsArrayDatadcpage.length === 0) {

                    const columnsDetails = Object.keys(chartObj["chartData"][0]["demographics"]);

                    const tempArray = [];
                    for (let i = 0; i < columnsDetails.length; i++) {
                        tempArray.push('<div class="transparent-class">No Records</div>');
                    }
                    tableRowsArrayDatadcpage.push(tempArray);

                }
                let sortcolumn = 0;
                if (sortcolumnName) {
                    sortcolumn = Object.keys(chartObj["chartData"][0]["demographics"]).indexOf(sortcolumnName);
                    if (!sortcolumn || sortcolumn < 0) {
                        sortcolumn = 0;
                    }
                }
                if (!sortorder) {
                    sortorder = "asc";
                } else {
                    sortorder = sortorder.trim();
                }

                const tableObj = customizedcTableObj(tableRowsArrayDatadcpage, tblColumnArraydcpage, sortcolumn, sortorder, chartid);
                if ($.fn.dataTable.isDataTable(paramChartTableId + '-' + chartid)) {
                    $(paramChartTableId + '-' + chartid).dataTable().fnDestroy();
                }
                $(paramChartTableId + '-' + chartid).DataTable(tableObj);
                addPageButtons('#paramchart-table-' + chartid + '_wrapper', '#paramchart-table-' + chartid + '_paginate', paginateButton, 'Previous', 'Next');

            } catch (e) {
                console.error("Error while dc page table.", e);
                showNoRecordMessage(chartid);
                hidedcPCLoader(paramChartTableId + "-" + chartID);
            }
        }

        const builddcpageTableDataMongo = (apiData) => {
             try {
                if(apiData["chartDemographics"] !=null){
                initdcParamTableMongo(apiData["chartId"],
                    apiData,
                    apiData["chartDemographics"]["defaultDesignCenterSortOrder"],
                    apiData["chartDemographics"]["defaultDesignCenterSortColumn"]);
                }
                else{
                    showNoRecordMessage(apiData["chartId"]);
                }
            } catch (err) {
                showNoRecordMessage();
                console.error("Error in paramchart data " + apiData["chartId"]);
            }

            /**
             * Sets up the functionality for toggling the sort column functionality,
             * for tables where column sorting is enabled
             * @param {String} clickTargetSelector A string representing the clickable HTML selector for sorting the column content
             */

            toggleSortIcon('table.dataTable th');

        }


        if (chartsOnThepage && chartsOnThepage.length > 0) {
            for(var cIdx=0; cIdx<chartsOnThepage.length; cIdx++){
                const currentChartId = chartsOnThepage[cIdx];
                showdcPCLoader(paramChartTableId + "-" + currentChartId);
                callBranchidAPIMongo(currentChartId)
                .then(dotcomAPIData => {
                    builddcpageTableDataMongo(dotcomAPIData);
                    hidedcPCLoader(paramChartTableId + "-" + currentChartId);
                })
                .catch((err) => {
                    sessionStorage.setItem('chartapicallerror', err);
                    if (err.statusText === 'timeout') {
                        console.error(promiseFailError);
                    }
                    console.error(dotcomAPIError, err);
                    hidedcPCLoader(paramChartTableId + "-" + currentChartId);

                });
            }
        }

        $(paramChartAllButtons).on('click', function() {
            try {
                window.open("https://www.microchip.com/en-us/parametric-search.html/" + $(this).attr(buttonsChartId), "_blank");
            } catch (e) {
                console.error("Error while navigating to the paramchart page.", e);
                hidedcPCLoader(paramChartTableId+"-"+$(this).attr(buttonsChartId));
            }

        })
    }

});
$(document).ready(function() {
    var paramTableProperties = '#paramtableprop';
    var paramTableID = '#clparamtable';
    const devicefamily = $(paramTableProperties).data('devicefamily');
    const environmentURL = $(paramTableProperties).data('environment-url');

    var getEnvironment = (envURL) => {
        if (envURL.includes("stage")) {
            return 'https://stageapps.microchip.com/Microchip.Com.Api'
        } else if (envURL.includes("prod") || envURL.toLowerCase().includes("microchip.com")) {
            return 'https://www.microchip.com/webdata'
        } else {
            return 'http://chn-vm-tweb/Microchip.Com.Api'
        }
    }
    var generateParamTable = () => {
        var apiDomain = getEnvironment(environmentURL);
        return new Promise((resolve, reject) => {
            $.ajax({
                type: "POST",
                url: apiDomain + '/api/MchpApiSecurity/GetMchpWWWApiSecureToken',
                contentType: 'application/json; charset=utf-8',
                error: function(error) {
                    console.log("Unable to get token.", error)
                    $(paramTableID).append("Unable to load Parametrics details! Please retry after sometime and contact support team if issue persists!");
                }
            }).done(function(response) {
                $.ajax({
                    url: apiDomain + '/api/ParametricConfig/GetParametricsConfigData?deviceFamily=' +
                        devicefamily,
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    headers: {
                        Authorization: 'Bearer ' + response.token
                    },
                    success: function(data) {
                        $(paramTableID).empty();
                        var jsonData = data;
                        if (jsonData.length > 0) {
                            var tableData = '<div class="table-wrapper"><table class="pmtctable--table"><tbody class="striped-bg">';
                            for (var prop of jsonData) {
                                if (prop.attributeValue !== null && prop.attributeValue !== '' && prop.attributeValue.trim().toLowerCase() !== 'null' &&
                                    !(prop.attributeValue.trim() === '0' && prop.inputType !== null && prop.inputType.trim().toLowerCase() === 'string') &&
                                    prop.attributeValue.trim().toLowerCase() !== 'none' && (/[A-Za-z0-9]/ig).test(prop.attributeValue)) {
                                    tableData = tableData + '<tr> <td class="title-column">  ' + prop.displayName + ' </td>' +
                                        '<td class="value-column">' + prop.attributeValue + '</td></tr>'
                                }
                            }
                            tableData = tableData + '</tbody></table></div>'
                            $(paramTableID).append(tableData);
                            resolve(data);
                        }
                        else{
                            if((document.getElementsByClassName("deviceparametricdatatable")).length>0){
                                                            $(document.getElementsByClassName("deviceparametricdatatable")[0]).hide();
                            }
                        }
                        setTimeout(function() {
                            //After you load data
                            document.querySelector('#loader').className += ' ' + 'hide'
                            document.querySelector('#loading').className += ' ' + 'hide'
                        }, 1000);
                    },
                    error: function(error) {
                        console.log("Unable to get API response.", error);
                        $(paramTableID).append("Unable to load Parametrics details! Please retry after sometime and contact support team if issue persists!");
                    },
                })
            });
        })
    }
    if ($('#deviceParamTable').length > 0) {
        generateParamTable();
    }
})
/*
JS file for add blog to favorites functionality
Author - Sunder Suganya
*/
const $blogTitleTextSelector = $(".blog-content .mchp-title__text");
$(document).ready(function () {
	 $blogTitleTextSelector.append($(' <a class="AddBlogToFavorites" title="Add blog to favorites"><em class="far fa-star"></em></a>').attr({
 		'href': "javascript:void(0)",
        'data-gating-callback': "addBlogToFavorites"
	}));

});

function addBlogToFavorites(a)
{
    if(!(a).find('em').hasClass(iconStarMarked) && !(a).find('em').hasClass(unMarkClassNames)){
    		$(a).find('em').removeClass(iconStar).addClass(spinner);
    try{
        const blogTitleSelector = ".blog-content .mchp-title";
        const blogTagSelector = ".blog-tags";
        let blogCategory = "";
        const blogTags = $(blogTagSelector);
        if (blogTags.length > 0) {
          blogCategory = blogTags[0].innerText;
        }
        const userBlogInfo={
            id: 0,
            userGuid:getCookie(GUID),
            blogURL:window.location.href,
            blogTitle: $(blogTitleSelector)[0].innerText,
            createdDate: new Date(),
            category: blogCategory
        };

       const token = localStorage.getItem("AccessToken");
       const saveBlogEndpoint = $blogTitleTextSelector.attr("data-saveBlog");

       $.ajax({
                type: "POST",
                url: saveBlogEndpoint,
                contentType: 'application/json; charset=utf-8',
                data:JSON.stringify(userBlogInfo),
                dataType:'json',
                beforeSend: function(xhr){
                    //Include the bearer token in Authorization header
                    xhr.setRequestHeader("Authorization", 'Bearer ' + token);
                },success:function(responseData){
                   if(responseData){
                        toggleStarIconState(a, true);
                    }else{
                        toggleStarIconState(a, false);
                    }
                },
               error:function(code){
                    toggleStarIconState(a, false);
                    if (code === 401) {
                        handleApiUnauthorizedError();
                    }
                }
            });
    }catch(error){
	    toggleStarIconState(a, false);
    }
  }
}

function handleApiUnauthorizedError() {
    window.localStorage.removeItem('AccessToken');
    window.localStorage.removeItem('IdToken');
    window.location.href = "https://www.microchip.com";
}
const blogPath = "en-us/about/media-center/blog/";
const apiContentType = "application/json; charset=utf-8";
const getProductEndpoint = $(dcfTitleSelector).attr("data-getProduct");
const getDevtoolEndpoint = $(dcfTitleSelector).attr("data-getDevtool");
const getBlogEndpoint = $blogTitleTextSelector.attr("data-getBlog");
const deleteProductEndpoint = $(dcfTitleSelector).attr("data-deleteProduct");
const deleteDevtoolEndpoint = $(dcfTitleSelector).attr("data-deleteDevtool");
const deleteBlogEndpoint = $blogTitleTextSelector.attr("data-deleteBlog");
let product, devtool, blog;
const selectors = {
    product: ".AddProductPrefLink",
    devtool: ".AddProductPrefLink",
    blog: ".AddBlogToFavorites"
};

$(document).ready(function() {
    if (location.pathname.includes(productSelector)) {
        product = true;
        getFavorites(getProductEndpoint); // Get the user's favorite products and update the star icons accordingly
        $(selectors.product).on("click", removeFavorite);
    } else if (location.pathname.includes(devtoolSelector)) {
		devtool = true;
        getFavorites(getDevtoolEndpoint); // Get the user's favorite devtools and update the star icons accordingly
        $(selectors.devtool).on("click", removeFavorite);
    } else if (location.pathname.includes(blogPath)) {
		blog = true;
        getFavorites(getBlogEndpoint); // Get the user's favorite blogs and update the star icons accordingly
        $(selectors.blog).on("click", removeBlogFavorite);
    }
});

function setAuthorizationHeader(xhr) {
    xhr.setRequestHeader("Authorization", "Bearer " + localStorage.getItem("AccessToken"));
}

function unMarkFavorite($element) {
    $element.find("em").removeClass(iconStarMarked).addClass(unMarkClassNames);
    $element.find("em").removeClass(spinner).css('cursor', 'default');
}

function handleApiError(code, $element) {
    toggleStarIconState($element, false);
    if (code === 401) {
        handleApiUnauthorizedError();
    }
}

// Function to get the user's favorites from the API
function getFavorites(getEndpoint) {
    const $element = $blogTitleTextSelector;
    const token = localStorage.getItem(accessToken);
    if(token) {
        $.ajax({
            type: "GET",
            url: getEndpoint,
            contentType: apiContentType,
            beforeSend: setAuthorizationHeader
        }).done(function (response) {
            let selectedValue;
            if (product) {
                selectedValue = $(dcfTitleSelector).text().toLowerCase().trim();
                checkFavorites(response, 'name', selectedValue, $(dcfTitleSelector));
            } else if (devtool) {
                selectedValue = $(".dynamic-subtitle").text().slice("Part Number: ".length).toLowerCase().trim();
                checkFavorites(response, 'partNumber', selectedValue, $(dcfTitleSelector));
            } else if (blog) {
                selectedValue = $element.text().toLowerCase().trim();
                checkFavorites(response, 'blogTitle', selectedValue, $element);
            }
        }).fail(function (code) {
            handleApiError(code, $(dcfTitleSelector));
        });
    }
}

function checkFavorites(response, key, selectedValue, $selector) {
    const names = response.map(item => item[key].toLowerCase().trim());
    if (names !== null && names.includes(selectedValue)) {
        toggleStarIconState($selector, true);
    }
}

// Function to remove a product or devtool from favorites
function removeFavorite() {
    const $element = $(dcfTitleSelector);
    if ($element.find("em").attr("class").includes(iconStarMarked)) {
        $element.find('em').addClass(spinner);
        const selectedName = $element.text().toLowerCase().trim();
        if (product) {
            const userProductInfo = {
				userGuid: getCookie(GUID),
				product: $element.text()
			};
            // Remove the selected product from favorites via the API and handle the response
            removeFromFavorites(userProductInfo, deleteProductEndpoint, getProductEndpoint, function(response) {
                const productNames = response.map(item => item.name.toLowerCase().trim());
                if (!productNames.includes(selectedName)) {
                    toggleStarIconState($element, false);
                } else {
                    unMarkFavorite($element);
                }
            });
        } else if (devtool) {
            const devtoolPartNumber = $(".dynamic-subtitle").text().slice("Part Number: ".length).toLowerCase().trim();
            removeFromFavorites("", deleteDevtoolEndpoint+"/"+devtoolPartNumber, getDevtoolEndpoint, function(response) {
                const devToolNames = response.map(item => item.productName.toLowerCase().trim());
                if (!devToolNames.includes(devtoolPartNumber)) {
                    toggleStarIconState($element, false);
                } else {
                    unMarkFavorite($element);
                }
            });
        }
    }
}

// Function to remove a blog from favorites
function removeBlogFavorite() {
    const $element = $blogTitleTextSelector;
    const $emElement = $element.find("em");
    if ($emElement.attr("class").includes(iconStarMarked)) {
        $emElement.addClass(spinner);
        $.ajax({
            type: "GET",
            url: getBlogEndpoint,
            contentType: apiContentType,
            beforeSend: setAuthorizationHeader
        }).done(function(data) {
            const blogTitles = data.map(item => ({
                id: item.id,
                blogTitle: item.blogTitle
            }));
            const selectedBlogTitle = $element.text().toLowerCase().trim();
            const matchingItem = blogTitles.find(item => item.blogTitle.toLowerCase().trim() === selectedBlogTitle);
            if (matchingItem) {
                const matchingId = matchingItem.id;
                const idNum = {
                    id: matchingId
                };
                $.ajax({
                    type: "POST",
                    url: deleteBlogEndpoint,
                    contentType: apiContentType,
                    data: JSON.stringify(idNum),
                    dataType: "json",
                    beforeSend: setAuthorizationHeader
                }).done(function(response) {
                    // After removing the blog from favorites, check if it still exists in the user's favorites and update the star icon accordingly
                    $.ajax({
                        type: "GET",
                        url: getBlogEndpoint,
                        contentType: apiContentType,
                        beforeSend: setAuthorizationHeader
                    }).done(function(responseData) {
                        const blogTitleNames = responseData.map(item => item.blogTitle);
                        if (!blogTitleNames.includes(selectedBlogTitle)) {
                            toggleStarIconState($element, false);
                        } else {
                            unMarkFavorite($element);
                        }
                    }).fail(function(code) {
                        handleApiError(code, $element);
                    });
                }).fail(function(code) {
                    handleApiError(code, $element);
                });
            }
        }).fail(function(code) {
            handleApiError(code, $element);
        });
    }
}

// Function to remove a product or devtool from favorites via the API
function removeFromFavorites(userDeviceInfo, unLink, getById, successCallback) {
    $.ajax({
        type: "POST",
        url: unLink,
        contentType: apiContentType,
        data: JSON.stringify(userDeviceInfo),
        dataType: "json",
        beforeSend: setAuthorizationHeader,
        success: function(response) {
            // After removing the item from favorites, call the success callback function to handle the response
            $.ajax({
                type: "GET",
                url: getById,
                contentType: apiContentType,
                beforeSend: setAuthorizationHeader,
                success: successCallback
            }).fail(function(code) {
                handleApiError(code);
            });
        }
    }).fail(function(code) {
        handleApiError(code);
    });
}

$(function () {

    "use strict";
    
    const currentElement = 'a[cw-current]';
    const currentElementAttr = "cw-current";
    const setterClickwrapGating = 'clickwrap-gating';
    const currentUrl = window.location.href;
    if(!currentUrl.includes("reference-designs")){
        $('[data-isclick-wrapped*="yes"]').each(function(){
            const that = $(this);
            if(typeof($(that).attr('href')) !== 'undefined') {
                //check if it is a downloadable asset
                if(that.attr('href').includes("ww1.microchip.com/downloads/") 
                    || that.attr('href').includes("/content/dam/mchp/")
                    || that.attr('href').includes("://onlinedocs.microchip.com/")){
                    if(typeof $(that).attr('cw-component-level') !== 'undefined') {
                        return;
                    }
                    //prevents right click
                    $(that).bind('contextmenu',function(e){  
                        e.preventDefault();
                        e.stopPropagation();
                        return;
                    });
                    $(that).off('click').on('click',function(e){   
                        e.preventDefault();
                        //on click happens here    
                        $(that).data('href',$(that).prop('href'));
                        if(typeof $(that).data('temp-href') === 'undefined'){
                            $(that).data('temp-href', $(that).prop('href'));
                        } else {
                            $(that).data('href',$(that).data('temp-href'));
                        }
                        $(that).prop('href', '#');
                        $(that).data('cw-clicked','no');
                        const assetName = getAssetName($(that), false);
                        const assetLocation = getAssetLocation($(that),false);
                        //to flag which link was clicked
                        $(currentElement).removeAttr(currentElementAttr);
                        const domElement = that.get(0);
                        domElement.setAttribute(currentElementAttr,'');
        
                        //get clickwrap details
                        if (!getCWElementInLocalStorage(that, false)){
                            $.ajax({
                                url: "/bin/clickwrap",
                                type:'GET',
                                data: {assetname: decodeURI(assetName), assetlocation: assetLocation},
                                dataType: 'text',
                                success: function(response) {
                                    if (response.length) {
                                        that.data(setterClickwrapGating, response);
                                        setCWElementInLocalStorage(that,false);
                                        getCWElementInLocalStorage(that,false);
                                        //execute sequence
                                        if(response.includes('mymchplogin')) {
                                            that.click();
                                        }
                                        processClickWrapSequence(that, true, false);
                                    } else {
                                        processClickWrapSequence(that, false, false);
                                    }
                                },
                                error: function(xhr) {
                                        alert(xhr);
                                }
                            });
                        } else {
                            //execute sequence
                            processClickWrapSequence($(that), true, false);
                        }
                    });
                }
            } else {
                return;
            }
        })    
        $('[isclickwrapped="yes"][link-type="external"]').each(function(){
            const cwcomponentlevel= 'cw-component-level';
            //prevents right click
            $(this).bind('contextmenu',function(e){  
                e.preventDefault();
                e.stopPropagation();
                return;
            });
            //to flag which link was clicked
            const link = typeof $(this).find('a') !== 'undefined' ? $(this).find('a') : null;   
            if (link === null) {
                return;
            }
            const config = $(this).attr('clickwrapconfig');
            if(config.includes("mymchplogin") !== true){
                if(config.includes("salesforceform") === true || config.includes("termsandconditions")){
                    $(link).attr("is-medium-secure-only","yes");
                }
            }
            $(this).off('click').on('click',function(e){   
                e.preventDefault(); 
                const that = $(this);
                if(that.prop('clickwrapconfig') !== '') {
                        $(currentElement).removeAttr(currentElementAttr);
                        link.attr(currentElementAttr,'');
                        if(link !== null && typeof $(link).attr(cwcomponentlevel) !== 'undefined'){
                            if($(link).attr(cwcomponentlevel) !== 'no'){
                                $(link).data('href',$(link).attr('href'));
                                if(typeof $(link).data('temp-href') === 'undefined'){
                                    $(link).data('temp-href', $(link).attr('href'));
                                } else {
                                    $(link).data('href',$(link).data('temp-href'));
                                }
                                $(link).prop('href', '#');
                                $(link).data('cw-clicked','no');
                                if (!getCWElementInLocalStorage(link,true)){
                                    link.data(setterClickwrapGating, config);
                                    setCWElementInLocalStorage(link,true);
                                    getCWElementInLocalStorage(link,true);
                                    processClickWrapSequence(link, true,true);
                                } else {
                                    processClickWrapSequence(link, true,true);
                                }
                            
                            }
                        }
                } else {
                    processClickWrapSequence($(this), false,true);
                }
            });
        });
    }
});

function getAssetName(element,isComponent){
    let asset = typeof element.data('href') !== 'undefined' ? element.data('href').replace(location.origin,'') : null;
    const isOnlineDoc = element.attr('cw-document-link');
    if(isOnlineDoc) {
        asset = typeof element.attr('cw-document-link') !== 'undefined' ? element.attr('cw-document-link').replace(location.origin,'') : null;
    }
    if(asset !== null) {
        return asset.replace(location.origin,'').substring(asset.lastIndexOf('/') + 1);
    }
    return '';
}

function getAssetLocation(element,isComponent){
    const asset = typeof element.data('href') !== 'undefined' ? element.data('href').replace(location.origin,'') : null;
    if(asset !== null) {
        let documentPath = element.data('cw-document-path');
        if(typeof isComponent !== "undefined" && !isComponent) {
            const documentName = "/" + asset.replace(location.origin,'').substring(asset.lastIndexOf('/') + 1);
            documentPath = documentPath.replace(documentName,"");
        } else {
            documentPath = asset;
        }
        return documentPath;
    }
    return '';
}

  function getCWElementInLocalStorage(element,isComponent){ 
    const setterClickwrapGating = 'clickwrap-gating';
    const currentElementAttr = "cw-current";
    const dataGatingCallback = 'data-gating-callback';
    const componentAttr = 'componentCW';
    const value = localStorage.getItem("cw-"+getChecksum(element,isComponent));
    let formPath = '';

    if(value == null){
        return false;
    }  

    const object = JSON.parse(value);

    if (value.includes("mymchplogin")) {
        $(currentElement).removeAttr(currentElementAttr);
        const domElement = element.get(0);
        domElement.setAttribute(currentElementAttr,'');
        domElement.setAttribute(dataGatingCallback, 'cwPostLoginHandler');
        if(isComponent){
            domElement.setAttribute(componentAttr,'');
        } 
        if(!isComponent && domElement.hasAttribute(componentAttr)){
            $(currentElement).removeAttr(componentAttr);
        }
    } 
    if (value.includes("termsandconditions") && !value.includes("salesforceform,")) {
        let agreementList = [];
        formPath = extractSalesforcePath(value,"tacPath;");
        if(value.includes("agreement")){
            agreementList = extractAgreements(value);
        }
        setupSalesforceForm(agreementList,formPath, true,isComponent);
    }       

    if (value.includes("salesforceform,")) {
        let agreementList = [];
        formPath = extractSalesforcePath(value,"saleforceformpath;");
        if(value.includes("agreement")){
            agreementList = extractAgreements(value);
        }
        setupSalesforceForm(agreementList,formPath,false,isComponent);
    }       
    element.data(setterClickwrapGating, object['cwGating']);
    
    const isValid =timestampIsValid(object['cwGating']);
    if(!isValid){
        return false;
    }

    element.data('clickwrap-gating-completed', object['cwGatingComplete']);  

    return true;
  }

  function setCWElementInLocalStorage(element,url){
    const setterClickwrapGating = 'clickwrap-gating';
    // get the 1 day after of the expiry
    const dateNow = new Date();
    var expiryDate = new Date(dateNow);
    expiryDate.setDate(expiryDate.getDate() + 1);

    const cwGating = element.data(setterClickwrapGating);
    const cwGatingComplete = element.data("clickwrap-gating-complete");
    const cwState = {'cwGating': cwGating + ",expiry_" + expiryDate, 'cwGatingComplete': cwGatingComplete};
    localStorage.setItem("cw-"+getChecksum(element,url),JSON.stringify(cwState));
  }

  function getChecksum(element,isComponent){
    return (getAssetLocation(element,isComponent) + '/' + getAssetName(element,isComponent)).checksum();
  }

    function extractAgreements(clickwrapGatingAttr){
        const agreementArr = [];
        const arr = clickwrapGatingAttr.split(",");
        if(arr.length > 0){
            for (let i = 0; i<arr.length; i++){
                if(arr[i].includes("agreement")){
                    const newValue = arr[i].replace(/[\[\]\"\}\']+/g,'');
                    agreementArr.push(newValue);
                }
            }
        }
        return agreementArr;
    }

    function extractSalesforceFormType(clickwrapGatingAttr){
        const arr = clickwrapGatingAttr.split(",");
        if(arr.length > 0){
            for (let i = 0; i<arr.length; i++){
                if(arr[i].includes("agreement")){
                    const newValue = arr[i].replace(/[\[\]\"\}\']+/g,'');
                    agreementArr.push(newValue);
                }
            }
    }

    if(container !== null && typeof container !== 'undefined'){   
        container.innerHTML = setLicenseAgreementElements(agreementArr); ;
    }
    return agreementArr;
}

function extractSalesforceTitle(value){
    let title = "";
    const arr = value.split(",");
    for(let i=0;i<arr.length;i++){
        if(arr[i].includes("saleforceformtitle:")){
            const titleArr = arr[i].split(":");
            title = titleArr[1];
            break;
        }
    }
    return title;
}

function extractSalesforcePath(value,mode){
    let path = "";
    const arr = value.split(",");
    for(let i=0;i<arr.length;i++){
        if(arr[i].includes(mode)){
            const pathArr = arr[i].split(";");
            path = pathArr[1];
            break;
        }
    }
    return path;
}

function timestampIsValid(jsonArray){
    const jsonArr = jsonArray.split(",");
    for(let i=0;i<jsonArr.length;i++){
        const value = jsonArr[i];
        if(value.includes("expiry_")){
            const timestampArr = value.split("_");
            const now = new Date();
            const expiryVal = timestampArr[1];
            const expiry = new Date(expiryVal);
            if(now > expiry){
                return false;
            }
        }
    }
    return true;  
}

function processClickWrapSequence(link, isClickWrapped, isComponent){
  const termsandcondition = "termsandconditions";
  const salesforceForm = "salesforceform";
  const mymchplogin = "mymchplogin";
  const SDE = "SDE";
  const cwclicked = 'cw-clicked';

  if(isClickWrapped){
    if (validateSequence(link, mymchplogin) && !validateCompleted(link,mymchplogin,isComponent)){
        return;
    }

    if (validateSequence(link, termsandcondition) && !validateCompleted(link,termsandcondition,isComponent)){
        goToNextSequence(termsandcondition,isComponent);
        return;
    }

    if (validateSequence(link, salesforceForm) && !validateCompleted(link,salesforceForm,isComponent)){
        goToNextSequence(salesforceForm,isComponent);
        return;
    }

    if (validateSequence(link, SDE) && !validateCompleted(link,SDE,isComponent)){
      goToNextSequence(SDE,isComponent);
      return;
    }
  }

	var file = document.createElement('a');
	file.href = link.data('href');
	file.download = link.data('href').substr(link.data('href').lastIndexOf('/') + 1);
	if ($(link).data(cwclicked) === 'no'){  
    file.click();
    $(link).data(cwclicked,'yes');
  }
}

function goToNextSequence(nextSequence,isComponent){
  switch(nextSequence){
    case "mymchplogin":
      // execute additional functions if needed on pre login here
      break;
    case "termsandconditions":
        openClickWrapForm();
      break;
    case "salesforceform":
        openClickWrapForm();
      break;
    case "SDE":
      // check if manual or automatic approval
      processSDE(isComponent);
      break;
    default:
      break;
  }
}

const clickWrapGating = 'clickwrap-gating';
const clickWrapGatingComplete = 'clickwrap-gating-complete';
const clickWrapGatingCompleted = 'clickwrap-gating-completed';
const currentElement = 'a[cw-current';
const clickwrapSDEContainer = 'clickwrap-sde-container';

function completeSequence(link,mode,isComponent){
  const sequence = link.data(clickWrapGating);
  let sequenceArr = sequence.split(",");
  const completed = link.data(clickWrapGatingComplete) !== undefined ? link.data(clickWrapGatingComplete) : '';
  const completedArr = completed.split(",");

  if(completed.includes(mode)) {
    return
  };
  
  const tempSquenceArr = [];
  sequenceArr.forEach(function(item){
    //remove the completed sequence
    if(mode !== item) {
      tempSquenceArr.push(item)
    };
  });
  sequenceArr = tempSquenceArr;
  completedArr.push(mode);

  link.data(clickWrapGating, sequenceArr.toString());
  link.data(clickWrapGatingComplete, completedArr.toString());
  link.data(clickWrapGatingCompleted, completedArr.toString());

  //update localstorage
  setCWElementInLocalStorage(link,isComponent);
}

const cwcountryCanada = 'Canada  CA';
const cwcountryUsa = 'United States of America  US';  
var cwsf_fname = "";
var cwsf_lname = "";
var cwsf_email = "";
var cwsf_phone = "";
var cwsf_company = "";
var cwsf_state ="";
var cwsf_selectedIndex_state = "";
var cwsf_selectedIndex_country = "";
var cwsf_country = "";
var cwsf_project = "";
var cwsf_market = "";
var cwStatesLabel = "";
  

function openClickWrapForm(){    
  const form = document.getElementById("clickwrap-form");
  if(form !== null && typeof form !== 'undefined'){
      form.style.display = "flex";
  }
}

function closeClickWrapForm(){
  const form = document.getElementById("clickwrap-form");
  $('#clickwrap-form').remove();
  form.style.display = "none";
}

function openClickWrapLA(agreement,id){
  getAgreementContent(agreement, false);
  const form = document.getElementById("clickwrap-la");
  const checkbox = document.getElementById(id);
  if(form !== null && typeof form !== 'undefined'){
    form.style.display = "flex";
  }
  if(checkbox !== null && typeof checkbox !== 'undefined'){
    checkbox.disabled = false;
    checkbox.checked = true;
    checkbox.disabled = true;
  }
}

function checkAllCWAgreements(){
  let valid = false;
  const agreementCheckboxes = document.getElementsByClassName("cw-agreement-checkbox");
  if(agreementCheckboxes !== null && typeof agreementCheckboxes !== 'undefined'){      
    for(let i=0;i<agreementCheckboxes.length;i++){
      const checkbox = agreementCheckboxes[i];
      if(checkbox.checked){
        valid = true
      } else{
        valid = false;
        break;
      }
    }
  } else {
    valid = true;
  }
  return valid;
}

function toggleCWStatefield(mode){     
  if(mode === 'show'){
    cwsf_state.style.display = "block";
    cwStatesLabel.style.display = "block";
  } else {
    cwsf_state.selectedIndex = 0;
    cwsf_state.style.display = "none";
    cwStatesLabel.style.display = "none";
  }
}


function closeClickWrapLA(){
  const form = document.getElementById("clickwrap-la");
  if(form !== null && typeof form !== 'undefined'){
    form.style.display = "none";
  }
}

function cwPostLoginHandler(){
  let isComponent = false;
  const current = $(currentElement);
  if(typeof current !== 'undefined'){
  if(current.attr('componentCW')){
    isComponent = true;
  }
  completeSequence(current,"mymchplogin",isComponent);
  processClickWrapSequence(current, true,isComponent);
  }
}

function validateSequence(link,mode){
  let hasMatch = false;
  if(link.data(clickWrapGating).includes(mode)){
    hasMatch = true;
  }
  return hasMatch;
}

function validateCompleted(link,mode,isComponent){
  let hasMatch = true;
  const value = link.data(clickWrapGatingCompleted);

  /*
    additional check if completion of sequence
    invoked from post login and cw gating complete has
    not been modified if login session is existing
  */
  
  const localItem = localStorage.getItem("cw-"+getChecksum(link,isComponent));
  if(mode === 'mymchplogin' && localItem != null){
    const item = JSON.parse(localItem);
    hasMatch = item['cwGatingComplete'] !== undefined ? item['cwGatingComplete'].includes(mode) : false;
    return hasMatch;
  }

  if(value === undefined){
    hasMatch = false;
    return hasMatch;
  }
  if(!link.data(clickWrapGatingCompleted).includes(mode)){
    hasMatch = false;
  }
  return hasMatch;
}

function processSDE(isComponent){
  const current = $(currentElement);
  const cwclicked = 'cw-clicked';
  let sdeUrl = "";
  let isManuallApproval = false;
  const value = localStorage.getItem("cw-"+getChecksum(current,isComponent));
  if(value === null){
      return;
  }
  if(value.includes("SDE")){
    const arr = value.split(",");
    if(arr.length > 0){
      for (let i = 0; i<arr.length; i++){
          if(arr[i].includes("url:")){
              sdeUrl = extractSDELink(arr[i]);
          }
          if(arr[i].includes("manualapproval")){
            isManuallApproval = true;
        }
      }
    }
  }
  if ($(current).data(cwclicked) === 'no'){  
    executeSDE(sdeUrl, isManuallApproval);
    $(current).data(cwclicked,'yes');
  }
}

function extractSDELink(sdeLink){
  const urlString = sdeLink.replace("url:","");
  return urlString.replace(/[\[\]\"\}\']+/g,'');
}

function executeSDE(link,isManualApproval){
  if(isManualApproval === false){
    window.open(link, '_blank');
  } else {
    const form = document.getElementById(clickwrapSDEContainer);
      const newDiv = document.createElement('div');
      const messageBox = `
        <div id="clickwrap-sde-container" class="clickwrap-sde-container">
          <div class="clickwrap-sde">
            <div class="clickwrap-sde-content">
              <div class="clickwrap-sde-close" onclick="closeClickWrapSDEMessage()" style="cursor:pointer;">
                <i class="fas fa-times"></i>
              </div>
              <div class="clickwrap-sde-text-content">
                <i class="fa fa-exclamation-circle clickwrap-ex-point" aria-hidden="true"></i>
                <div id="cw-sde-content" class="clickwrap-sde-text">
                Thank you for providing this information. A representative from Microchip will contact you via email to follow up on your request.
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      newDiv.innerHTML = messageBox;
      if(form === null){
        document.body.prepend(newDiv);
        const content = document.getElementById("cw-sde-content");
        if(content !== null && typeof content !== 'undefined'){
          content.scrollIntoView();
        }
      }
      else {
        openClickWrapSDEMessage();
      }
  }
}

function openClickWrapSDEMessage(){
  const form = document.getElementById(clickwrapSDEContainer)
  const content = document.getElementById("cw-sde-content");
  if(form !== null && typeof form !== 'undefined'){
      form.style.display = "flex";
      content.scrollIntoView();
  }
}

function closeClickWrapSDEMessage(){
  const form = document.getElementById(clickwrapSDEContainer);
  if(form !== null && typeof form !== 'undefined'){
      form.style.display = "none";
  }
}
function setupSalesforceForm(agreements,formPath,isTermsAndConditionOnly,isComponent){  
  if($('#clickwrap-form').length !== 0) {
    $('#clickwrap-form').remove();
  }
    if($('#clickwrap-form').length === 0){
        $.ajax({
            url: "/bin/clickwrapsalesforceform",
            type:'GET',
            data: {path: formPath},
            dataType: 'text',
            async: false,
            success: function(response) {
                let formContent = !isTermsAndConditionOnly
                    ? $(response).text() 
                    : getAgreementContent(agreements[0], true) + $(response).text(); 
                const form = "<div class='clickwrap-form-container'>"
                 +"   <div id='clickwrap-form' class='clickwrap-form'>"
                 +"       <div id='clickwrap-la-container' class='clickwrap-la-container'>"            
                 +"       </div>"
                 +"       <div id='click-wrap-form-content' class='click-wrap-form-content'>"
                 +"          <iframe name='dummyframe' src='/' hidden></iframe>"    
                 +           formContent;
                 +"      </div>"
                 +"    </div>"
                 +"   </div>";
                 $('body').append(form);
                 const container = document.getElementById("click-wrap-form-content");
                 const sfForm = container.querySelector('form');
                 sfForm.setAttribute("target", "dummyframe");
                 sfForm.setAttribute("id", "cwForm");
                 const containerWithAgreements = container
                    .innerHTML
                    .replace('<input type="submit" name="submit">',
                        '<div id="cw-licenseagreement-container">'
                        +'</div><input id="sfSubmit" type="submit" name="submit">'
                        +'<input type="button" onclick="closeClickWrapForm();" value="Cancel">');
                 container.innerHTML = containerWithAgreements;         
                if(!isTermsAndConditionOnly){
                    const countryfield = document.getElementById('country');
                    if (countryfield != null) {
                        countryfield.setAttribute('onchange','validateCWState()');
                    }
                    refreshLicenseAgreementList();
                    AddLicenseAgreements(agreements);
                  const tacForm = document.getElementById('cwForm');
                  if (typeof tacForm !== "undefined" || tacForm !== null) {
                    tacForm.addEventListener("submit", function(e){
                      setTimeout(() => {
                        addCWSubmitHandler(isComponent,false);
                      }, 1500);
                    });
                  }
                }
                else {
                  setTimeout(() => {
                    cwGetUserProfile();
                  }, 1500);
                  const tacForm = document.getElementById('cwForm');
                  if (typeof tacForm !== "undefined" || tacForm !== null) {
                    tacForm.addEventListener("submit", function(e){
                      setTimeout(() => {
                        addCWSubmitHandler(isComponent,true);
                      }, 1500);
                    });
                  }
                }
                },
            error: function(xhr) {
                    alert(xhr);
            }
        });
    
    }
    else {
        refreshLicenseAgreementList();
        AddLicenseAgreements(agreements);
    }
}

function validateCWState(){
    const country = $("#country").val().replace(/\s\s+/g, ' ');
    const state = $("#state-province");
    if(country === "Canada CA"
        || country === "United States of America US"){
        state.prop( "disabled", false );
        state.prop( "required", true );
    } else {
        state.prop( "disabled", true );
        state.prop( "required", false );
        state.prop("selectedIndex", 0).val();
    }
}

function setLicenseAgreementElements(agreements){
    let agrementList = ``;
        if(agreements.length > 0){
            for (let i = 0; i < agreements.length; i++){
                const idName = "cw-cb-"+ agreements[i].replace(" ","");
                const agreementPath = agreements[i].split("/");
                const agreementName = agreementPath[agreementPath.length-1];
                const element = `
                    <div id="clickwrap-agreement-id`+i+`">
                        <div class="clickwrap-form-agreements cw-iaccept">
                        <input id="`+idName+`" class="cw-agreement-checkbox" type="checkbox" value="1" disabled required>
                        <div>
                            &nbsp;&nbsp;Please read <span  onclick="openClickWrapLA('`+agreements[i]+`','`+idName+`')" 
                            style="font-weight:bold; cursor:pointer;"> `+ formatLicenseAgreementTitle(agreementName) +` </span> to accept <text style="color:red">*</text>
                        </div>
                        </div>
                    </div>
                    <br/>
                `;
                agrementList += element;
            }
    }
    return agrementList;
}

function formatLicenseAgreementTitle(agreement){
    let newtitle = "";
    const agreementArr = agreement.split("-");
    for (let i=0; i<agreementArr.length;i++){
        const title = agreementArr[i].trim();
        newtitle += " " + title.charAt(0).toUpperCase() + title.slice(1);
    }
    return newtitle;
}

function setupLicenseAgreementContent(agreement){
    const laContainer = document.getElementById("clickwrap-la-container");
    if(laContainer !== null && typeof laContainer !== 'undefined'){
        const form = `
        <div id="clickwrap-la" class="clickwrap-la">
            <div class="clickwrap-la-content">           
                <div class="clickwrap-la-close" onclick="closeClickWrapLA()">
                    <i class="fas fa-times"></i>
                </div>
                    `+ agreement + `
            </div>
        </div>`
        laContainer.innerHTML = form;
    }
}
function refreshLicenseAgreementList(){
    const container = document.getElementById('cw-licenseagreement-container');
    if(container !== null && typeof container !== 'undefined'){   
        container.innerHTML ="";
    }
}

function AddLicenseAgreements(agreements){
    const container = document.getElementById('cw-licenseagreement-container');
    if(container !== null && typeof container !== 'undefined'){   
        container.innerHTML += setLicenseAgreementElements(agreements) === null ? '' : setLicenseAgreementElements(agreements);
    }
}

function getAgreementContent(agreement,isTermsAndConditionOnly){
    let content = "";
    $.ajax({
        url: "/bin/clickwrapagreements",
        type:'GET',
        data: {agreement: agreement.replace(' ','')},
        async: false,
        dataType: 'text',
        success: function(response) {
            if (response.length) {
                if(!isTermsAndConditionOnly){
                    setupLicenseAgreementContent(response);
                } else {
                    content =  response;
                }
            }
        },
        error: function(xhr) {
                alert(xhr);
        }
    });
    return content;
} 


function canSubmitForm() { 
    let canSubmit = true;
    const textFields = document.querySelectorAll('#cwForm input'); 
    textFields.forEach(input => {
      if(input.value === "" 
      && input.hasAttribute('required') 
      && input.getAttribute('type') !== 'checkbox'){     
        canSubmit = false
      }
    });

    const checkbox = document.querySelectorAll('#cwForm input'); 
    checkbox.forEach(input => {
      if(input.hasAttribute('required') 
      && input.getAttribute('type') === 'checkbox'
      && input.checked !== true){     
        canSubmit = false
      }
    });
  
    const dps = document.querySelectorAll('#cwForm select');
    dps.forEach(input => {
      if(input.value === "" && input.hasAttribute('required')){
        canSubmit = false;
      }
    });
  
    const textArea = document.querySelectorAll('#cwForm textarea');
    textArea.forEach(input => {
      if(input.value === "" && input.hasAttribute('required')){
        canSubmit = false;
      }
    });
  
    return canSubmit;
}

function addCWSubmitHandler(isComponent,isTermsAndConditionOnly){
  if(canSubmitForm()){
    const mode = isTermsAndConditionOnly ? "termsandconditions" : "salesforceform";
    const current = $('a[cw-current');
    completeSequence(current,mode,isComponent);
    processClickWrapSequence(current,true,isComponent);
    closeClickWrapForm();
    $('#clickwrap-form').remove();
  } else {
    alert("Please fill out the required fields.");
  }
}

function cwGetUserProfile(){   
    const accessToken = localStorage.getItem("AccessToken");  
    let rootPath = 'https://login.microchip.com/';
    const devAEM = 'http://localhost:4502';
    const qaAEM = 'aem.microchip.com';
    const stageAEM = 'aem-stage.microchip.com';
    var sf_fname = document.getElementById("first_name");
    var sf_lname = document.getElementById("last_name");
    var sf_email = document.getElementById("email");
    var sf_phone = document.getElementById("phone");
    var sf_company = document.getElementById("company");

    const source = window.location.origin.toLowerCase().trim();
    if (source.indexOf(devAEM.toLowerCase().trim()) > -1) {
      rootPath = 'https://testlogin.microchip.com/';
    } else if (source.indexOf(qaAEM.toLowerCase().trim()) > -1) {
      rootPath = 'https://stagelogin.microchip.com/';
    } else if (source.indexOf(stageAEM.toLowerCase().trim()) > -1) {
      rootPath = 'https://stagelogin.microchip.com/';
    }

    const target = rootPath + "ssoapi/api/SecuredUser/GetUserProfile";

    if(accessToken !== null && typeof accessToken !== 'undefined') {
      try {  
        $.ajax({
          url: target,
          type: 'GET',
          dataType: "json",
          headers: {
            Authorization: 'Bearer ' + accessToken
          },
          success: function(data) {
            if(data.hasOwnProperty('firstName')){
              const firstname = data.firstName !== "" ? data.firstName : "N/A";
              sf_fname.value = firstname;
            }
            if(data.hasOwnProperty('lastName')){
              const lastname = data.lastName !== "" ? data.lastName : "N/A";
              sf_lname.value = lastname;
            }
            if(data.hasOwnProperty('phoneNumber')){
              const phoneNumber = data.phoneNumber !== "" ? data.phoneNumber : "N/A";
              sf_phone.value = phoneNumber;
            }
            if(data.hasOwnProperty('emailAddress')){
              const emailAddress = data.emailAddress !== "" ? data.emailAddress : "N/A";
              sf_email.value = emailAddress;
            }
            if(data.hasOwnProperty('companyName')){
              const companyName = data.companyName !== "" ? data.companyName : "N/A";
              sf_company.value = companyName;
            }
          },
          error: function(error) {
            console.log(error);
          },
        });
      }
      catch (error) {
        console.log(error);
      }
    }
  }
$(function () {
    "use strict";
    const url = "https://onlinedocs.microchip.com/v2/literature/";
    $('a[data-ds-number]').each(function(){
        if(typeof($(this).attr('href')) !== 'undefined') {
            $(this).hide();
            const dsNumber = $(this).data('ds-number');
            const separator = $('span[data-ds-separator*="'+dsNumber+'"]');
            if(separator.length !== 0){
                $(separator).hide();
            }
            const apiUrl = dsNumber !== '' ? url+dsNumber : '';
            if(apiUrl === '') 
            { return };
            const jsonData = getDSJsonData(apiUrl);
            if(jsonData){
                $(this).prop('href',apiUrl + '?redirect=true');
                $(this).show();
                if(separator.length !== 0){
                    $(separator).show();
                }
            }
        }
    });
});

const getDSJsonData = (apiUrl) => {
    let hasMatch = false;
    $.ajax({
        url: apiUrl,
        type: 'GET',
        async: false,
        success: function(data) {
            if(data.matches.length > 0){
                hasMatch = true;
            }
        },
        error: function(error) {
            console.log(error);
        },
    });
    return hasMatch;
};
const crossReferenceSearch=$('.cross-reference-search');
let crossReferenceInput=null;
const crossreferenceresultsMobileView = $('.cross-reference-result-mobile-view');
const crossreferenceresults=$('.cross-reference-results-innerDiv');
const noOfResultsDiv=$('.crs-results-number');

const CrossReferenceshareModal = $("#ShareLinkModal");
const CrossReferenceshareMessage = $("#shareLink");
const CrossReferenceSButtonControls=$('.crs-btn-controls')
const crsdataDivElementSelector='#crs-data-div';
const mchpButtonWrapper="mchp-button-wrapper";
const eraseIcon='.eraseIcon i';
const dpdislayNone='dp-display-none';
const crossReferenceAddToButtonText=$(crsdataDivElementSelector).attr("data-addToCart-BtnText");
const CRSHorizontalScrollBarContainerDiv = $(".top-scroll-container div");

let CrossReferenceAPIResponse=null;

$(document).ready(function () {
    //overriding URL Domain set up by md JavaScript File
    if($('.cross-reference-search').length>0){

    	setupMDURLs();
        const crossReferenceParams=new URLSearchParams(window.location.search)
        crossReferenceInput=crossReferenceSearch.find('.cmp-search__input');
        const competitorPart=crossReferenceParams.get('competitorPart');

        if(competitorPart!=null && crossReferenceInput!==undefined ){
            crossReferenceInput.val(competitorPart);
            getCrossReferenceSearchResults();
        }
        else{
            CrossReferenceSButtonControls.hide();
        }

        if(crossReferenceInput.val().length>0){
			$('eraseIcon').removeClass(dpdislayNone);

        }

crossReferenceInput.on('keyup',function(){

        const inputVal=crossReferenceInput.val();
        if(inputVal.length>0){
			$(eraseIcon).removeClass(dpdislayNone);

        }else{
			$(eraseIcon).addClass(dpdislayNone);

        }

        const key = event.which
        if(key === 13){

        	getCrossReferenceSearchResults();
        }


    });

      $('.cross-reference-input').on('click','a', function() {
            getCrossReferenceSearchResults();

        });

        $('.btn-showinstock-toggle').on('click',function(){

                 if(CrossReferenceAPIResponse!==null){



                	createCrossReferenceResultsTable(CrossReferenceAPIResponse);


                 }

            });
    }









});



const getCrossReferenceSearchResults= function(){

    const crossRefInputValue=crossReferenceInput.val();
    const crossReferenceMDAPI=$(crsdataDivElementSelector).attr("data-crs-api");

    if(null!==crossRefInputValue && undefined!==crossRefInputValue && crossRefInputValue.trim().length>0){
        const url=crossReferenceMDAPI+crossRefInputValue;
        $.getJSON(url, function(data) {

            if(data!=null || data !==undefined){

                const microchipEqv=data.MicrochipEquivalents;
                if(microchipEqv.length>0){
                    CrossReferenceAPIResponse=data;
                    createCrossReferenceResultsTable(data);
					CrossReferenceSButtonControls.show();

            	}
            else{
                $('.crs-results-number').empty();
                DisplayNoResultsDivForCRS(crossRefInputValue);

            }

            }

        });

        appendCompetitorQueryParam(crossRefInputValue);
    }

}



const createCrossReferenceResultsTable = function(results){

    crossreferenceresults.html("");
    crossreferenceresultsMobileView.html("");
	const table = document.createElement('table');
    // Create the table header
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
   	const competitordata = document.createElement('td');

    const competitordiv=document.createElement('div');

    const competitorCompanyP=document.createElement('p');
    competitorCompanyP.className='competitor-name';
    competitorCompanyP.textContent=results.CompetitorPartCompany;

    const competitorCardDiv=document.createElement('div');
	competitorCardDiv.className='competitor-card';

    const competitorBodyDiv=document.createElement('div');
	competitorBodyDiv.className='card-body';

    const competitorImg=document.createElement('img');
	competitorImg.className='competitor-image';
	competitorImg.setAttribute('alt','Representative Competitor Image');
    competitorImg.src=results.CompetitorPartImageURL!=null? results.CompetitorPartImageURL:"https://icon-library.com/images/microchip-icon/microchip-icon-1.jpg";


    const competitorPartNumber=document.createElement('p');
	competitorPartNumber.className='competitor-partnumber';
    competitorPartNumber.textContent=results.CompetitorPartCPN;


    const competitorPartDescription=document.createElement('p');
	competitorPartDescription.className='competitor-partDescription';
    competitorPartDescription.textContent=results.CompetitorPartDescription;

	competitorBodyDiv.appendChild(competitorImg);
    competitorBodyDiv.appendChild(competitorCompanyP);
    competitorBodyDiv.appendChild(competitorPartNumber);
	competitorBodyDiv.appendChild(competitorPartDescription);
    competitorCardDiv.appendChild(competitorBodyDiv);
    competitordiv.appendChild(competitorCardDiv);
    competitordata.appendChild(competitordiv);
    headerRow.appendChild(competitordata);

    const tbody= document.createElement('tbody');
    const tr= document.createElement('tr');
    const td= document.createElement('td');
    const mchpDiv=document.createElement('div');

	td.innerHTML='';
    mchpDiv.innerHTML='';

	const competitorsParameters=results.CompetitorParameter;
        for(const property in competitorsParameters){

            const propertyName= property.replaceAll('_',' ');
            td.innerHTML+='<div><div><div><span>'+propertyName+'</span></div></div>';
            const competitorsParametersPropertyValue=competitorsParameters[property].trim()!==""?competitorsParameters[property]:'-';

            td.innerHTML+='<div><div><span>'+competitorsParametersPropertyValue+'</span></div></div></div>';
        }

    tr.appendChild(td);

    GenerateMCHPEquivalentPartsDiv(results,headerRow,tr);


    thead.appendChild(headerRow);
    table.appendChild(thead);
	tbody.appendChild(tr);
	table.appendChild(tbody);
    crossreferenceresults.append(table);

    //generating mobile view divs
    GenerateMobileViewDivs(crossreferenceresultsMobileView,results);


}

const appendCompetitorQueryParam =function(inputVal){

    if(inputVal!=null && inputVal.length>0 && inputVal!==undefined){
       var URL= window.location.protocol + "//" + window.location.host + window.location.pathname + '?competitorPart='+inputVal;
       window.history.replaceState({ path: URL }, '', URL);
    }

}

const GenerateMCHPEquivalentPartsDiv= function(response, headerRow, ele){

	let mchpequivalentParts=response.MicrochipEquivalents;
    const mchpequivalentPartsLengthPreFiltering=mchpequivalentParts.length;
    //on toggle of Show in-stock button the result will be updated to display the mchpequivalent parts which are in-stock
    if($('.btn-showinstock-toggle > input').is(":checked")){
         mchpequivalentParts=mchpequivalentParts.filter(o => {
 		 return o.QtyInStock > 0;
		});
    }


	noOfResultsDiv.empty();
    if(mchpequivalentParts.length>0){
        noOfResultsDiv.html('<div><span><b>'+mchpequivalentParts.length+' Results</b> | Showing '+ mchpequivalentParts.length +' of '+mchpequivalentPartsLengthPreFiltering+
            ' Equivalent Results for "<b>'+response.CompetitorPartCPN + '</b>"</span></div>');

    }

    const mchpquivalentPartsDiv= document.createElement('div');
   	mchpquivalentPartsDiv.className='mchp-eqv-parts-container';
	const mchpPartParamDivParent=document.createElement('div');

    for(let i=0;i<mchpequivalentParts.length;i++) {

        const parts=mchpequivalentParts[i];
        const mchpPartTd=  document.createElement('td');
        const mchpParentDiv=document.createElement('div');
        const mchpChildDiv=document.createElement('div');
        generateCommonMCHPEquivalentPartData(mchpChildDiv,parts);

        const mchpAddToCartDiv=document.createElement('div');
		mchpAddToCartDiv.className='add-quantity';

        const mchpAddToCartLabel=document.createElement('label');
		mchpAddToCartLabel.setAttribute("for","quantity-"+i);
        mchpAddToCartLabel.textContent="Quantity";
        const mchpAddToCartInput=document.createElement('input');
        mchpAddToCartInput.setAttribute("name","QtyAmt");
        mchpAddToCartInput.id="quantity-"+i;

        const helperText=document.createElement('small');
        helperText.textContent=parts.AvailableIn;

        const mchpAddToCartHelperText=document.createElement('small');
        mchpAddToCartHelperText.textContent=parts.AvailableIn;
		const mchpAddToCartHelperButtonDiv=document.createElement('div');
		mchpAddToCartHelperButtonDiv.className=mchpButtonWrapper;
		const mchpAddToCartHelperAnchor=document.createElement('a');
        mchpAddToCartHelperAnchor.setAttribute('role','button');
        mchpAddToCartHelperAnchor.setAttribute('tabindex','0');

		mchpAddToCartHelperAnchor.setAttribute('partNumber',parts.EqvntCPN);
        mchpAddToCartHelperAnchor.className="addtocart mchp-button solid";
        const addToCartButtonText=$(crsdataDivElementSelector).attr("data-addToCart-BtnText");


        mchpAddToCartHelperAnchor.innerHTML= '<div> <i class="fas fa-shopping-cart"></i></div><span>'+addToCartButtonText+'</span></div>';
        mchpAddToCartHelperAnchor.setAttribute("onclick", "addToCartMCHPCRS($(this),'"+ parts.EqvntCPN + "','https://www.microchipdirect.com/product/" + parts.EqvntCPN+"','',''); getCartCountAndTotal();");
        mchpAddToCartHelperAnchor.setAttribute("data-name","Silicon Product Page|Add to Cart");

        mchpAddToCartHelperButtonDiv.appendChild(mchpAddToCartHelperAnchor);

        mchpAddToCartLabel.textContent="Quantity";
        mchpAddToCartDiv.appendChild(mchpAddToCartLabel);
        mchpAddToCartDiv.appendChild(mchpAddToCartInput);
       	mchpAddToCartDiv.appendChild(helperText);
        mchpAddToCartDiv.appendChild(mchpAddToCartHelperButtonDiv);
		mchpChildDiv.appendChild(mchpAddToCartDiv);

        mchpParentDiv.appendChild(mchpChildDiv);
        mchpPartTd.appendChild(mchpParentDiv);
        mchpquivalentPartsDiv.appendChild(mchpPartTd);

        //creating mchp equivalent parts parameter td
        const mchpPartParamTd= document.createElement('td');
    	const mchpPartParamDivChild=document.createElement('div');
		const mchpPartParamObj=parts.MchpequvntParameter[0];

       for(const property in mchpPartParamObj){

			const div=document.createElement('div');
            div.innerHTML+='<div><div><div><div><span>'+`${property}`+'</span></div></div>';

            const propertyvalue=mchpPartParamObj[property].trim()!==""?mchpPartParamObj[property]:'-';
            div.innerHTML+='<div><div><span>'+propertyvalue+'</span></div></div></div></div>';

			mchpPartParamDivChild.appendChild(div);

        }

        mchpPartParamTd.appendChild(mchpPartParamDivChild);
        mchpPartParamDivParent.appendChild(mchpPartParamTd);

        headerRow.appendChild(mchpquivalentPartsDiv);
		ele.appendChild(mchpPartParamDivParent);

    }

}



const copyURLToClipboard =function() {

    const browserCurrentURL=window.location.href;
    const tempInput=$("<input>");
    $("body").append(tempInput);
    tempInput.val(browserCurrentURL).select();
    const crossReferenceShareLinkSuccessMsg = '<span class="fa-regular fa-circle-check fa-beat" style="color: #ffffff;"></span> Link Copied';
	const crossReferenceShareLinkFailureMsg= '<span class="fa-regular fa-circle-exclamation fa-beat" style="color: #ffffff;"></span> Failed to Copy link!!'

    try{
    	document.execCommand('copy');
        showShareLinkModal(crossReferenceShareLinkSuccessMsg,1000);

    }
    catch(error){
        showShareLinkModal(crossReferenceShareLinkFailureMsg,1000);

    }
    tempInput.remove();

}

function showShareLinkModal(message, delayTime) {
    CrossReferenceshareMessage.html(message);
    CrossReferenceshareModal.show().delay(delayTime).fadeOut(1000);
  }

const DisplayNoResultsDivForCRS= function(inputVal){
    crossreferenceresults.html("");
    crossreferenceresultsMobileView.html("");


    if(CrossReferenceSButtonControls.length>0){
		CrossReferenceSButtonControls.hide();
    }

    const noresultsDiv=document.createElement('div');
    noresultsDiv.className='noresultsDiv';

    const noresultsInnerDiv=document.createElement('div');
    noresultsInnerDiv.innerHTML="<p>No items were found matching your search for <b>"+inputVal+"</b>.<br>Please adjust or change your search input and retry.</p>";
    noresultsDiv.appendChild(noresultsInnerDiv);
    crossreferenceresults.append(noresultsDiv);
    crossreferenceresultsMobileView.append(noresultsDiv.cloneNode(true));

}

function addToCartMCHPCRS(cntrl, cpnId, imageUrl, minOrderQty, maxOrderQty) {
    let qtyCntrl=null;
    if (cntrl.parent()){
        qtyCntrl = cntrl.parent().parent().find('[name=QtyAmt]');
    }
    else{
        qtyCntrl = cntrl.prev();
    }

    var prodQty = qtyCntrl.val();

    microchipDIRECT.addToCart(cpnId, prodQty);

}



const GenerateMobileViewDivs=function(crossReferenceParentDivElement,crossReferenceResult){

    const crsMobileViewDiv=document.createElement("div");
    crsMobileViewDiv.className="div-crs-mv";

    const competitorCardDiv=document.createElement("div");
    competitorCardDiv.className="div-competitor-card";

    const competitorCardBodyDiv=document.createElement("div");
    competitorCardBodyDiv.className="div-competitor-card-body";

    const CompetitorCardImage=document.createElement("img");
    CompetitorCardImage.className="img-competitor";
    CompetitorCardImage.setAttribute('alt','Representative Competitor Image');
    CompetitorCardImage.src=crossReferenceResult.CompetitorPartImageURL!=null? results.CompetitorPartImageURL:"https://icon-library.com/images/microchip-icon/microchip-icon-1.jpg";

    const competitorCardPartNumber=document.createElement('p');
    competitorCardPartNumber.className='competitor-partnumber';
    competitorCardPartNumber.textContent=crossReferenceResult.CompetitorPartCPN;


    const competitorCardPartDescription=document.createElement('p');
    competitorCardPartDescription.className='competitor-partDescription';
    competitorCardPartDescription.textContent=crossReferenceResult.CompetitorPartDescription;

    competitorCardBodyDiv.appendChild(CompetitorCardImage);
    competitorCardBodyDiv.appendChild(competitorCardPartNumber);
    competitorCardBodyDiv.appendChild(competitorCardPartDescription);

    competitorCardDiv.appendChild(competitorCardBodyDiv);

    crossReferenceParentDivElement.append(competitorCardDiv);

    const mchpequivalentPartsDiv=document.createElement('div');

    let microchipEqvParts=crossReferenceResult.MicrochipEquivalents;
    const microchipEqvPartsPreFiltering=microchipEqvParts.length;

    if($('.btn-showinstock-toggle > input').is(":checked")){
         microchipEqvParts=microchipEqvParts.filter(o => {
 		 return o.QtyInStock > 0;
		});
    }
    noOfResultsDiv.empty();
        if(microchipEqvParts.length>0){
            noOfResultsDiv.html('<div><span><b>'+microchipEqvParts.length+' Results</b> | Showing '+ microchipEqvParts.length +' of '+microchipEqvPartsPreFiltering+
                ' Equivalent Results for "<b>'+crossReferenceResult.CompetitorPartCPN + '</b>"</span></div>');

        }

    for(let i=0;i<microchipEqvParts.length;i++) {

        const mchpeqtParts=microchipEqvParts[i];
        const mchpequivalentPartsSubDiv=document.createElement('div');
        generateCommonMCHPEquivalentPartData(mchpequivalentPartsSubDiv,microchipEqvParts[i]);
        mchpequivalentPartsDiv.appendChild(mchpequivalentPartsSubDiv);
        const divCrossRefMobileViewButtonsWrapper = document.createElement('div');
        divCrossRefMobileViewButtonsWrapper.className="btn-wrapper-crs";
        const divCRSMobileViewSpecificationsButton = document.createElement('div');
        divCRSMobileViewSpecificationsButton.className=mchpButtonWrapper;
        const btnProductSpecifications=document.createElement('a');
        btnProductSpecifications.setAttribute('role','button');
        btnProductSpecifications.className="mchp-button solid";
        const productSpecURL=$(crsdataDivElementSelector).attr("data-prdtSpecBtnURL")+ mchpeqtParts.DeviceFamilyName;
        btnProductSpecifications.setAttribute('href',productSpecURL);
        btnProductSpecifications.innerText=$(crsdataDivElementSelector).attr("data-prdtSpecBtnText");
        divCRSMobileViewSpecificationsButton.appendChild(btnProductSpecifications);
        const divCRSMobileViewPurchaseButton = document.createElement('div');
        divCRSMobileViewPurchaseButton.className=mchpButtonWrapper;
        const btnProductPurchaseOptions=document.createElement('a');
        btnProductPurchaseOptions.setAttribute('role','button');
        btnProductPurchaseOptions.className="mchp-button mchp-button-regular red-outline";
        const purchaseOptionURL=$(crsdataDivElementSelector).attr("data-purchaseOptionsBtnURL")+mchpeqtParts.EqvntCPN;
        btnProductPurchaseOptions.setAttribute('href',purchaseOptionURL);
        btnProductPurchaseOptions.innerText=$(crsdataDivElementSelector).attr("data-purchaseOptionsBtnText");
        divCRSMobileViewPurchaseButton.appendChild(btnProductPurchaseOptions);
        divCrossRefMobileViewButtonsWrapper.appendChild(divCRSMobileViewSpecificationsButton);
        divCrossRefMobileViewButtonsWrapper.appendChild(divCRSMobileViewPurchaseButton);
        mchpequivalentPartsSubDiv.appendChild(divCrossRefMobileViewButtonsWrapper);

    }
    crossReferenceParentDivElement.append(mchpequivalentPartsDiv);

}

const generateCommonMCHPEquivalentPartData = function(ele,mchpPartInfo){

		const parts=mchpPartInfo;

        const mchpPartImgDiv=document.createElement('div');
        mchpPartImgDiv.className='mchp-eqv-part-img';
        const mchpPartImgDivLink=document.createElement('a');
        const mchpCPNImageSrc='https://www.microchipdirect.com/product/'+parts.EqvntCPN;
        mchpPartImgDivLink.href=mchpCPNImageSrc;
        const mchpPartImg= document.createElement('img');
        mchpPartImg.setAttribute('alt','Product Image of'+parts.EqvntCPN);
        mchpPartImg.src=parts.EqvntImgURL;
        mchpPartImg.setAttribute("onerror",'this.onerror=null;this.src="https://www.microchip.com/sitesearch/images/photo-not-available.jpg";');

        mchpPartImgDivLink.appendChild(mchpPartImg);
        mchpPartImgDiv.appendChild(mchpPartImgDivLink);
        ele.appendChild(mchpPartImgDiv);

        const mchpPartNameDiv=document.createElement('div');
        mchpPartNameDiv.className='mchp-eqv-partname';

        const mchpPartNameDivLink=document.createElement('a');
        mchpPartNameDivLink.href='https://www.microchipdirect.com/product/'+parts.EqvntCPN;
        mchpPartNameDivLink.textContent=parts.EqvntCPN;

		mchpPartNameDiv.appendChild(mchpPartNameDivLink);
		ele.appendChild(mchpPartNameDiv);

        const mchpPartDescriptionDiv=document.createElement('div');
        mchpPartDescriptionDiv.className='mchp-eqv-partdesc';

        const descSpan=document.createElement('span');
        descSpan.textContent=parts.EqvntDescription;

		mchpPartDescriptionDiv.appendChild(descSpan);
        ele.appendChild(mchpPartDescriptionDiv);

        const mchpPartStockDiv=document.createElement('div');
		mchpPartStockDiv.className='mchp-eqv-partStock';

        const mchpPartStockInfoDiv=document.createElement('div');
		mchpPartStockInfoDiv.className='mchp-eqv-partStockInfo';

        const stockInfoSpan=document.createElement('span');
        stockInfoSpan.textContent="In Stock: " + parts.QtyInStock;
        mchpPartStockInfoDiv.appendChild(stockInfoSpan);


        const mchpPartStockProcessTimeDiv=document.createElement('div');
		mchpPartStockProcessTimeDiv.className='mchp-eqv-procTime';

        const processTime=document.createElement('small');
        processTime.textContent='('+parts.ProcessingTime+')';
        mchpPartStockProcessTimeDiv.appendChild(processTime);

        mchpPartStockDiv.appendChild(mchpPartStockInfoDiv);
        mchpPartStockDiv.appendChild(mchpPartStockProcessTimeDiv);
        ele.appendChild(mchpPartStockDiv);

        const mchpPartStockEnquiry=document.createElement('div');
		mchpPartStockEnquiry.className='mchp-stockEnquiry';

        mchpPartStockEnquiry.textContent="When can I get More?";
        const crstooltipspan=document.createElement('span');
        crstooltipspan.className='mchp-tool-tip';
		crstooltipspan.textContent=parts.WhenCanIGetMore;

        mchpPartStockEnquiry.appendChild(crstooltipspan);
        ele.appendChild(mchpPartStockEnquiry);

        const mchpPartPricingDiv=document.createElement('div');
		mchpPartPricingDiv.className='mchp-part-pricing';
        const mchpPartPricingSpan=document.createElement('span');
        mchpPartPricingSpan.textContent=parts.PricingDetails;
        mchpPartPricingDiv.appendChild(mchpPartPricingSpan);
		ele.appendChild(mchpPartPricingDiv);

}
//setting up mD environment to be chosen to avoid CORS/integration issues
function setupMDURLs() {
    const mdUrl = $('.mchp-direct-url-base')[0].innerHTML;
    if(URL !==  undefined) {
        URL = mdUrl;
    }
    if(microchipDIRECT !==  undefined) {
        microchipDIRECT.URL = mdUrl;
    }
}
const DateReportPublished="publishDate";
const DateReportLastUpdated="lastUpdated";
const SecurityVulnerabilityTableID="#security-vulnerability-table";
const securityvulnerabilityreportstableContainer =".securityvulnerabilityreportstable";

$(document).ready ( function(){
 const $securityvulnerabiltyreport=$('.securityvulnerabilityreportstable');
    if($securityvulnerabiltyreport.length>0){
         LoadSVRTable();
    }

});

const LoadSVRTable= function(){

    setSharedInformation();

    const svrendpoint=$(SecurityVulnerabilityTableID)[0].dataset.svrEndpoint;
    const numberofreultsperpage=$(SecurityVulnerabilityTableID)[0].dataset.numOfDocuments;
    const sortColumnNameOnPageLoad=$(SecurityVulnerabilityTableID)[0].dataset.sortdatecolumn;
    let sortColumnIndex=3;
    if(sortColumnNameOnPageLoad==="lastUpdated"){
		sortColumnIndex=4;
    }

    const api=apiRootPath+svrendpoint

       $(SecurityVulnerabilityTableID).DataTable({
            "pageLength":parseInt(numberofreultsperpage),
            "processing" : true,
            "destroy": true,
            "ajax" : {
            "url" : api,
            dataSrc :  function ( json ) {
              for ( var i=0 , ien=json.length ; i<ien ; i++ ) {
                json[i][DateReportPublished] = formatDate(json[i][DateReportPublished]);
                json[i][DateReportLastUpdated] = formatDate(json[i][DateReportLastUpdated]);
              }
            return json;
            }
        },
        "columns" : [{
            "data" : "technology"
        }, {
            "data" : "briefDescription"
        }, {
            "data" : "severity"
        },
           {
            "data" : DateReportPublished
        }, {
            "data" : DateReportLastUpdated
        }],
         "columnDefs": [{
                    "type": "date",
                    "targets": [3,4] // Index of the date column
         }],
         "order": [[sortColumnIndex, 'desc']],

         "initComplete": function(){
              if ($(this).find(".dataTables_empty").length === 1) {
            	$(securityvulnerabilityreportstableContainer).hide();
        	}
        	if (this.api().page.info() && this.api().page.info().pages === 1) {
                $(securityvulnerabilityreportstableContainer).find('.dataTables_paginate').hide();
            }

         }

    });

};



const formatDate=function(date){

   const months = [
    "January", "February", "March", "April", "May", "June", "July",
    "August", "September", "October", "November", "December"
  ];

  date=date.split("T")[0];
  const parts = date.split("-");

  const day = parseInt(parts[2],10);;
  const month = months[parseInt(parts[1], 10) - 1];
  const year = parseInt(parts[0],10);

  return `${month} ${day}, ${year}`;

}
const gatedButtonSelector =".gated-button-container";
const gatedButtonCookieName=$(gatedButtonSelector+" a").attr("data-cookieName");
const successMessageDivSelector=".successMessageDiv";

$(function() {
"use strict";

if($(gatedButtonSelector).length>0){
   if(isLoggedIn() && isSubscribedToSecurityVulnerability()){
	    $(gatedButtonSelector).hide();
    }
 }

    $(".gated-button-container >.mchp-button").hover(function () {
  		$(".gated-button-container >.mchp-button>em").toggleClass("fa-beat-fade");
    });


});


function isSubscribedToSecurityVulnerability(){

	const isSubscribedToSecurityVulnerabilityfromAEM = !(readCookie(gatedButtonCookieName) === null || readCookie(gatedButtonCookieName) === undefined) && (readCookie(gatedButtonCookieName)==='true');
	return isSubscribedToSecurityVulnerabilityfromAEM;
}

function subscribetosecurityvulnerability(a){

  //post login if he has already subscribed hiding div for now
    if(isSubscribedToSecurityVulnerability()){
		$(gatedButtonSelector).hide();
        return;
    }
    const existingClass=$(a).find('em').attr('class');

    $(a).find('em').removeClass().addClass(spinner);

    const subscribeSecurityVulnerabiltyEndpointRelative = $(gatedButtonSelector+" a").attr("data-apiPath");
    const token = localStorage.getItem("AccessToken");

    const subscribeJson={
        isSecurityVulnerabilitySubscribedFromAEM:true
    };

	 $.ajax({
            type: "POST",
            url: apiRootPath+subscribeSecurityVulnerabiltyEndpointRelative,
            contentType: 'application/json; charset=utf-8',
            data:JSON.stringify(subscribeJson),
            dataType:'json',
            beforeSend: function(xhr){
				//Include the bearer token in Authorization header
				xhr.setRequestHeader("Authorization", 'Bearer ' + token);
        	},success:function(responseData){
               if(responseData.isPreferencesSaved){

                   showSuccessMessage();
                   setSubscriptionCookie();
                }else{
                    $(a).find('em').removeClass(spinner).addClass(existingClass);
                    console.log('error subscribing');
                }
			},
			error:function(code){

                if (code === 401) {
					$(a).find('em').removeClass(spinner).addClass(existingClass)
                    handleApiUnauthorizedError();
                }
            }
    });

}

const showSuccessMessage=function(){

      const successMessage=$(gatedButtonSelector+" a").attr("data-success-message");
      const successMessageDiv='<div class="successMessageDiv">'+successMessage+'</div>';

      $(gatedButtonSelector).html('');
      $(gatedButtonSelector).append(successMessageDiv);

      $(successMessageDivSelector).css('display','block');
                setTimeout(() => {
                    $(successMessageDivSelector).css('opacity', '1');
                }, 20);

    $(successMessageDivSelector).css('opacity','0');
                setTimeout(() => {
                    $(successMessageDivSelector).css('display','none');
                }, 2000);

     setTimeout(() => {
                        $(gatedButtonSelector).css('display','none');
                    }, 2000);

}

const setSubscriptionCookie= function(){

    const d = new Date();
    d.setTime(d.getTime() + 60 * 24 * 60 * 60 * 1000);
    const expires = "expires=" + d.toUTCString();

    if (!onProd) {
        document.cookie =
                gatedButtonCookieName+"=" + true + ";" + expires + ";path=/;secure;samesite=None";

    }else{
         document.cookie =
                gatedButtonCookieName+"=" + true + ";" + expires + ";path=/;secure;samesite=None;domain=.microchip.com";

    }


}

const associationDivClass="associationDiv";
const associationAttributeDiv=".association-attributesDiv";
const pathEleClassName=".silicon-cf-path";
const folderPathParam="?folderPath=";
const responseDisplay=".response-display";
const contentFragmentsTraversed="Content Fragments Traversed";
const modifiedResourceReport="Modified Resource Report";
const downloadReportinnerHTML='"> Download Report</a></p>';
const hrefInnerHTML=' : <a href="';
const OffsetString="Offset";
let ProductTagAPIEP="";
let folderPath="";

$(document).ready(function() {
    if($(associationAttributeDiv).length>0){

		ProductTagAPIEP= $(associationAttributeDiv)[0].dataset.producttagassociationep;

    }
});

function getTotalCountOfDevices(){
    folderPath = $(pathEleClassName)[0].value.trim();
    if (folderPath.length > 0) {
        const url = getProductTagAPIUrl(".devices.json", true);
        $.getJSON(url, function(response) {
            $('.totalCount')[0].innerText = "Silicon Device Under Path " + folderPath + ": " + response.totalCount;
        });
    }
}

function associateProductTag(ele, selector) {
    const offset = getFieldValue($(ele).siblings('input')[0], 0);
    let limit = getFieldValue($(ele).siblings('input')[1], 50);
    limit = validateLimit(limit);
    folderPath = $(pathEleClassName)[0].value.trim();
    if (folderPath.length > 0) {
        const url = getProductTagAPIUrl(selector, false, offset, limit);
        handleJsonResponse(ele, url);
    }
}

function AssociateProductTag(ele) {
    associateProductTag(ele, ".devices.json");
}

function AssociateProductTagToDocuments(ele) {
    associateProductTag(ele, ".documents.json");
}

function AssociateProductTagToDevtools(ele) {
    associateProductTag(ele, ".devtools.json");
}

function validateLimit(limit) {
    if (!(limit >= 0 && limit <= 300)) {
        limit = 50;
    }
    return limit;
}

function getProductTagAPIUrl(selector, getTotalCount, offset, limit) {
    let url = ProductTagAPIEP + selector + folderPathParam + folderPath;
    if (getTotalCount) {
        url += "&totalCount=true";
    } else {
        url += "&offset=" + offset + "&limit=" + limit;
    }
    return url;
}

function getFieldValue(input, defaultValue) {
    return input.value !== '' ? input.value : defaultValue;
}

function handleJsonResponse(ele, url) {
    $.getJSON(url, function(response) {
        const responseDiv = $(ele).siblings(responseDisplay)[0];
        responseDiv.innerHTML = '<p> ' + contentFragmentsTraversed + ' : ' + response[contentFragmentsTraversed] + '</p>' +
            '<p> ' + OffsetString + ' : ' + response.offset + '</p>' +
            '<p> ' + modifiedResourceReport + hrefInnerHTML + window.location.origin + response.associationsreport + downloadReportinnerHTML;
    });
}

