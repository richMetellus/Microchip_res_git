setTimeout(function () {
    if (typeof mouseflow != 'undefined' && window.name.indexOf('mf_liveHeatmaps') != -1) {
        const listenMenuHover = () => document.querySelector('.mchp-header').addEventListener('mouseover', () => {
            heatmapDataLoader.redrawHeatmap({ type: 'custom' });
        });
	const listenMenuHover2 = () => document.querySelector('.all-categories-list').addEventListener('mouseover', () => {
            heatmapDataLoader.redrawHeatmap({ type: 'custom' });
        });
        document.querySelector('.mchp-header').onmouseover = function () {
            setTimeout(listenMenuHover, 800);
		setTimeout(listenMenuHover2, 800);
        }
    }
}, 200);
if(document.location.href.indexOf("mplab-discover") > -1){
window._mfq = window._mfq || [];
window._mfq.push(["tag", "mplab-discover"])
}
if(document.location.href.indexOf("/en-us/application-notes") > -1){
window._mfq = window._mfq || [];
window._mfq.push(['config', 'enableSpa', false]);
}window._mfq = window._mfq || [];
_mfq.push(mouseflow => {
    const autoTagParameters = ['ttclid', 'igshid', '_hsenc', '_hsmi', 'mc_cid', 'mc_eid', 'mkt_tok', 'soc_src', 'soc_trk', 'msclkid', 'twclid', 'gad_source', 'hsa_cam'];

    for (const parameter of autoTagParameters) {
        let value = getQuerystringParameterByName(window.location.href, parameter);
        if (!value) value = getQuerystringParameterByName(document.referrer, parameter);
        if (value) mouseflow.setVariable(parameter, value);
    }

    function getQuerystringParameterByName(url, name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');

        const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        const results = regex.exec(url);
        if (!results) return '';

        return decodeURIComponent(results[1].replace(/\+/g, ' '));
    }
});;window.mouseflowHtmlDelay = 4000;;window.mouseflowAutoStart = false;
setTimeout(function() {
function loadMouseflow() { 
if (typeof mouseflow != 'undefined' && window.name.indexOf('mf_liveHeatmaps') < 0) {
mouseflow.start();
}
document.removeEventListener('mousemove', loadMouseflow);
document.removeEventListener('touchstart', loadMouseflow);
document.removeEventListener('scroll', loadMouseflow);
}
document.addEventListener('mousemove', loadMouseflow);
document.addEventListener('touchstart', loadMouseflow);
document.addEventListener('scroll', loadMouseflow);
}, 500);;window._mfq = window._mfq || [];
(function() {
    function getParameter(variable) {
        var query = location.search.substring(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) == variable) {
                return decodeURIComponent(pair[1]);
            }
        }
        return false;
    }
    var omniture_cid = getParameter('cid');
    if (omniture_cid) {
        window._mfq.push(['setVariable', 'omniture_cid', omniture_cid]);
    }
})();var mouseflowDisableKeyLogging = true;// ReSharper disable InconsistentNaming
if (typeof mouseflow === 'undefined' && typeof mouseflowPlayback === 'undefined') {
    (function() {
        var _gdprDefault = false;
        var _honorDoNotTrack = false;
        var _mergeUrls = [];
        var _pageIdentifiers = ["componentid"];
        var _appUrl = 'https://us.mouseflow.com';

        function _log(_msg, _getPageViewTime) {
            _getPageViewTime = (typeof _getPageViewTime !== 'undefined' ? _getPageViewTime : '');
            if (_config.debug) console.log('MF' + (_config.includeDebugTime ? ' - ' + _getPageViewTime : '') + ': ' + _msg);
        }

        var _native = new _NativeCode(window);
        var _timer = new _Timer(window);
        var _helper = new _Helper(window, Math, JSON, _native);
        var _eventListener = new _EventListener(_native, _helper);
        var _localStorage = new _Storage('local', window, _helper, _log);
        var _sessionStorage = new _Storage('session', window, _helper, _log);
        var _spa = new _Spa(window);

        var _config = new _Config(window, _localStorage, _gdprDefault, _honorDoNotTrack);
        _config._init();
        _config._cssSelectorBlacklist = [".profile-name-txt","div.name span",".user-name-long > span",".login-box"];
        _config._cssSelectorWhitelist = [];
        _config._cssSelectorTracked = [".iframe-container","#Blog\\ Articles .newstab-btn","#mchpBanner2 .mchp-banner-carousel-left","#mchpBanner2 .mchp-banner-carousel-right","#movie_player>div.ytp-cued-thumbnail-overlay>button"];
        _config._customTaggers = [{_tag:"Reference Designs",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-1 .image-with-title > .content-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Reference Designs*",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-1 .image-with-title > .image-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Design Tools",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-2 .image-with-title > .content-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Design Tools*",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-2 .image-with-title > .image-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Document Search",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-3 .image-with-title > .content-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Document Search*",_event:"Click",_selector:"div:nth-of-type(3) > .featured-card-container > .featured-card-3 .image-with-title > .image-container",_pageUrl:"https://www.microchip.com/",_pushPageviewUrl:null},{_tag:"Client Support Contact",_event:"Click",_selector:".embed-unsafe-html-modal-button",_pageUrl:"https://www.microchip.com/en-us/support/design-help/client-support-services",_pushPageviewUrl:"https://www.microchip.com/en-us/support/design-help/client-support-services-ct-Client-Support-Contact"},{_tag:"Buy Now",_event:"Click",_selector:".buy-now-button-wrapper > .addtocart",_pageUrl:"",_pushPageviewUrl:null},{_tag:"myMCHPRecommended product",_event:"Click",_selector:"#ProductCardViewContainer > div:nth-of-type(1) > div:nth-of-type(1) > div:nth-of-type(1) > div:nth-of-type(1) > .mchp-user-cards > .row > div:nth-of-type(1) > div:nth-of-type(1) div:nth-of-type(1) > div:nth-of-type(1) > div:nth-of-type(1) > div:nth-of-type(1) > div:nth-of-type(1) > .base-card-wrapper > .card > .card-custom-p > .content-card-title > .card-title-link",_pageUrl:"https://www.microchip.com/myMicrochip/#/",_pushPageviewUrl:null},{_tag:"PP DataSheetDownload",_event:"Click",_selector:"div:nth-of-type(3) > .action-button > a",_pageUrl:"https://www.microchip.com/en-us/product/PIC32MX360F512L",_pushPageviewUrl:null}];
        _config._websiteId = '1641dedf-64da-4281-afae-50c955054fbc';
        _config._enforcePrivacy = true;
        _config._initialDomLimit = '10000000';
        _config._setConfig('appUrl', _appUrl);

        /******************************************************************************************
Mouseflow recording script, DOM mutation version (posts HTML + DOM mutations)
-------------------------------------------------------------------------------------------
Copyright (c) 2013 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
Configuration:
-------------------------------------------------------------------------------------------
- mouseflowPath (string): overrides path name
- mouseflowDisableKeyLogging (bool): set to true to disable key logging. Default false
- mouseflowAutoStart (bool): set to false to trigger the recording manually. Default true
- mouseflowPlayback (bool): is set to true when in playback mode. This disables recording.
- mouseflowExcludeSubDomains (bool): set to true to disable cross-subdomain recording.
  Default false.
- mouseflowForceHttps (bool): set to false to send data through the page's protocol. Set
  to true to force HTTPS. Default true.
- no-mouseflow (css class): set to exclude key logging on input field
- <!-- MouseflowExcludeStart --> ... <!-- MouseflowExcludeEnd --> (html comments)
  use to exclude parts of the HTML page
- mouseflowRegisterSubmitTimeout (int): overrides default timeout of 2000 ms.
- mouseflowForceGdpr (bool): forces GDPR mode (no keystrokes, no dom replication,
  anonymize ip). If script is already in GDPR mode it cannot be turned off.
-------------------------------------------------------------------------------------------
API usage
-------------------------------------------------------------------------------------------
- mouseflow.start() - starts recording, if they are not started automatically
  (see "mouseflowAutoStart")
- mouseflow.stop() - stops recording manually.
- mouseflow.newPageView(optional newPath) - restarts recordings as new pageview.
- mouseflow.tag(tagName) - tags the pageview with a custom string.
  A pageview can have multiple tags
- mouseflow.isRecording() - gets the current recording state (true|false)
- mouseflow.getSessionId() - gets the current session ID (guid)
- mouseflow.getPageViewId() - gets the current pageview ID (guid)
- var mouseflowDynamicHtmlParts = [
          { path: "#header > div > ul",
            portion*: "head|whole**",
            zip*: "yes|no|auto**",
            location*: {position: "before|after", path: "#content > div:nth-of-type(1)" }},
            {...}
      ]; (* optional, ** default value, if not set)
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _RecordingScript(_window, _math, _native, _config, _timer, _helper, _eventListener, _urlFilter,
    _pageMatcher, _localStorage, _sessionStorage, _feedbackWidget, _domMutationDetector, _log, _spa) {
    var _enableFetchConfig = false;
    var _baseUrl = 'https://n2.mouseflow.com/';
    var _recordingRate = 100.00000;
    var _pageRules = [{_type:"notEquals",_value:"/en-us/adapter-compatibility"},{_type:"notEquals",_value:"/en-us/application-notes"},{_type:"notEquals",_value:"/en-us/about/media-center/blog"},{_type:"notEquals",_value:"/en-us/education/case-studies"},{_type:"notEquals",_value:"/en-us/code-examples"},{_type:"notEquals",_value:"/en-us/support/design-help/design-partner-ecosystem/design-partner-program"},{_type:"notEquals",_value:"/en-us/document-listing"},{_type:"notEquals",_value:"/en-us/products/fpgas-and-plds/ip-core-tools"},{_type:"notEquals",_value:"/en-us/support/package-drawings"},{_type:"notEquals",_value:"/en-us/tools-resources/reference-designs"},{_type:"notEquals",_value:"/en-us/about/global-sales-and-distribution"},{_type:"notEquals",_value:"/en-us/about/media-center/videos"},{_type:"notEquals",_value:"/en-us/software-library"},{_type:"notEquals",_value:"/en-us/mindi-sw-library"}];
    var _pageRecordingRules = [];
    var _forms = [{_formId:"aWJN9PSeD0C853cYItGg1A",_target:"#page-4e1654e9a9 > div.root.responsivegrid.no-section-grouping > div:[3] > div > div:[5] > div > div > div > div > div:[4] > div > div > div > form"}];
    var _domainList = ["www.microchip.com"];
    var _needsInstalling = false;
    var _needsApproval = false;
    var _lastUpdate = '2024-05-08T06:28:57.2470930Z';
    var _version = '18.04';
    var _isDomObserverInitialized = false;
    var _isInitialized = false;
    var _isStarted = false;
    var _isRecording = false;
    var _hasSentLoadEvent = false;
    var _formNameRegex = /\[(\d+)\]_mf$/;
    var _document = _window.document;
    var _location = _window.location;
    _initMouseflowQueueAndSetConfigs();

    var _userInfo = _initUserInfo();
    var _recordingData = _initRecordingData();
    var _mainScrollElement = _getMainScrollElement();

    var _internalSettings = {
        _moveScrollInterval: 100,
        _relativeMoveInterval: 250,
        _pingInterval: 10000,
        _maxCharsToSendInUrl: 1336,
        _inactivityTimeoutTime: 1800000,
        _maximumPageViewTime: 3600000,
        _farFutureCookieLifetime: 7776000000,
        _pageviewLimit: 100,
        _chunkLimit: 2000,
        _domLimit: 8000,
        _urlMaxLength: 2048,
        _formTargetInterval: 200,
        _formTargetMaxTime: 5000
    };

    var _moveScrollIntervalFunc,
        _relativeMoveIntervalFunc,
        _pingintervalFunc,
        _inactivityFunc,
        _sendDataTimeoutFunc,
        _sendDomMutationTimeoutFunc,
        _inputChangeTimer,
        _elementScrollTimer,
        _mirrorClient,
        _blacklistedNodes = [],
        _whitelistedNodes = [],
        _trackedNodes = [],
        _trackedForms = [],
        _frozenElementIds = new Map();

    var _eventType = {
        _resize: 0,
        _scroll: 1,
        _mouseMove: 2,
        _mouseDown: 3,
        _mouseUp: 4,
        _click: 5,
        _mouseOver: 6,
        _mouseOut: 7,
        _keyPress: 8,
        _keyUp: 9,
        _change: 10,
        _focus: 11,
        _blur: 12,
        _submit: 13,
        _load: 14,
        _error: 15,
        _ajaxSend: 16,
        _ajaxLoad: 17,
        _tag: 18,
        _ping: 19,
        _pageViewEnd: 20,
        _touchStart: 21,
        _touchMove: 22,
        _touchEnd: 23,
        _orientationChange: 24,
        _touchStart2: 25,
        _touchMove2: 26,
        _touchEnd2: 27,
        _touchDoubleTap: 28,
        _touchSwipe: 29,
        _touchHold: 30,
        _touchTransform: 31,
        _touchDrag: 32,
        _keyDown: 33,
        _submitSuccess: 34,
        _submitFailure: 35,
        _blankFieldSubmit: 36,
        _changedFieldSubmit: 37,
        _domMutation: 38,
        _elementScroll: 39,
        _leaveDocument: 40,
        _relativeMouseMove: 41,
        _friction: 42,
        _livenessPing: 43 // not in use, but appears on old recordings, can be deleted after 2025/04/29
    };

    var _frictionType = {
        _bounce: { _name: 'bounce', _value: 2, _id: 1, _timeout: 1000 },
        _clickRage: { _name: 'click-rage', _value: 5, _id: 2, _timeout: 2000 },
        _clickError: { _name: 'click-error', _value: 2, _id: 3, _timeout: 20 },
        _mouseOut: { _name: 'mouse-out', _value: 1, _id: 5, _timeout: 20 },
        _speedBrowsing: { _name: 'speed-browsing', _value: 1, _id: 6, _timeout: 1000 },
        _submitFailure: { _name: 'submit-failure', _value: 3, _id: 7, _timeout: 20 }
    };

    var _whitespaceRegex = /[\x20\r\n]+/g;
    var _emailRegex = /(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@/;
    var _creditCardRegex = /^\d{12,19}$/;
    var _ignoredAttributesRegex = /^(onbeforeunload|onblur|onchange|onclick|onfocus|oninput|onkeydown|onkeypress|onkeyup|onload|onmousedown|onmouseenter|onmouseleave|onmousemove|onmouseout|onmouseover|onmouseup|onresize|onsubmit|ontouchcancel|ontouchend|ontouchenter|ontouchleave|ontouchmove|ontouchstart|onunload)$/;
    var _nonTextInputFieldRegex = /checkbox|radio|button|submit|file|image|reset/;
    var _creditCardPatterns = [
        {
            name: 'VISA',
            patternRegex: /^4(\d{15}|\d{17,18})$/
        },
        {
            name: 'Mastercard',
            patternRegex: /^(222[1-9]|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720|5[1-5]\d\d)\d{12}$/
        },
        {
            name: 'American Express',
            patternRegex: /^3[47]\d{13}$/
        },
        {
            name: 'Diners Club',
            patternRegex: /^3(0[0-5]|[689]\d)(\d{11}|\d{13}|\d{16})$/
        },
        {
            name: 'Discover',
            patternRegex: /^(6011|64[456789]\d|65\d{2})(\d{12}|\d{15})$/
        },
        {
            name: 'JCB',
            patternRegex: /^(352[89]|35[3-8]\d|2131|1800)\d{12,15}$/
        },
        {
            name: 'China UnionPay',
            patternRegex: /^(62[03456]\d{3}]|6210\d\d|621[1-7]\d\d|6218[0-2]\d|6218[4-9]\d|6219[0-7]\d|6220[0-579]\d|62201\d|6220[2-9]\d|622[1-9]\d{2}|622018|627[026]\d\d|62770\d|6277[1-7]\d|62778[1-9]|62779\d|628[2-9]\d\d|629[12]\d\d|810\d\d\d|811\d\d\d|81[2-6]\d\d\d|817[01]\d\d)\d{8,13}$/
        },
        {
            name: 'Maestro',
            patternRegex: /^((493698|50000\d|5000[1-9]\d|500[1-9]\d{2}|50[1-3]\d{3}|5040\d{2}|5041[0-6]\d|50417[0-4]|50417[6-9]|5041[89]\d|504[2-9]\d{2}|505\d{3}|506[0-5]\d{2}|5066[0-8]\d|50669[0-8]|506779|5067[89]\d|506[89]\d{2}|50[78]\d{3})\d{6,13}|(5[6-9]|63|67|6\d)\d{10,17})$/
        },
        {
            name: 'Elo',
            patternRegex: /^(40117[89]|438935|457631|457632|431274|451416|457393|504175|506699|5067[0-6]\d|50677[0-8]|50900\d|5090[1-9]\d|509[1-9]\d{2}|627780|636297|636368|65003[1-3]|65003[5-9]|65004\d|65005[01]|65040[5-9]|6504[1-3]\d|65048[5-9]|65049\d|6505[0-2]\d|65053[0-8]|65054[1-9]|6505[5-8]\d|65059[0-8]|65070\d|65071[0-8]|65072[0-7]|65090[1-9]|6509[1-6]\d|65097[0-8]|65165[2-9]|6516[67]\d|65500\d|65501\d|65502[1-9]|6550[34]\d|65505[0-8])\d{10}$/
        },
        {
            name: 'Hiper',
            patternRegex: /^(637095|63737423|63743358|637568|637599|637609|637612)\d{10}$/
        },
        {
            name: 'Hipercard',
            patternRegex: /^(606282)\d{10}$/
        },
        {
            name: 'Dankort',
            patternRegex: /^5019\d{12}$/
        },
        {
            name: 'VISA Dankort',
            patternRegex: /^4571\d{12}$/
        }
    ];
    /**
     * Function to do Luhn modulo check on credit card numbers
     * */
    var _luhnChk = (function(_arr) {
        return function(_ccNum) {
            var
                _len = _ccNum.length,
                _bit = 1,
                _sum = 0,
                _val;

            while (_len) {
                _val = parseInt(_ccNum.charAt(--_len), 10);
                _sum += (_bit ^= 1) ? _arr[_val] : _val;
            }

            return _sum && _sum % 10 === 0;
        };
    }([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]));

    function _resetMouseflowQueue() {
        _window._mfq = [];
    }

    function _initMouseflowQueueAndSetConfigs() {
        if (!_window._mfq)
            _resetMouseflowQueue();

        for (var _index = 0; _index < _window._mfq.length; _index++) {
            var _action = _window._mfq[_index];
            if (_action && _action.length) {
                var _deleteAction = true;

                if (_action[0] === 'config')
                    _config._setConfig.apply(_config, _action.slice(1));
                else if (_action[0] === 'newPageView')
                    _config._resetLocation.apply(_config, _action.slice(1));
                else
                    _deleteAction = false;

                if (_deleteAction)
                    delete _window._mfq[_index];
            }
        }
    }

    function _actionQueue(_existingQueue) {
        if (!_existingQueue)
            _existingQueue = [];

        // Ensure window.mouseflow has been set before executing actions from the queue
        var _this = this;
        _window.setTimeout(function() {
            for (var _index = 0; _index < _existingQueue.length; _index++)
                _this.push(_existingQueue[_index]);
        }, 1);
    }

    _actionQueue.prototype.push = function(_action) {
        if (!_action)
            return;

        try {
            if (typeof _action === 'object' && _action.length) {
                mouseflow[_action.slice(0, 1)].apply(mouseflow, _action.slice(1));
            } else if (typeof _action === 'function') {
                _action(mouseflow);
            }
        } catch (error) {
            var _message = 'Failed to execute item on action queue';
            var _actionString = _helper._jsonStringify(_action);
            if (_actionString)
                _message += '\n' + _actionString;
            _message += '\n' + error;
            _log(_message, _getPageViewTime());
        }
    };

    //##LICENSE_START##
    // Copyright 2011 Google Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //     http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    // This component contains modifications carried out by Mouseflow ApS.
    //##LICENSE_END##
    var __extends = this.__extends || function(d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        __.prototype = b.prototype;
        d.prototype = new __();
    };
    var MutationObserverCtor;
    if (typeof WebKitMutationObserver !== 'undefined')
        MutationObserverCtor = WebKitMutationObserver;
    else if (typeof MutationObserver !== 'undefined')
        MutationObserverCtor = MutationObserver;
    if (MutationObserverCtor === undefined) {
        _log('DOM Mutation Observers not supported.', _getPageViewTime());
    }
    var NodeMap = (function() {
        function NodeMap() {
            this.nodes = [];
            this.values = [];
        }
        NodeMap.prototype.isIndex = function(s) {
            return +s === s >>> 0;
        };
        NodeMap.prototype.nodeId = function(node) {
            var id = node[NodeMap.ID_PROP];
            if (!id)
                id = node[NodeMap.ID_PROP] = NodeMap.nextId_++;
            return id;
        };
        NodeMap.prototype.set = function(node, value) {
            var id = this.nodeId(node);
            this.nodes[id] = node;
            this.values[id] = value;
        };
        NodeMap.prototype.get = function(node) {
            var id = this.nodeId(node);
            return this.values[id];
        };
        NodeMap.prototype.has = function(node) {
            return this.nodeId(node) in this.nodes;
        };
        NodeMap.prototype.deleteNode = function(node) {
            var id = this.nodeId(node);
            delete this.nodes[id];
            this.values[id] = undefined;
        };
        NodeMap.prototype.keys = function() {
            var nodes = [];
            for (var id in this.nodes) {
                if (!this.isIndex(id))
                    continue;
                nodes.push(this.nodes[id]);
            }
            return nodes;
        };
        NodeMap.ID_PROP = '__mouseflow_node_map_id__';
        NodeMap.nextId_ = 1;
        return NodeMap;
    })();
    /**
        *  var reachableMatchableProduct = [
        *  //  STAYED_OUT,  ENTERED,     STAYED_IN,   EXITED
        *    [ STAYED_OUT,  STAYED_OUT,  STAYED_OUT,  STAYED_OUT ], // STAYED_OUT
        *    [ STAYED_OUT,  ENTERED,     ENTERED,     STAYED_OUT ], // ENTERED
        *    [ STAYED_OUT,  ENTERED,     STAYED_IN,   EXITED     ], // STAYED_IN
        *    [ STAYED_OUT,  STAYED_OUT,  EXITED,      EXITED     ]  // EXITED
        *  ];
        */
    var Movement;
    (function(Movement) {
        Movement[Movement['STAYED_OUT'] = 0] = 'STAYED_OUT';
        Movement[Movement['ENTERED'] = 1] = 'ENTERED';
        Movement[Movement['STAYED_IN'] = 2] = 'STAYED_IN';
        Movement[Movement['REPARENTED'] = 3] = 'REPARENTED';
        Movement[Movement['REORDERED'] = 4] = 'REORDERED';
        Movement[Movement['EXITED'] = 5] = 'EXITED';
    })(Movement || (Movement = {}));
    function enteredOrExited(changeType) {
        return changeType === Movement.ENTERED || changeType === Movement.EXITED;
    }
    var NodeChange = (function() {
        function NodeChange(node, childList, attributes, characterData, oldParentNode, added, attributeOldValues, characterDataOldValue) {
            if (childList === void 0) { childList = false; }
            if (attributes === void 0) { attributes = false; }
            if (characterData === void 0) { characterData = false; }
            if (oldParentNode === void 0) { oldParentNode = null; }
            if (added === void 0) { added = false; }
            if (attributeOldValues === void 0) { attributeOldValues = null; }
            if (characterDataOldValue === void 0) { characterDataOldValue = null; }
            this.node = node;
            this.childList = childList;
            this.attributes = attributes;
            this.characterData = characterData;
            this.oldParentNode = oldParentNode;
            this.added = added;
            this.attributeOldValues = attributeOldValues;
            this.characterDataOldValue = characterDataOldValue;
            this.isCaseInsensitive =
                this.node.nodeType === 1 /*Node.ELEMENT_NODE*/ &&
                    this.node instanceof HTMLElement &&
                    typeof(HTMLDocument) !== 'undefined' &&
                    this.node.ownerDocument instanceof HTMLDocument;
        }
        NodeChange.prototype.getAttributeOldValue = function(name) {
            if (!this.attributeOldValues)
                return undefined;
            if (this.isCaseInsensitive)
                name = name.toLowerCase();
            return this.attributeOldValues[name];
        };
        NodeChange.prototype.getAttributeNamesMutated = function() {
            var names = [];
            if (!this.attributeOldValues)
                return names;
            for (var name in this.attributeOldValues) {
                names.push(name);
            }
            return names;
        };
        NodeChange.prototype.attributeMutated = function(name, oldValue) {
            this.attributes = true;
            this.attributeOldValues = this.attributeOldValues || {};
            if (name in this.attributeOldValues)
                return;
            this.attributeOldValues[name] = oldValue;
        };
        NodeChange.prototype.characterDataMutated = function(oldValue) {
            if (this.characterData)
                return;
            this.characterData = true;
            this.characterDataOldValue = oldValue;
        };
        // Note: is it possible to receive a removal followed by a removal. This
        // can occur if the removed node is added to an non-observed node, that
        // node is added to the observed area, and then the node removed from
        // it.
        NodeChange.prototype.removedFromParent = function(parent) {
            this.childList = true;
            if (this.added || this.oldParentNode)
                this.added = false;
            else
                this.oldParentNode = parent;
        };
        NodeChange.prototype.insertedIntoParent = function() {
            this.childList = true;
            this.added = true;
        };
        // An node's oldParent is
        //   -its present parent, if its parentNode was not changed.
        //   -null if the first thing that happened to it was an add.
        //   -the node it was removed from if the first thing that happened to it
        //      was a remove.
        NodeChange.prototype.getOldParent = function() {
            if (this.childList) {
                if (this.oldParentNode)
                    return this.oldParentNode;
                if (this.added)
                    return null;
            }
            return _native._getParent(this.node);
        };
        return NodeChange;
    })();
    var ChildListChange = (function() {
        function ChildListChange() {
            this.added = new NodeMap();
            this.removed = new NodeMap();
            this.maybeMoved = new NodeMap();
            this.oldPrevious = new NodeMap();
            this.moved = undefined;
        }
        return ChildListChange;
    })();
    var TreeChanges = (function(_super) {
        __extends(TreeChanges, _super);
        function TreeChanges(rootNode, mutations) {
            _super.call(this);
            this.rootNode = rootNode;
            this.reachableCache = undefined;
            this.wasReachableCache = undefined;
            this.anyParentsChanged = false;
            this.anyAttributesChanged = false;
            this.anyCharacterDataChanged = false;
            for (var m = 0; m < mutations.length; m++) {
                var mutation = mutations[m];
                switch (mutation.type) {
                    case 'childList':
                        this.anyParentsChanged = true;
                        for (var i = 0; i < mutation.removedNodes.length; i++) {
                            var node = mutation.removedNodes[i];
                            this.getChange(node).removedFromParent(mutation.target);
                        }
                        for (var i = 0; i < mutation.addedNodes.length; i++) {
                            var node = mutation.addedNodes[i];
                            this.getChange(node).insertedIntoParent();
                        }
                        break;
                    case 'attributes':
                        this.anyAttributesChanged = true;
                        var change = this.getChange(mutation.target);
                        change.attributeMutated(mutation.attributeName, mutation.oldValue);
                        break;
                    case 'characterData':
                        this.anyCharacterDataChanged = true;
                        var change = this.getChange(mutation.target);
                        change.characterDataMutated(mutation.oldValue);
                        break;
                }
            }
        }
        TreeChanges.prototype.getChange = function(node) {
            var change = this.get(node);
            if (!change) {
                change = new NodeChange(node);
                this.set(node, change);
            }
            return change;
        };
        TreeChanges.prototype.getOldParent = function(node) {
            var change = this.get(node);
            return change ? change.getOldParent() : _native._getParent(node);
        };
        TreeChanges.prototype.getIsReachable = function(node) {
            if (node === this.rootNode)
                return true;
            if (!node)
                return false;
            this.reachableCache = this.reachableCache || new NodeMap();
            var isReachable = this.reachableCache.get(node);
            if (isReachable === undefined) {
                isReachable = this.getIsReachable(_native._getParent(node));
                this.reachableCache.set(node, isReachable);
            }
            return isReachable;
        };
        // A node wasReachable if its oldParent wasReachable.
        TreeChanges.prototype.getWasReachable = function(node) {
            if (node === this.rootNode)
                return true;
            if (!node)
                return false;
            this.wasReachableCache = this.wasReachableCache || new NodeMap();
            var wasReachable = this.wasReachableCache.get(node);
            if (wasReachable === undefined) {
                wasReachable = this.getWasReachable(this.getOldParent(node));
                this.wasReachableCache.set(node, wasReachable);
            }
            return wasReachable;
        };
        TreeChanges.prototype.reachabilityChange = function(node) {
            if (this.getIsReachable(node)) {
                return this.getWasReachable(node) ?
                    Movement.STAYED_IN : Movement.ENTERED;
            }
            return this.getWasReachable(node) ?
                Movement.EXITED : Movement.STAYED_OUT;
        };
        return TreeChanges;
    })(NodeMap);
    var MutationProjection = (function() {
        // TOOD(any)
        function MutationProjection(rootNode, mutations, selectors, calcReordered, calcOldPreviousSibling) {
            this.rootNode = rootNode;
            this.mutations = mutations;
            this.selectors = selectors;
            this.calcReordered = calcReordered;
            this.calcOldPreviousSibling = calcOldPreviousSibling;
            this.treeChanges = new TreeChanges(rootNode, mutations);
            this.entered = [];
            this.exited = [];
            this.stayedIn = new NodeMap();
            this.visited = new NodeMap();
            this.childListChangeMap = undefined;
            this.characterDataOnly = undefined;
            this.matchCache = undefined;
            this.processMutations();
        }
        MutationProjection.prototype.processMutations = function() {
            if (!this.treeChanges.anyParentsChanged &&
                !this.treeChanges.anyAttributesChanged)
                return;
            var changedNodes = this.treeChanges.keys();
            for (var i = 0; i < changedNodes.length; i++) {
                this.visitNode(changedNodes[i], undefined);
            }
        };
        MutationProjection.prototype.visitNode = function(node, parentReachable) {
            if (this.visited.has(node))
                return;
            this.visited.set(node, true);
            var change = this.treeChanges.get(node);
            var reachable = parentReachable;
            // node inherits its parent's reachability change unless
            // its parentNode was mutated.
            if ((change && change.childList) || reachable == undefined)
                reachable = this.treeChanges.reachabilityChange(node);
            if (reachable === Movement.STAYED_OUT)
                return;
            // Cache match results for sub-patterns.
            this.matchabilityChange(node);
            if (reachable === Movement.ENTERED) {
                this.entered.push(node);
            } else if (reachable === Movement.EXITED) {
                this.exited.push(node);
                this.ensureHasOldPreviousSiblingIfNeeded(node);
            } else if (reachable === Movement.STAYED_IN) {
                var movement = Movement.STAYED_IN;
                if (change && change.childList) {
                    if (change.oldParentNode !== _native._getParent(node)) {
                        movement = Movement.REPARENTED;
                        this.ensureHasOldPreviousSiblingIfNeeded(node);
                    } else if (this.calcReordered && this.wasReordered(node)) {
                        movement = Movement.REORDERED;
                    }
                }
                this.stayedIn.set(node, movement);
            }
            if (reachable === Movement.STAYED_IN)
                return;
            // reachable === ENTERED || reachable === EXITED.
            for (var child = _native._getFirstChild(node); child; child = _native._getNextSibling(child)) {
                this.visitNode(child, reachable);
            }
        };
        MutationProjection.prototype.ensureHasOldPreviousSiblingIfNeeded = function(node) {
            if (!this.calcOldPreviousSibling)
                return;
            this.processChildlistChanges();
            var parentNode = _native._getParent(node);
            var nodeChange = this.treeChanges.get(node);
            if (nodeChange && nodeChange.oldParentNode)
                parentNode = nodeChange.oldParentNode;
            var change = this.childListChangeMap.get(parentNode);
            if (!change) {
                change = new ChildListChange();
                this.childListChangeMap.set(parentNode, change);
            }
            if (!change.oldPrevious.has(node)) {
                change.oldPrevious.set(node, node.previousSibling);
            }
        };
        MutationProjection.prototype.getChanged = function(summary, selectors, characterDataOnly) {
            this.selectors = selectors;
            this.characterDataOnly = characterDataOnly;
            for (var i = 0; i < this.entered.length; i++) {
                var node = this.entered[i];
                var matchable = this.matchabilityChange(node);
                if (matchable === Movement.ENTERED || matchable === Movement.STAYED_IN)
                    summary.added.push(node);
            }
            var stayedInNodes = this.stayedIn.keys();
            for (var i = 0; i < stayedInNodes.length; i++) {
                var node = stayedInNodes[i];
                var matchable = this.matchabilityChange(node);
                if (matchable === Movement.ENTERED) {
                    summary.added.push(node);
                } else if (matchable === Movement.EXITED) {
                    summary.removed.push(node);
                } else if (matchable === Movement.STAYED_IN && (summary.reparented || summary.reordered)) {
                    var movement = this.stayedIn.get(node);
                    if (summary.reparented && movement === Movement.REPARENTED)
                        summary.reparented.push(node);
                    else if (summary.reordered && movement === Movement.REORDERED)
                        summary.reordered.push(node);
                }
            }
            for (var i = 0; i < this.exited.length; i++) {
                var node = this.exited[i];
                var matchable = this.matchabilityChange(node);
                if (matchable === Movement.EXITED || matchable === Movement.STAYED_IN)
                    summary.removed.push(node);
            }
        };
        MutationProjection.prototype.getOldParentNode = function(node) {
            var change = this.treeChanges.get(node);
            if (change && change.childList)
                return change.oldParentNode ? change.oldParentNode : null;
            var reachabilityChange = this.treeChanges.reachabilityChange(node);
            if (reachabilityChange === Movement.STAYED_OUT || reachabilityChange === Movement.ENTERED)
                throw Error('getOldParentNode requested on invalid node.');
            return _native._getParent(node);
        };
        MutationProjection.prototype.getOldPreviousSibling = function(node) {
            var parentNode = _native._getParent(node);
            var nodeChange = this.treeChanges.get(node);
            if (nodeChange && nodeChange.oldParentNode)
                parentNode = nodeChange.oldParentNode;
            var change = this.childListChangeMap.get(parentNode);
            if (!change)
                throw Error('getOldPreviousSibling requested on invalid node.');
            return change.oldPrevious.get(node);
        };
        MutationProjection.prototype.getOldAttribute = function(element, attrName) {
            var change = this.treeChanges.get(element);
            if (!change || !change.attributes)
                throw Error('getOldAttribute requested on invalid node.');
            var value = change.getAttributeOldValue(attrName);
            if (value === undefined)
                throw Error('getOldAttribute requested for unchanged attribute name.');
            return value;
        };
        MutationProjection.prototype.attributeChangedNodes = function(includeAttributes) {
            if (!this.treeChanges.anyAttributesChanged)
                return {}; // No attributes mutations occurred.
            var attributeFilter;
            var caseInsensitiveFilter;
            if (includeAttributes) {
                attributeFilter = {};
                caseInsensitiveFilter = {};
                for (var i = 0; i < includeAttributes.length; i++) {
                    var attrName = includeAttributes[i];
                    attributeFilter[attrName] = true;
                    caseInsensitiveFilter[attrName.toLowerCase()] = attrName;
                }
            }
            var result = {};
            var nodes = this.treeChanges.keys();
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                var change = this.treeChanges.get(node);
                if (!change.attributes)
                    continue;
                if (Movement.STAYED_IN !== this.treeChanges.reachabilityChange(node) ||
                    Movement.STAYED_IN !== this.matchabilityChange(node)) {
                    continue;
                }
                var element = node;
                var changedAttrNames = change.getAttributeNamesMutated();
                for (var j = 0; j < changedAttrNames.length; j++) {
                    var attrName = changedAttrNames[j];
                    if (attributeFilter &&
                        !attributeFilter[attrName] &&
                        !(change.isCaseInsensitive && caseInsensitiveFilter[attrName])) {
                        continue;
                    }
                    var oldValue = change.getAttributeOldValue(attrName);
                    if (oldValue === element.getAttribute(attrName))
                        continue;
                    if (caseInsensitiveFilter && change.isCaseInsensitive)
                        attrName = caseInsensitiveFilter[attrName];
                    result[attrName] = result[attrName] || [];
                    result[attrName].push(element);
                }
            }
            return result;
        };
        MutationProjection.prototype.getOldCharacterData = function(node) {
            var change = this.treeChanges.get(node);
            if (!change || !change.characterData)
                throw Error('getOldCharacterData requested on invalid node.');
            return change.characterDataOldValue;
        };
        MutationProjection.prototype.getCharacterDataChanged = function() {
            if (!this.treeChanges.anyCharacterDataChanged)
                return []; // No characterData mutations occurred.
            var nodes = this.treeChanges.keys();
            var result = [];
            for (var i = 0; i < nodes.length; i++) {
                var target = nodes[i];
                if (Movement.STAYED_IN !== this.treeChanges.reachabilityChange(target))
                    continue;
                var change = this.treeChanges.get(target);
                if (!change.characterData ||
                    target.textContent == change.characterDataOldValue)
                    continue;
                result.push(target);
            }
            return result;
        };
        MutationProjection.prototype.computeMatchabilityChange = function(selector, el) {
            if (!this.matchCache)
                this.matchCache = [];
            if (!this.matchCache[selector.uid])
                this.matchCache[selector.uid] = new NodeMap();
            var cache = this.matchCache[selector.uid];
            var result = cache.get(el);
            if (result === undefined) {
                result = selector.matchabilityChange(el, this.treeChanges.get(el));
                cache.set(el, result);
            }
            return result;
        };
        MutationProjection.prototype.matchabilityChange = function(node) {
            var _this = this;
            // TODO(rafaelw): Include PI, CDATA?
            // Only include text nodes.
            if (this.characterDataOnly) {
                switch (node.nodeType) {
                    case 8: //Node.COMMENT_NODE:
                    case 3: //Node.TEXT_NODE:
                        return Movement.STAYED_IN;
                    default:
                        return Movement.STAYED_OUT;
                }
            }
            // No element filter. Include all nodes.
            if (!this.selectors)
                return Movement.STAYED_IN;
            // Element filter. Exclude non-elements.
            if (node.nodeType !== 1 /*Node.ELEMENT_NODE*/)
                return Movement.STAYED_OUT;
            var el = node;
            var matchChanges = this.selectors.map(function(selector) {
                return _this.computeMatchabilityChange(selector, el);
            });
            var accum = Movement.STAYED_OUT;
            var i = 0;
            while (accum !== Movement.STAYED_IN && i < matchChanges.length) {
                switch (matchChanges[i]) {
                    case Movement.STAYED_IN:
                        accum = Movement.STAYED_IN;
                        break;
                    case Movement.ENTERED:
                        if (accum === Movement.EXITED)
                            accum = Movement.STAYED_IN;
                        else
                            accum = Movement.ENTERED;
                        break;
                    case Movement.EXITED:
                        if (accum === Movement.ENTERED)
                            accum = Movement.STAYED_IN;
                        else
                            accum = Movement.EXITED;
                        break;
                }
                i++;
            }
            return accum;
        };
        MutationProjection.prototype.getChildlistChange = function(el) {
            var change = this.childListChangeMap.get(el);
            if (!change) {
                change = new ChildListChange();
                this.childListChangeMap.set(el, change);
            }
            return change;
        };
        MutationProjection.prototype.processChildlistChanges = function() {
            if (this.childListChangeMap)
                return;
            this.childListChangeMap = new NodeMap();
            for (var i = 0; i < this.mutations.length; i++) {
                var mutation = this.mutations[i];
                if (mutation.type != 'childList')
                    continue;
                if (this.treeChanges.reachabilityChange(mutation.target) !== Movement.STAYED_IN &&
                    !this.calcOldPreviousSibling)
                    continue;
                var change = this.getChildlistChange(mutation.target);
                var oldPrevious = mutation.previousSibling;
                function recordOldPrevious(node, previous) {
                    if (!node ||
                        change.oldPrevious.has(node) ||
                        change.added.has(node) ||
                        change.maybeMoved.has(node))
                        return;
                    if (previous &&
                        (change.added.has(previous) ||
                            change.maybeMoved.has(previous)))
                        return;
                    change.oldPrevious.set(node, previous);
                }
                for (var j = 0; j < mutation.removedNodes.length; j++) {
                    var node = mutation.removedNodes[j];
                    recordOldPrevious(node, oldPrevious);
                    if (change.added.has(node)) {
                        change.added.deleteNode(node);
                    } else {
                        change.removed.set(node, true);
                        change.maybeMoved.deleteNode(node);
                    }
                    oldPrevious = node;
                }
                recordOldPrevious(mutation.nextSibling, oldPrevious);
                for (var j = 0; j < mutation.addedNodes.length; j++) {
                    var node = mutation.addedNodes[j];
                    if (change.removed.has(node)) {
                        change.removed.deleteNode(node);
                        change.maybeMoved.set(node, true);
                    } else {
                        change.added.set(node, true);
                    }
                }
            }
        };
        MutationProjection.prototype.wasReordered = function(node) {
            if (!this.treeChanges.anyParentsChanged)
                return false;
            this.processChildlistChanges();
            var parentNode = _native._getParent(node);
            var nodeChange = this.treeChanges.get(node);
            if (nodeChange && nodeChange.oldParentNode)
                parentNode = nodeChange.oldParentNode;
            var change = this.childListChangeMap.get(parentNode);
            if (!change)
                return false;
            if (change.moved)
                return change.moved.get(node);
            change.moved = new NodeMap();
            var pendingMoveDecision = new NodeMap();
            function isMoved(node) {
                if (!node)
                    return false;
                if (!change.maybeMoved.has(node))
                    return false;
                var didMove = change.moved.get(node);
                if (didMove !== undefined)
                    return didMove;
                if (pendingMoveDecision.has(node)) {
                    didMove = true;
                } else {
                    pendingMoveDecision.set(node, true);
                    didMove = getPrevious(node) !== getOldPrevious(node);
                }
                if (pendingMoveDecision.has(node)) {
                    pendingMoveDecision.deleteNode(node);
                    change.moved.set(node, didMove);
                } else {
                    didMove = change.moved.get(node);
                }
                return didMove;
            }
            var oldPreviousCache = new NodeMap();
            function getOldPrevious(node) {
                var oldPrevious = oldPreviousCache.get(node);
                if (oldPrevious !== undefined)
                    return oldPrevious;
                oldPrevious = change.oldPrevious.get(node);
                while (oldPrevious &&
                    (change.removed.has(oldPrevious) || isMoved(oldPrevious))) {
                    oldPrevious = getOldPrevious(oldPrevious);
                }
                if (oldPrevious === undefined)
                    oldPrevious = node.previousSibling;
                oldPreviousCache.set(node, oldPrevious);
                return oldPrevious;
            }
            var previousCache = new NodeMap();
            function getPrevious(node) {
                if (previousCache.has(node))
                    return previousCache.get(node);
                var previous = node.previousSibling;
                while (previous && (change.added.has(previous) || isMoved(previous)))
                    previous = previous.previousSibling;
                previousCache.set(node, previous);
                return previous;
            }
            change.maybeMoved.keys().forEach(isMoved);
            return change.moved.get(node);
        };
        return MutationProjection;
    })();
    var Summary = (function() {
        function Summary(projection, query) {
            var _this = this;
            this.projection = projection;
            this.added = [];
            this.removed = [];
            this.reparented = query.all || query.element || query.characterData ? [] : undefined;
            this.reordered = query.all ? [] : undefined;
            projection.getChanged(this, query.elementFilter, query.characterData);
            if (query.all || query.attribute || query.attributeList) {
                var filter = query.attribute ? [query.attribute] : query.attributeList;
                var attributeChanged = projection.attributeChangedNodes(filter);
                if (query.attribute) {
                    this.valueChanged = attributeChanged[query.attribute] || [];
                } else {
                    this.attributeChanged = attributeChanged;
                    if (query.attributeList) {
                        query.attributeList.forEach(function(attrName) {
                            if (!_this.attributeChanged.hasOwnProperty(attrName))
                                _this.attributeChanged[attrName] = [];
                        });
                    }
                }
            }
            if (query.all || query.characterData) {
                var characterDataChanged = projection.getCharacterDataChanged();
                if (query.characterData)
                    this.valueChanged = characterDataChanged;
                else
                    this.characterDataChanged = characterDataChanged;
            }
            if (this.reordered)
                this.getOldPreviousSibling = projection.getOldPreviousSibling.bind(projection);
        }
        Summary.prototype.getOldParentNode = function(node) {
            return this.projection.getOldParentNode(node);
        };
        Summary.prototype.getOldAttribute = function(node, name) {
            return this.projection.getOldAttribute(node, name);
        };
        Summary.prototype.getOldCharacterData = function(node) {
            return this.projection.getOldCharacterData(node);
        };
        Summary.prototype.getOldPreviousSibling = function(node) {
            return this.projection.getOldPreviousSibling(node);
        };
        return Summary;
    })();
    // TODO(rafaelw): Allow ':' and '.' as valid name characters.
    var validNameInitialChar = /[a-zA-Z_]+/;
    var validNameNonInitialChar = /[a-zA-Z0-9_\-]+/;
    // TODO(rafaelw): Consider allowing backslash in the attrValue.
    // TODO(rafaelw): There's got a to be way to represent this state machine
    // more compactly???
    function escapeQuotes(value) {
        return '"' + value.replace(/"/, '\\\"') + '"';
    }
    var Qualifier = (function() {
        function Qualifier() { }
        Qualifier.prototype.matches = function(oldValue) {
            if (oldValue === null)
                return false;
            if (this.attrValue === undefined)
                return true;
            if (!this.contains)
                return this.attrValue == oldValue;
            var tokens = oldValue.split(' ');
            for (var i = 0; i < tokens.length; i++) {
                if (this.attrValue === tokens[i])
                    return true;
            }
            return false;
        };
        Qualifier.prototype.toString = function() {
            if (this.attrName === 'class' && this.contains)
                return '.' + this.attrValue;
            if (this.attrName === 'id' && !this.contains)
                return '#' + this.attrValue;
            if (this.contains)
                return '[' + this.attrName + '~=' + escapeQuotes(this.attrValue) + ']';
            if ('attrValue' in this)
                return '[' + this.attrName + '=' + escapeQuotes(this.attrValue) + ']';
            return '[' + this.attrName + ']';
        };
        return Qualifier;
    })();
    var Selector = (function() {
        function Selector() {
            this.uid = Selector.nextUid++;
            this.qualifiers = [];
        }
        try {
            Object.defineProperty(Selector.prototype, 'caseInsensitiveTagName', {
                get: function() {
                    return this.tagName.toUpperCase();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Selector.prototype, 'selectorString', {
                get: function() {
                    return this.tagName + this.qualifiers.join('');
                },
                enumerable: true,
                configurable: true
            });
        } catch (e) { };
        Selector.prototype.isMatching = function(el) {
            return el[Selector.matchesSelector](this.selectorString);
        };
        Selector.prototype.wasMatching = function(el, change, isMatching) {
            if (!change || !change.attributes)
                return isMatching;
            var tagName = change.isCaseInsensitive ? this.caseInsensitiveTagName : this.tagName;
            if (tagName !== '*' && tagName !== el.tagName)
                return false;
            var attributeOldValues = [];
            var anyChanged = false;
            for (var i = 0; i < this.qualifiers.length; i++) {
                var qualifier = this.qualifiers[i];
                var oldValue = change.getAttributeOldValue(qualifier.attrName);
                attributeOldValues.push(oldValue);
                anyChanged = anyChanged || (oldValue !== undefined);
            }
            if (!anyChanged)
                return isMatching;
            for (var i = 0; i < this.qualifiers.length; i++) {
                var qualifier = this.qualifiers[i];
                var oldValue = attributeOldValues[i];
                if (oldValue === undefined)
                    oldValue = el.getAttribute(qualifier.attrName);
                if (!qualifier.matches(oldValue))
                    return false;
            }
            return true;
        };
        Selector.prototype.matchabilityChange = function(el, change) {
            var isMatching = this.isMatching(el);
            if (isMatching)
                return this.wasMatching(el, change, isMatching) ? Movement.STAYED_IN : Movement.ENTERED;
            else
                return this.wasMatching(el, change, isMatching) ? Movement.EXITED : Movement.STAYED_OUT;
        };
        Selector.parseSelectors = function(input) {
            var selectors = [];
            var currentSelector;
            var currentQualifier;
            function newSelector() {
                if (currentSelector) {
                    if (currentQualifier) {
                        currentSelector.qualifiers.push(currentQualifier);
                        currentQualifier = undefined;
                    }
                    selectors.push(currentSelector);
                }
                currentSelector = new Selector();
            }
            function newQualifier() {
                if (currentQualifier)
                    currentSelector.qualifiers.push(currentQualifier);
                currentQualifier = new Qualifier();
            }
            var WHITESPACE = /\s/;
            var valueQuoteChar;
            var SYNTAX_ERROR = 'Invalid or unsupported selector syntax.';
            var SELECTOR = 1;
            var TAG_NAME = 2;
            var QUALIFIER = 3;
            var QUALIFIER_NAME_FIRST_CHAR = 4;
            var QUALIFIER_NAME = 5;
            var ATTR_NAME_FIRST_CHAR = 6;
            var ATTR_NAME = 7;
            var EQUIV_OR_ATTR_QUAL_END = 8;
            var EQUAL = 9;
            var ATTR_QUAL_END = 10;
            var VALUE_FIRST_CHAR = 11;
            var VALUE = 12;
            var QUOTED_VALUE = 13;
            var SELECTOR_SEPARATOR = 14;
            var state = SELECTOR;
            var i = 0;
            while (i < input.length) {
                var c = input[i++];
                switch (state) {
                    case SELECTOR:
                        if (c.match(validNameInitialChar)) {
                            newSelector();
                            currentSelector.tagName = c;
                            state = TAG_NAME;
                            break;
                        }
                        if (c == '*') {
                            newSelector();
                            currentSelector.tagName = '*';
                            state = QUALIFIER;
                            break;
                        }
                        if (c == '.') {
                            newSelector();
                            newQualifier();
                            currentSelector.tagName = '*';
                            currentQualifier.attrName = 'class';
                            currentQualifier.contains = true;
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '#') {
                            newSelector();
                            newQualifier();
                            currentSelector.tagName = '*';
                            currentQualifier.attrName = 'id';
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '[') {
                            newSelector();
                            newQualifier();
                            currentSelector.tagName = '*';
                            currentQualifier.attrName = '';
                            state = ATTR_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c.match(WHITESPACE))
                            break;
                        throw Error(SYNTAX_ERROR);
                    case TAG_NAME:
                        if (c.match(validNameNonInitialChar)) {
                            currentSelector.tagName += c;
                            break;
                        }
                        if (c == '.') {
                            newQualifier();
                            currentQualifier.attrName = 'class';
                            currentQualifier.contains = true;
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '#') {
                            newQualifier();
                            currentQualifier.attrName = 'id';
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '[') {
                            newQualifier();
                            currentQualifier.attrName = '';
                            state = ATTR_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c.match(WHITESPACE)) {
                            state = SELECTOR_SEPARATOR;
                            break;
                        }
                        if (c == ',') {
                            state = SELECTOR;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case QUALIFIER:
                        if (c == '.') {
                            newQualifier();
                            currentQualifier.attrName = 'class';
                            currentQualifier.contains = true;
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '#') {
                            newQualifier();
                            currentQualifier.attrName = 'id';
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '[') {
                            newQualifier();
                            currentQualifier.attrName = '';
                            state = ATTR_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c.match(WHITESPACE)) {
                            state = SELECTOR_SEPARATOR;
                            break;
                        }
                        if (c == ',') {
                            state = SELECTOR;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case QUALIFIER_NAME_FIRST_CHAR:
                        if (c.match(validNameInitialChar)) {
                            currentQualifier.attrValue = c;
                            state = QUALIFIER_NAME;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case QUALIFIER_NAME:
                        if (c.match(validNameNonInitialChar)) {
                            currentQualifier.attrValue += c;
                            break;
                        }
                        if (c == '.') {
                            newQualifier();
                            currentQualifier.attrName = 'class';
                            currentQualifier.contains = true;
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '#') {
                            newQualifier();
                            currentQualifier.attrName = 'id';
                            state = QUALIFIER_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c == '[') {
                            newQualifier();
                            state = ATTR_NAME_FIRST_CHAR;
                            break;
                        }
                        if (c.match(WHITESPACE)) {
                            state = SELECTOR_SEPARATOR;
                            break;
                        }
                        if (c == ',') {
                            state = SELECTOR;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case ATTR_NAME_FIRST_CHAR:
                        if (c.match(validNameInitialChar)) {
                            currentQualifier.attrName = c;
                            state = ATTR_NAME;
                            break;
                        }
                        if (c.match(WHITESPACE))
                            break;
                        throw Error(SYNTAX_ERROR);
                    case ATTR_NAME:
                        if (c.match(validNameNonInitialChar)) {
                            currentQualifier.attrName += c;
                            break;
                        }
                        if (c.match(WHITESPACE)) {
                            state = EQUIV_OR_ATTR_QUAL_END;
                            break;
                        }
                        if (c == '~') {
                            currentQualifier.contains = true;
                            state = EQUAL;
                            break;
                        }
                        if (c == '=') {
                            currentQualifier.attrValue = '';
                            state = VALUE_FIRST_CHAR;
                            break;
                        }
                        if (c == ']') {
                            state = QUALIFIER;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case EQUIV_OR_ATTR_QUAL_END:
                        if (c == '~') {
                            currentQualifier.contains = true;
                            state = EQUAL;
                            break;
                        }
                        if (c == '=') {
                            currentQualifier.attrValue = '';
                            state = VALUE_FIRST_CHAR;
                            break;
                        }
                        if (c == ']') {
                            state = QUALIFIER;
                            break;
                        }
                        if (c.match(WHITESPACE))
                            break;
                        throw Error(SYNTAX_ERROR);
                    case EQUAL:
                        if (c == '=') {
                            currentQualifier.attrValue = '';
                            state = VALUE_FIRST_CHAR;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                    case ATTR_QUAL_END:
                        if (c == ']') {
                            state = QUALIFIER;
                            break;
                        }
                        if (c.match(WHITESPACE))
                            break;
                        throw Error(SYNTAX_ERROR);
                    case VALUE_FIRST_CHAR:
                        if (c.match(WHITESPACE))
                            break;
                        if (c == '"' || c == "'") {
                            valueQuoteChar = c;
                            state = QUOTED_VALUE;
                            break;
                        }
                        currentQualifier.attrValue += c;
                        state = VALUE;
                        break;
                    case VALUE:
                        if (c.match(WHITESPACE)) {
                            state = ATTR_QUAL_END;
                            break;
                        }
                        if (c == ']') {
                            state = QUALIFIER;
                            break;
                        }
                        if (c == "'" || c == '"')
                            throw Error(SYNTAX_ERROR);
                        currentQualifier.attrValue += c;
                        break;
                    case QUOTED_VALUE:
                        if (c == valueQuoteChar) {
                            state = ATTR_QUAL_END;
                            break;
                        }
                        currentQualifier.attrValue += c;
                        break;
                    case SELECTOR_SEPARATOR:
                        if (c.match(WHITESPACE))
                            break;
                        if (c == ',') {
                            state = SELECTOR;
                            break;
                        }
                        throw Error(SYNTAX_ERROR);
                }
            }
            switch (state) {
                case SELECTOR:
                case TAG_NAME:
                case QUALIFIER:
                case QUALIFIER_NAME:
                case SELECTOR_SEPARATOR:
                    // Valid end states.
                    newSelector();
                    break;
                default:
                    throw Error(SYNTAX_ERROR);
            }
            if (!selectors.length)
                throw Error(SYNTAX_ERROR);
            return selectors;
        };
        Selector.nextUid = 1;
        Selector.matchesSelector = (function() {
            var element = _document.createElement('div');
            if (typeof element['webkitMatchesSelector'] === 'function')
                return 'webkitMatchesSelector';
            if (typeof element['mozMatchesSelector'] === 'function')
                return 'mozMatchesSelector';
            if (typeof element['msMatchesSelector'] === 'function')
                return 'msMatchesSelector';
            return 'matchesSelector';
        })();
        return Selector;
    })();
    var attributeFilterPattern = /^([a-zA-Z:_]+[a-zA-Z0-9_\-:\.]*)$/;
    function validateAttribute(attribute) {
        if (typeof attribute != 'string')
            throw Error('Invalid request opion. attribute must be a non-zero length string.');
        attribute = attribute.trim();
        if (!attribute)
            throw Error('Invalid request opion. attribute must be a non-zero length string.');
        if (!attribute.match(attributeFilterPattern))
            throw Error('Invalid request option. invalid attribute name: ' + attribute);
        return attribute;
    }
    function validateElementAttributes(attribs) {
        if (!attribs.trim().length)
            throw Error('Invalid request option: elementAttributes must contain at least one attribute.');
        var lowerAttributes = {};
        var attributes = {};
        var tokens = attribs.split(/\s+/);
        for (var i = 0; i < tokens.length; i++) {
            var name = tokens[i];
            if (!name)
                continue;
            var name = validateAttribute(name);
            var nameLower = name.toLowerCase();
            if (lowerAttributes[nameLower])
                throw Error('Invalid request option: observing multiple case variations of the same attribute is not supported.');
            attributes[name] = true;
            lowerAttributes[nameLower] = true;
        }
        return Object.keys(attributes);
    }
    function elementFilterAttributes(selectors) {
        var attributes = {};
        selectors.forEach(function(selector) {
            selector.qualifiers.forEach(function(qualifier) {
                attributes[qualifier.attrName] = true;
            });
        });
        return Object.keys(attributes);
    }
    var MutationSummary = (function() {
        function MutationSummary(opts) {
            var _this = this;
            this.connected = false;
            this.options = MutationSummary.validateOptions(opts);
            this.observerOptions = MutationSummary.createObserverOptions(this.options.queries);
            this.root = this.options.rootNode;
            this.callback = this.options.callback;
            this.elementFilter = Array.prototype.concat.apply([], this.options.queries.map(function(query) {
                return query.elementFilter ? query.elementFilter : [];
            }));
            if (!this.elementFilter.length)
                this.elementFilter = undefined;
            this.calcReordered = this.options.queries.some(function(query) {
                return query.all;
            });
            this.queryValidators = []; // TODO(rafaelw): Shouldn't always define this.
            if (MutationSummary.createQueryValidator) {
                this.queryValidators = this.options.queries.map(function(query) {
                    return MutationSummary.createQueryValidator(_this.root, query);
                });
            }
            this.observer = MutationObserverCtor
                ? new MutationObserverCtor(function(mutations) {
                    _this.observerCallback(mutations);
                })
                : { observe: function() {}};
            this.reconnect();
        }
        MutationSummary.createObserverOptions = function(queries) {
            var observerOptions = {
                childList: true,
                subtree: true
            };
            var attributeFilter;
            function observeAttributes(attributes) {
                if (observerOptions.attributes && !attributeFilter)
                    return; // already observing all.
                observerOptions.attributes = true;
                observerOptions.attributeOldValue = true;
                if (!attributes) {
                    // observe all.
                    attributeFilter = undefined;
                    return;
                }
                // add to observed.
                attributeFilter = attributeFilter || {};
                attributes.forEach(function(attribute) {
                    attributeFilter[attribute] = true;
                    attributeFilter[attribute.toLowerCase()] = true;
                });
            }
            queries.forEach(function(query) {
                if (query.characterData) {
                    observerOptions.characterData = true;
                    observerOptions.characterDataOldValue = true;
                    return;
                }
                if (query.all) {
                    observeAttributes();
                    observerOptions.characterData = true;
                    observerOptions.characterDataOldValue = true;
                    return;
                }
                if (query.attribute) {
                    observeAttributes([query.attribute.trim()]);
                    return;
                }
                var attributes = elementFilterAttributes(query.elementFilter).concat(query.attributeList || []);
                if (attributes.length)
                    observeAttributes(attributes);
            });
            if (attributeFilter)
                observerOptions.attributeFilter = Object.keys(attributeFilter);
            return observerOptions;
        };
        MutationSummary.validateOptions = function(options) {
            for (var prop in options) {
                if (!(prop in MutationSummary.optionKeys))
                    throw Error('Invalid option: ' + prop);
            }
            if (typeof options.callback !== 'function')
                throw Error('Invalid options: callback is required and must be a function');
            if (!options.queries || !options.queries.length)
                throw Error('Invalid options: queries must contain at least one query request object.');
            var opts = {
                callback: options.callback,
                rootNode: options.rootNode || _document,
                observeOwnChanges: !!options.observeOwnChanges,
                oldPreviousSibling: !!options.oldPreviousSibling,
                queries: []
            };
            for (var i = 0; i < options.queries.length; i++) {
                var request = options.queries[i];
                // all
                if (request.all) {
                    if (Object.keys(request).length > 1)
                        throw Error('Invalid request option. all has no options.');
                    opts.queries.push({ all: true });
                    continue;
                }
                // attribute
                if ('attribute' in request) {
                    var query = {
                        attribute: validateAttribute(request.attribute)
                    };
                    query.elementFilter = Selector.parseSelectors('*[' + query.attribute + ']');
                    if (Object.keys(request).length > 1)
                        throw Error('Invalid request option. attribute has no options.');
                    opts.queries.push(query);
                    continue;
                }
                // element
                if ('element' in request) {
                    var requestOptionCount = Object.keys(request).length;
                    var query = {
                        element: request.element,
                        elementFilter: Selector.parseSelectors(request.element)
                    };
                    if (request.hasOwnProperty('elementAttributes')) {
                        query.attributeList = validateElementAttributes(request.elementAttributes);
                        requestOptionCount--;
                    }
                    if (requestOptionCount > 1)
                        throw Error('Invalid request option. element only allows elementAttributes option.');
                    opts.queries.push(query);
                    continue;
                }
                // characterData
                if (request.characterData) {
                    if (Object.keys(request).length > 1)
                        throw Error('Invalid request option. characterData has no options.');
                    opts.queries.push({ characterData: true });
                    continue;
                }
                throw Error('Invalid request option. Unknown query request.');
            }
            return opts;
        };
        MutationSummary.prototype.createSummaries = function(mutations) {
            if (!mutations || !mutations.length)
                return [];
            var projection = new MutationProjection(this.root, mutations, this.elementFilter, this.calcReordered, this.options.oldPreviousSibling);
            var summaries = [];
            for (var i = 0; i < this.options.queries.length; i++) {
                summaries.push(new Summary(projection, this.options.queries[i]));
            }
            return summaries;
        };
        MutationSummary.prototype.checkpointQueryValidators = function() {
            this.queryValidators.forEach(function(validator) {
                if (validator)
                    validator.recordPreviousState();
            });
        };
        MutationSummary.prototype.runQueryValidators = function(summaries) {
            this.queryValidators.forEach(function(validator, index) {
                if (validator)
                    validator.validate(summaries[index]);
            });
        };
        MutationSummary.prototype.changesToReport = function(summaries) {
            return summaries.some(function(summary) {
                var summaryProps = ['added', 'removed', 'reordered', 'reparented',
                    'valueChanged', 'characterDataChanged'];
                if (summaryProps.some(function(prop) { return summary[prop] && summary[prop].length; }))
                    return true;
                if (summary.attributeChanged) {
                    var attrNames = Object.keys(summary.attributeChanged);
                    var attrsChanged = attrNames.some(function(attrName) {
                        return !!summary.attributeChanged[attrName].length;
                    });
                    if (attrsChanged)
                        return true;
                }
                return false;
            });
        };
        MutationSummary.prototype.observerCallback = function(mutations) {
            if (!this.options.observeOwnChanges)
                this.observer.disconnect();
            var summaries = this.createSummaries(mutations);
            this.runQueryValidators(summaries);
            if (this.options.observeOwnChanges)
                this.checkpointQueryValidators();
            if (this.changesToReport(summaries))
                this.callback(summaries);
            // disconnect() may have been called during the callback.
            if (!this.options.observeOwnChanges && this.connected) {
                this.checkpointQueryValidators();
                this.observer.observe(this.root, this.observerOptions);
            }
        };
        MutationSummary.prototype.reconnect = function() {
            if (this.connected)
                throw Error('Already connected');
            this.observer.observe(this.root, this.observerOptions);
            this.connected = true;
            this.checkpointQueryValidators();
        };
        MutationSummary.prototype.takeSummaries = function() {
            if (!this.connected)
                throw Error('Not connected');
            var summaries = this.createSummaries(this.observer.takeRecords());
            return this.changesToReport(summaries) ? summaries : undefined;
        };
        MutationSummary.prototype.disconnect = function() {
            var summaries = this.takeSummaries();
            this.observer.disconnect();
            this.connected = false;
            return summaries;
        };
        MutationSummary.NodeMap = NodeMap; // exposed for use in TreeMirror.
        MutationSummary.parseElementFilter = Selector.parseSelectors; // exposed for testing.
        MutationSummary.optionKeys = {
            'callback': true,
            'queries': true,
            'rootNode': true,
            'oldPreviousSibling': true,
            'observeOwnChanges': true
        };
        return MutationSummary;
    })();
    var TreeMirrorClient = (function() {
        function TreeMirrorClient(target, mirror, testingQueries) {
            var _this = this;
            this.target = target;
            this.mirror = mirror;
            this.nextId = 1;
            this.knownNodes = new MutationSummary.NodeMap();
            this.mutationSummaries = [];

            _rebuildNodeLists();

            var serializedRoot = this.serializeNode(target, true);
            var rootId = serializedRoot.id;
            this.mirror.initialize(rootId, [serializedRoot]);
            var queries = [{ all: true }];
            if (testingQueries)
                queries = queries.concat(testingQueries);
            this.mutationSummaries.push(new MutationSummary({
                rootNode: target,
                callback: function(summaries) {
                    _this.applyChanged(summaries);
                },
                queries: queries
            }));
        }
        TreeMirrorClient.prototype.addShadowRoot = function(shadow) {
            if (!this.isKnownNode(shadow)) {
                var data = this.serializeNode(shadow, true);
                if (data) {
                    data.parentNode = this.serializeNode(shadow.host);

                    this.mirror.applyChanged({
                        removed: [],
                        addedOrMoved: [data],
                        attributes: [],
                        text: []
                    });
                }
            }

            var _this = this;
            this.mutationSummaries.push(new MutationSummary({
                rootNode: shadow,
                callback: function(summaries) {
                    _this.applyChanged(summaries);
                },
                queries: [{ all: true }]
            }));
        };
        TreeMirrorClient.prototype.disconnect = function() {
            this.mutationSummaries.forEach(function(mutationSummary) {
                mutationSummary.disconnect();
            });
            this.mutationSummaries = [];
        };
        TreeMirrorClient.prototype.rememberNode = function(node) {
            var id = this.nextId++;
            this.knownNodes.set(node, id);
            return id;
        };
        TreeMirrorClient.prototype.forgetNode = function(node) {
            this.knownNodes.deleteNode(node);
        };
        TreeMirrorClient.prototype.isKnownNode = function(node) {
            return !!this.knownNodes.get(node);
        };
        TreeMirrorClient.prototype.serializeNode = function(node, isInitial) {
            if (node === null)
                return null;

            if (_getNodeProperty(node, _nodePropertiesBlacklistKey))
                return null;

            var id = this.knownNodes.get(node);
            if (id !== undefined) {
                if (isInitial)
                    return _log('Found duplicated node during initial DOM: ' + id, _getPageViewTime());

                return { id: id };
            }

            var data = {
                nodeType: node.nodeType,
                id: this.rememberNode(node)
            };

            var parent = _native._getParent(node);

            if (_helper._parentHasAttribute(node, 'data-mf-replace') || _helper._parentHasAttribute(node, 'data-mf-replace-inner'))
                return null;

            var _isNodeBlackListed = _isElementOnBlacklist(node),
                _isParentNodeBlackListed = !!_getNodeProperty(parent, _nodePropertiesBlacklistKey);
            if (_isNodeBlackListed || _isParentNodeBlackListed) {
                _log('CSS Blacklist blocked node. NodeType: ' + node.nodeType + '. ' + (node.nodeType === 1 ? 'Tag: ' + node.tagName : ''), _getPageViewTime());
                _setNodeProperty(node, _nodePropertiesBlacklistKey, true);
                if (isInitial && node.childNodes.length) {
                    var _child;
                    for (_child = _native._getFirstChild(node); _child; _child = _native._getNextSibling(_child))
                        this.serializeNode(_child, true);
                }
                if (_isParentNodeBlackListed)
                    return null;
            }

            switch (data.nodeType) {
                case 9: //Node.DOCUMENT_NODE:
                    this.serializeAdoptedStyleSheets(node, data);
                    if (isInitial)
                        this.serializeChildNodes(node, data);
                    break;
                case 11: //Node.DOCUMENT_FRAGMENT_NODE:
                    data.isShadowRoot = _native._isShadowRoot(node);
                    this.serializeAdoptedStyleSheets(node, data);
                    if (isInitial)
                        this.serializeChildNodes(node, data);
                    break;
                case 10: //Node.DOCUMENT_TYPE_NODE:
                    data.name = node.name;
                    data.publicId = node.publicId;
                    data.systemId = node.systemId;
                    break;
                case 8: //Node.COMMENT_NODE:
                case 3: //Node.TEXT_NODE:
                    // Remove comments
                    if (node.nodeType === 8 && node.textContent.indexOf('[if') !== 0 && node.textContent.indexOf('<![endif]') !== 0)
                        break;

                    data.textContent = _getMaskedTextContent(node);
                    if (_whitespaceRegex.test(data.textContent) && !_elementHasPre(parent))
                        data.textContent = data.textContent.replace(_whitespaceRegex, ' ');

                    // Support dynamic CSS style sheets that use "insertRule" for style tags that has white space text content
                    if (parent && parent.tagName === 'STYLE' && /^\s*$/.test(node.textContent)) {
                        data.textContent = _getCssRules(parent.sheet);
                    }
                    break;
                case 1: //Node.ELEMENT_NODE:
                    if (node.tagName === 'IFRAME' && parent && parent.tagName === 'HEAD') {
                        data.nodeType = 8;
                        data.textContent = '';
                        break;
                    }

                    data.tagName = node.tagName;

                    if (node.attributes['data-mf-replace']) {
                        var _htmlString = node.attributes['data-mf-replace'].value;
                        data = _mapHtmlString.call(this, _htmlString, function(_node) {
                            var _data = this.serializeNode(_node, true);
                            _data.id = data.id;
                            this.knownNodes.set(_node, _data.id);
                            return _data;
                        })[0];
                        break;
                    }

                    // Remove <script> tags
                    if (node.tagName === 'SCRIPT') {
                        if (/\/?aura_prod\.js(\?.+)?$/.test(node.src)) {
                            _log('Salesforce Aura script added');
                            _resetAttachShadow();
                            _waitForAttachShadowProxy();
                        }
                        break;
                    }

                    data.attributes = {};

                    if (_isNodeBlackListed) {
                        var _nodeRect = _getBoundingRect(node);
                        if (node.id)
                            data.attributes.id = node.id;
                        if (node.name)
                            data.attributes.name = node.name;
                        data.attributes.style = (node.style ? node.style.cssText + '; ' : '') +
                            'width: ' + _nodeRect.width + 'px; height: ' + _nodeRect.height + 'px;' +
                            (_window.getComputedStyle(node).display === 'inline' ? ' display: inline-block;' : '');
                        data.attributes.class = node.className + ' mf-excluded';
                        break;
                    }

                    for (var i = 0; i < node.attributes.length; i++) {
                        var attr = node.attributes[i];
                        if (_isIgnoredAttribute(attr.name.toLowerCase())) continue;
                        if (attr.name.toLowerCase() === 'value' && node.tagName === 'INPUT')
                            data.attributes.value = _getMaskedElementValue(node);
                        else
                            data.attributes[attr.name] = attr.value;
                    }

                    if (node === _mainScrollElement)
                        data.attributes.class = (data.attributes.class || '') + ' mf-scroll-main';

                    if (_trackedNodes.indexOf(node) !== -1)
                        data.attributes.class = (data.attributes.class || '') + ' mf-listen';

                    // Remove tracking iframes
                    if (node.tagName === 'IFRAME' && node.offsetWidth <= 1 && node.offsetHeight <= 1)
                        data.attributes.src = '';

                    if (isInitial && node.tagName === 'INPUT') {
                        if (!data.attributes.value && node.value)
                            data.attributes.value = _getMaskedElementValue(node);

                        if (!data.attributes.checked && node.checked)
                            data.attributes.checked = node.checked;
                    }

                    if (isInitial && node.tagName === 'OPTION' && !data.attributes.selected && node.selected)
                        data.attributes.selected = node.selected;

                    // Remove hidden field values
                    if (node.tagName === 'INPUT' && node.type === 'hidden' && data.attributes.value)
                        data.attributes.value = '';

                    if (node.attributes['data-mf-replace-inner']) {
                        var _htmlString = node.attributes['data-mf-replace-inner'].value;
                        data.childNodes = _mapHtmlString.call(this, _htmlString, function(_node) {
                            return this.serializeNode(_node, true);
                        });
                        break;
                    }

                    if (isInitial) {
                        this.serializeChildNodes(node, data);

                        if (node.shadowRoot) {
                            if (!data.childNodes)
                                data.childNodes = [];
                            var shadowRootData = this.serializeNode(node.shadowRoot, true);
                            if (shadowRootData)
                                data.childNodes.push(shadowRootData);
                        }

                        var cssDomain = node.tagName === 'LINK' ? node.href.split('/')[2] : '-1';
                        var cssGetAllowed = _document.domain.indexOf(cssDomain) !== -1;

                        var _shouldGetCssRules = node.tagName === 'LINK'
                            && node.href
                            && cssGetAllowed
                            && (node.href.indexOf('blob:') === 0 || _config.enableCssRecording);

                        var _isDynamicCss = node.tagName === 'STYLE' && !node.textContent;

                        var cssRules = _shouldGetCssRules || _isDynamicCss ? _getCssRules(node.sheet) : null;

                        if (cssRules) {
                            data.childNodes = [{
                                nodeType: 3,
                                textContent: cssRules
                            }];
                                data.tagName = 'STYLE';
                                data.href = undefined;
                                data.rel = undefined;
                        }
                    }
                    break;
            }

            return data;
        };
        TreeMirrorClient.prototype.serializeAddedAndMoved = function(added, reparented, reordered) {
            var _this = this;
            var all = added.concat(reparented).concat(reordered);
            var parentMap = new MutationSummary.NodeMap();
            all.forEach(function(node) {
                var parent = _native._getParent(node);
                var children = parentMap.get(parent);
                if (!children) {
                    children = new MutationSummary.NodeMap();
                    parentMap.set(parent, children);
                }
                children.set(node, true);
            });
            var moved = [];
            parentMap.keys().forEach(function(parent) {
                var children = parentMap.get(parent);
                var keys = children.keys();
                while (keys.length) {
                    var node = keys[0];
                    while (node.previousSibling && children.has(node.previousSibling))
                        node = node.previousSibling;
                    var _isInsideExcludeBlock = false;
                    while (node && children.has(node)) {
                        if (_isExcludeStart(node)) _isInsideExcludeBlock = true;
                        else if (_isExcludeEnd(node.previousSibling)) _isInsideExcludeBlock = false;
                        if (!_isInsideExcludeBlock) {
                            var data = _this.serializeNode(node);
                            if (data) {
                                var _previousSibling = node.previousSibling;
                                while (_previousSibling && !data.previousSibling) {
                                    data.previousSibling = _this.serializeNode(_previousSibling);
                                    _previousSibling = _previousSibling.previousSibling;
                                }
                                data.parentNode = _this.serializeNode(_native._getParent(node));
                                if (data.parentNode)
                                    moved.push(data);
                            }
                        }
                        children.deleteNode(node);
                        node = _native._getNextSibling(node);
                    }
                    var keys = children.keys();
                }
            });
            return moved;
        };
        TreeMirrorClient.prototype.serializeAttributeChanges = function(attributeChanged) {
            var _this = this;
            var map = new MutationSummary.NodeMap();
            Object.keys(attributeChanged).forEach(function(attrName) {
                attributeChanged[attrName].forEach(function(element) {
                    if (element.hasAttribute && element.hasAttribute('data-mf-replace') ||
                        _helper._parentHasAttribute(element, 'data-mf-replace') ||
                        _helper._parentHasAttribute(element, 'data-mf-replace-inner')) {
                        return;
                    }
                    if (_isElementOnBlacklist(element))
                        _setNodeProperty(element, _nodePropertiesBlacklistKey, true, true);
                    var record = map.get(element);
                    if (!record) {
                        record = _this.serializeNode(element);
                        if (record) {
                            record.attributes = {};
                            map.set(element, record);
                        }
                    }
                    if (record) {
                        if (attrName.toLowerCase() === 'value' && element.tagName === 'INPUT')
                            record.attributes.value = _getMaskedElementValue(element);
                        else if (attrName === 'mf_adoptedStyleSheets')
                            _this.serializeAdoptedStyleSheets(element, record);
                        else
                            record.attributes[attrName] = element.getAttribute(attrName);
                    }
                });
            });
            return map.keys().map(function(node) {
                return map.get(node);
            });
        };
        TreeMirrorClient.prototype.serializeTextChanges = function(textChanges) {
            var _this = this;
            return textChanges.map(function(node) {
                var data = _this.serializeNode(node);
                if (data) {
                    if (node.tagName === 'STYLE' && /^\s*$/.test(node.textContent))
                        data.textContent = _getCssRules(node.sheet);
                    else
                        data.textContent = _getMaskedTextContent(node);
                }
                return data;
            });
        };
        TreeMirrorClient.prototype.applyChanged = function(summaries) {
            _rebuildNodeLists();

            var summary = summaries[0];
            ['removed', 'added', 'reparented', 'reordered', 'attributeChanged', 'characterDataChanged'].forEach(function(key) {
                if (!summary[key])
                    summary[key] = [];
            });

            var _this = this;
            var removed = summary.removed.map(function(node) {
                return _this.serializeNode(node);
            });

            var moved = this.serializeAddedAndMoved(summary.added, summary.reparented, summary.reordered);
            var attributes = this.serializeAttributeChanges(summary.attributeChanged);
            var text = this.serializeTextChanges(summary.characterDataChanged);
            this.mirror.applyChanged({
                removed: _removeNulls(removed),
                addedOrMoved: _removeNulls(moved),
                attributes: _removeNulls(attributes),
                text: _removeNulls(text)
            });
            summary.removed.forEach(function(node) {
                _this.forgetNode(node);
            });

            // catch shadow nodes created outside DOM, then later added to DOM. E.g. via Ionic.
            summary.added.forEach(function(node) {
                _observeShadowRoot(node);
            });
        };
        TreeMirrorClient.prototype.serializeChildNodes = function(node, data) {
            if (!node.childNodes.length)
                return;

            data.childNodes = [];
            var _isInsideExcludeBlock = false;
            for (var child = _native._getFirstChild(node); child; child = _native._getNextSibling(child)) {
                if (_isExcludeStart(child)) _isInsideExcludeBlock = true;
                else if (_isExcludeEnd(child.previousSibling)) _isInsideExcludeBlock = false;
                if (_isInsideExcludeBlock) continue;

                var serializedChild = this.serializeNode(child, true);
                if (serializedChild) {
                    data.childNodes.push(serializedChild);
                }
            }
        };
        TreeMirrorClient.prototype.serializeAdoptedStyleSheets = function(_node, _data) {
            if (!_node.adoptedStyleSheets)
                return;

            var _this = this;
            _data.css = _node.adoptedStyleSheets.map(function(_sheet) {
                var _cssData = {
                    id: _this.knownNodes.get(_sheet)
                };

                if (!_cssData.id) {
                    _cssData.id = _this.rememberNode(_sheet);
                    _cssData.text = _getCssRules(_sheet);
                }

                return _cssData;
            });
        };
        return TreeMirrorClient;
    })();

    function _removeNulls(_items) {
        return _items.filter(function(_item) {
            return _item;
        });
    }

    function _rebuildNodeLists() {
        _rebuildNodeList(_blacklistedNodes, _config._cssSelectorBlacklist);
        _rebuildNodeList(_whitelistedNodes, _config._cssSelectorWhitelist);
        _rebuildNodeList(_trackedNodes, _config._cssSelectorTracked);
        _rebuildNodeList(_trackedForms, ['.mf-form']);
        _freezeElementIds();
    }

    function _rebuildNodeList(_nodeList, _cssSelectorList) {
        _nodeList.length = 0;
        if (!_cssSelectorList.length)
            return;
        try {
            var _matchingNodes = _querySelectorAllDeep(_cssSelectorList.join(','), _document);
            for (var i = 0; i < _matchingNodes.length; i++) {
                _nodeList.push(_matchingNodes[i]);
            }
        } catch (e) { } //Supressing errors in case of invalid CSS selector
    }

    function _freezeElementIds() {
        if (!_config.freezeElementIds)
            return;

        _config.freezeElementIds.forEach(function(_selector) {
            try {
                var _matchingNodes = _querySelectorAllDeep(_selector, _document);
                _matchingNodes.forEach(function(_node) {
                    if (_frozenElementIds.has(_node))
                        return;

                    if (_matchingNodes.length > 1)
                        _selector = _getElementId(_node);

                    _frozenElementIds.set(_node, _selector);
                });
            } catch (e) { } //Supressing errors in case of invalid CSS selector
        });
    }

    function _querySelectorAllDeep(_selector, _root) {
        try {
            var _elements = [];

            _selector.split(',').forEach(function(_selector) {
                var _selectors = _selector.split(' > :document-fragment: > ', 1);

                _root.querySelectorAll(_selectors[0]).forEach(function(_element) {
                    if (_selectors[1] && _element.shadowRoot) {
                        _querySelectorAllDeep(_selectors[1], _element.shadowRoot).forEach(function(_element) {
                            _elements.push(_element);
                        });
                    } else {
                        _elements.push(_element);
                    }
                });
            });

            return _elements;
        } catch (_ex) {
            _log('Could not get element from selector: ' + _ex.message);
        }
    }

    function _mapHtmlString(_htmlString, _mapFunction) {
        var _data = [];

        var _dummy = _document.createElement('div');
        _dummy.innerHTML = _htmlString;

        for (var i = 0; i < _dummy.childNodes.length; i++) {
            var _childNode = _dummy.childNodes[i];
            var _childData = _mapFunction.call(this, _childNode);
            _data.push(_childData);
        }

        return _data;
    }

    function _isExcludeStart(_node) {
        return _node && _node.nodeType === 8 && _node.textContent.trim().toLowerCase().indexOf('mouseflowexcludestart') === 0;
    }

    function _isExcludeEnd(_node) {
        return _node && _node.nodeType === 8 && _node.textContent.trim().toLowerCase().indexOf('mouseflowexcludeend') === 0;
    }

    function _isIgnoredAttribute(_attributeName) {
        return _ignoredAttributesRegex.test(_attributeName);
    }

    function _getCssRules(_sheet) {
        var _cssRules = '';

        try {
            if (!_sheet || !_sheet.cssRules)
                return _cssRules;
        } catch (e) {
            return _cssRules;
        }

        for (var _i = 0; _i < _sheet.cssRules.length; _i++) {
            _cssRules += _sheet.cssRules[_i].cssText;
        }

        return _cssRules;
    }

    function _signalInstalled() {
        _transmitCrossDomain({
            _url: _baseUrl + 'install?websiteId=' + _config._websiteId,
            _success: function() {
                _log('Website installed signal sent.', _getPageViewTime());
            },
            _error: function() {
                _log('Error in transmitCrossDomain - could not signal that website was installed.', _getPageViewTime());
            }
        });
    }

    function _fetchConfig(_callback) {
        _transmitCrossDomain({
            _url: _baseUrl + 'config?websiteId=' + _config._websiteId,
            _success: function(_xhr) {
                var _configuration = _helper._jsonParse(_xhr._response);
                _config.keyLogging = _configuration.enableKeystrokes;
                _log('Fetched recording script configuration.');
                _callback();
            },
            _error: function() {
                _log('Error in transmitCrossDomain - could not fetch recording script configuration.');
                _callback();
            }
        });
    }

    function _start() {
        if (_isStarted) {
            _log('Recording script is already started', _getPageViewTime());
            return;
        }

        if (!_isInitialized) {
            _log('Recording not started - recording script is not initialized', _getPageViewTime());
            return;
        }

        _log('Recording starting, version ' + _version + (_config.gdprEnabled ? ', GDPR mode enabled' : '') +
            (_config._enforcePrivacy ? ', privacy enforced' : ''), _getPageViewTime());

        if (!_recordingCanBegin())
            return;

        _isStarted = true;

        _resetTimers();

        _rebuildNodeLists();

        _userInfo._pageId = _getNewPageId(_recordingData._startDateTime);

        if (_shouldStartNewSession())
            _startNewSession();

        _recordingData._scriptVersion = _version;

        _startRecording();
    }

    function _startRecording() {
        var _frameworksUsed = _detectFrameworksUsed();

        var _url = _baseUrl + 'init?v=' + _version + '&p=' + _config._websiteId + '&s=' + _userInfo._sessionId + '&page=' + _userInfo._pageId +
            '&ret=' + (_userInfo._returning ? '1' : '0') + '&u=' + _userInfo._userId + '&href={href}' +
            '&url=' + _encodeUriComponent(_urlFilter._getDisplayUrl()) + '&ref={referrer}' +
            '&title=' + _encodeUriComponent(_document.title) + '&res=' + _window.screen.width + 'x' + _window.screen.height + '&tz=' + _getTimeZone() +
            '&to=' + _userInfo._hasTouch + '&dnt=' + _userInfo._doNotTrack + '&ori=' + (typeof _window.orientation != 'undefined' ? _window.orientation : '') +
            '&dw=' + _document.documentElement.clientWidth + '&dh=' + _document.documentElement.clientHeight + '&time=' + _getReadyTime() +
            '&pxr=' + (typeof _window.devicePixelRatio != 'undefined' ? _window.devicePixelRatio : 1) +
            (_frameworksUsed.length > 0 ? '&fw=' + _frameworksUsed.join(',') : '') + '&gdpr=' + (_config.gdprEnabled ? 1 : 0);

        var _href = _config.location.href;
        var _maxHrefLength = _internalSettings._urlMaxLength - _url.length - 6;
        if (_encodeUriComponent(_href).length > _maxHrefLength)
            _href = _href.split('#')[0];
        if (_encodeUriComponent(_href).length > _maxHrefLength)
            _href = _href.split('?')[0];
        _url = _url.replace('{href}', _encodeUriComponent(_href));

        // Make sure a long referrer URL doesn't make the init URL too long
        var _referrer = _document.referrer;
        if (_url.replace('{referrer}', _encodeUriComponent(_referrer)).length > _internalSettings._urlMaxLength) {
            if (_referrer.indexOf('?') > -1) _referrer = _referrer.split('?')[0];
            if (_url.replace('{referrer}', _encodeUriComponent(_referrer)).length > _internalSettings._urlMaxLength)
                _referrer = '';
        }
        _url = _url.replace('{referrer}', _encodeUriComponent(_referrer));

        _autoTagIfEnabled();

        var _initialVariables = _getInitialVariablesAndRemoveFromQueue(_internalSettings._urlMaxLength - _url.length - 6);
        _url += _convertVariablesToQueryString(_initialVariables);

        _transmitCrossDomain({
            _url: _url,
            _success: function(_xhr) {
                if (_xhr._response === 'Recording blocked') {
                    _log('Recording not started - mf_block cookie set to 1', _getPageViewTime());
                    return;
                }

                _initialVariables.forEach(function(_variable) {
                    _tryAddOrUpdateVariableHash(_variable.key, _variable.value);
                });

                _isRecording = true;
                _sendHtmlSource();

                _feedbackWidget._start(_userInfo, _recordingData, _transmitData);
                _window._mfq = new _actionQueue(_window._mfq);

                _addFrictionIfPageBounce();
                _addFrictionIfSpeedBrowsing();
            },
            _sendCookies: true,
            _error: function() {
                _log('Error in transmitCrossDomain - recording not starting.', _getPageViewTime());
            }
        });

        _handleFormSubmit();
        _recordingData._formSubmitPathHash = null;

        _bindEventHandlers();

        _recordingData._currentScroll = { x: _window.pageXOffset, y: _window.pageYOffset };
        if (_recordingData._currentScroll.x !== 0 && _recordingData._currentScroll.y !== 0) _addMoveScroll();

        // Reset /events call sequence
        _recordingData._sequence = 1;

        _saveCookies();

        _log('Recording started. Session: ' + _userInfo._sessionId + ', Page: ' + _userInfo._pageId + ', Last page: ' + _userInfo._lastPageId, _getPageViewTime());
    }

    function _shouldStartNewSession() {
        return !_userInfo._sessionId  || !_numberOfPageviewsWithinLimit() || (_recordingData._scriptVersion && _recordingData._scriptVersion !== '0' && _recordingData._scriptVersion !== _version) ||
            (+new Date() - _recordingData._lastPageViewTime) > _internalSettings._inactivityTimeoutTime;
    }

    function _startNewSession() {
        _log('Starting new session');

        var _oldSessionId = _userInfo._sessionId;
        _userInfo._sessionId = _guid();
        _recordingData._customVariableHashes = [];
        _userInfo._numberOfPageviews = 0;

        if (_userInfo._sessionId === _oldSessionId)
            throw Error('New session ID is identical to the old session ID. This might be because Math.random has been overwritten.');
    }

    function _stop(_hasTimedOut) {
        if (!_isStarted)
            return;

        _checkAndHandleFormSubmitReceived();
        _isDomObserverInitialized = false;
        _unbindEventHandlers();
        _resetMouseflowQueue();
        _timer._clearInterval(_moveScrollIntervalFunc);
        _timer._clearInterval(_relativeMoveIntervalFunc);
        _timer._clearInterval(_pingintervalFunc);
        _timer._clearTimeout(_inactivityFunc);

        if (_sendDomMutationTimeoutFunc) {
            _timer._clearTimeout(_sendDomMutationTimeoutFunc);
            _sendDomMutations();
        }

        if (_sendDataTimeoutFunc) {
            _timer._clearTimeout(_sendDataTimeoutFunc);
            _transmitVariables();
        }

        _resetNodeProperties();

        if (!_hasTimedOut)
            _add(_eventType._pageViewEnd, {});

        _save();
        _isRecording = false;
        if (_mirrorClient)
            _mirrorClient.disconnect();

        _feedbackWidget._stop();

        _saveCookies();

        _recordingData = _initRecordingData();
        _log('Recording stopped', _getPageViewTime());

        _isStarted = false;
        _hasSentLoadEvent = false;
    }

    function _newPageView(_path, _location) {
        if (_getPageViewTime() < 100) {
            var _isSamePath = !_path || _path.toString() === _config.path;
            var _isSameLocation = (_location || _window.location).href === _config.location.href;
            if (_isSamePath && _isSameLocation)
                return;
        }

        if (_isStarted)
            _stop();

        _config.htmlDelay = _config.newPageViewHtmlDelay;
        _config._resetLocation(_path, _location);
        _userInfo._pageId = '';

        _start();
        _sendLoadEvent(0);
    }

    function _checkAndHandleFormSubmitReceived() {
        if (_recordingData._formSubmitReceived) {
            if (+new Date() - _recordingData._formSubmitReceived < _config.registerSubmitTimeout) {
                _log('Registering formSubmit', _getPageViewTime());
            } else {
                _log('Not registering formSubmit. Timeout exceeded.', _getPageViewTime());
                _recordingData._formSubmitPathHash = null;
            }
        }
    } 

    function _stopSession() {
        _stop();
        _deleteValue('mf_' + _config._websiteId);

        if (_window.name && (
            (_window.name.length === 35 && _window.name.indexOf('mf_') === 0) ||
            (_config.crossDomainSupport && _window.name.indexOf('mf_' + _config._websiteId) === 0)))
            _window.name = '';
    }

    function _sendHtmlSource() {
        if (_config.htmlFetchMode === 'post') {
            _timer._setTimeout(function() {
                _startDomObserver();
            }, _config.htmlDelay);
        } else {
            _log('Html not sent due to mouseflowHtmlFecthMode setting', _getPageViewTime());
        }
    }

    function _startDomObserver() {
        if (_mirrorClient)
            _mirrorClient.disconnect();

        var _page = {
            _websiteId: _config._websiteId,
            _sessionId: _userInfo._sessionId,
            _pageId: _userInfo._pageId
        };

        _mirrorClient = new TreeMirrorClient(_document, {
            initialize: function(rootId, children) {
                if (_page._pageId === _userInfo._pageId)
                    _isDomObserverInitialized = true;

                _window.setTimeout(function() {
                    _sendInitialDom({
                        _page: _page,
                        _data: {
                            f: 'initialize',
                            args: [rootId, children]
                        },
                        _size: _document.documentElement.innerHTML.length
                    });
                }, 1);
            },

            applyChanged: function(summary) {
                if (_getPageViewTime() - _recordingData._lastUserInteraction < 30000) {
                    if (summary.removed.length || summary.addedOrMoved.length ||
                        summary.attributes.length || summary.text.length) {
                        _enqueueDomMutation({
                            _page: _page,
                            _data: {
                                f: 'applyChanged',
                                args: [
                                    summary.removed,
                                    summary.addedOrMoved,
                                    summary.attributes,
                                    summary.text
                                ]
                            }
                        });
                    }
                }
            }
        });
    }

    function _setVariable(_key, _value, _scope, _overwrite) {
        if (!_isStarted || !_key)
            return;

        _value = _value || '';

        if (_key.length > 100) {
            _log('Variable key cannot be more than 100 characters', _getPageViewTime());
            return;
        }

        if (_value.length > 2000) {
            _log('Variable value cannot be more than 2000 characters', _getPageViewTime());
            return;
        }

        if (!_tryAddOrUpdateVariableHash(_key, _value)) {
            _log('Variable already set to same value, not triggering callback.', _getPageViewTime());
            return;
        }

        var _data = { key: _key.toString(), value: _value.toString() || '', scope: _scope || 'session', overwrite: _overwrite === undefined ? true : _overwrite };
        _recordingData._variables.push(_data);
        _timer._clearTimeout(_sendDataTimeoutFunc);
        _sendDataTimeoutFunc = _timer._setTimeout(_transmitVariables, 1000);
    }

    function _getInitialVariablesAndRemoveFromQueue(limit) {
        if (!_window._mfq.length)
            return [];

        var _variables = [];
        var _variablesLength = 0;

        for (var _index = 0; _index < _window._mfq.length; _index++) {
            var _action = _window._mfq[_index];

            if (!_action || !_action.length || _action[0] !== 'setVariable')
                continue;

            if ((_action.length > 3 && _action[3] !== 'session') || (_action.length > 4 && _action[4] !== true))
                continue;

            var _key = _action[1];
            var _value = _action[2];

            if (!_key || !_value)
                continue;

            if (_findVariableHashIndex(_key) !== -1)
                continue;

            var _variableQueryString = _encodeUriComponent(_key) + '=' + _encodeUriComponent(_value);
            _variablesLength += _variableQueryString.length + 1;
            if (_variablesLength - 1 >= limit)
                break;

            _variables.push({ key: _key, value: _value });

            _window._mfq.splice(_index, 1);
            _index--;
        }

        return _variables;
    }

    function _convertVariablesToQueryString(_variables) {
        var _queryString = _variables.map(function(_variable) {
            return _encodeUriComponent(_variable.key) + '=' +
                _encodeUriComponent(_variable.value);
        }).join('&');

        return _queryString
            ? '&vars=' + _encodeUriComponent(_queryString)
            : '';
    }

    function _transmitVariables() {
        _sendDataTimeoutFunc = 0;
        for (var _i = 0; _i < _recordingData._variables.length; _i++) {
            var _variable = _recordingData._variables[_i];
            _log('Setting custom variable: ' + _variable.key + ' = ' + _variable.value +
                ', overwrite: ' + (_variable.overwrite === undefined ? true : _variable.overwrite), _getPageViewTime());
        }
        _transmitData('variable', _recordingData._variables);
        _recordingData._variables = [];
    }

    function _tag(_tagString) {
        _add(_eventType._tag, { target: _tagString });
    }

    function _star() {
        _add(_eventType._tag, { target: '*' });
    }

    function _identify(_userName) {
        if (!_isStarted)
            return;

        if (_config.gdprEnabled || _config._enforcePrivacy) {
            _log('User identification not allowed (privacy enforced in script)', _getPageViewTime());
            return;
        }

        _transmitData('identify', { userId: _userInfo._userId, userName: _userName });
    }

    function _formSubmitAttempt(_form) {
        if (!_isStarted)
            return;

        _form = _getFormId(_form);

        _log('Registering form submit attempt on this page', _getPageViewTime());
        _registerSubmit(_form);
    }

    function _formSubmitSuccess(_form) {
        if (!_isStarted)
            return;

        _form = _getFormId(_form);

        var _timeOffset = _getPageViewTime();
        if (_recordingData._formSubmitPathHash === _getStringHash(_config.path || _config.location.pathname) || _timeOffset > 5000) {
            _log('Registering form submit success on this page', _getPageViewTime());
            if (!_recordingData._formSubmitPathHash)
                _add(_eventType._submit, { target: _form });
            _add(_eventType._submitSuccess, {});
            _recordingData._formSubmitReceived = undefined;
            _recordingData._formSubmitPathHash = undefined;
        } else {
            _window.setTimeout(function() {
                _log('Registering form submit success on previous page', _getPageViewTime());
                _addEventsToPreviousPageview([{
                    _type: _eventType._submitSuccess
                }]);
            }, _getFormSubmitResultDelay());
        }
    }

    function _formSubmitFailure(_form) {
        if (!_isStarted)
            return;

        _form = _getFormId(_form);

        var _timeOffset = _getPageViewTime();
        if (_recordingData._formSubmitPathHash === _getStringHash(_config.path || _config.location.pathname) || _timeOffset > 5000) {
            _log('Registering form submit failure on this page', _getPageViewTime());
            if (!_recordingData._formSubmitPathHash)
                _add(_eventType._submit, { target: _form });
            _add(_eventType._submitFailure, {});
            _addFriction(_frictionType._submitFailure);
            _recordingData._formSubmitReceived = undefined;
            _recordingData._formSubmitPathHash = undefined;
        } else {
            _window.setTimeout(function() {
                _log('Registering form submit failure on previous page', _getPageViewTime());
                _addEventsToPreviousPageview([
                    { _type: _eventType._submitFailure },
                    { _type: _eventType._friction, _details: { x: _frictionType._submitFailure._value, y: 0 } },
                    { _type: _eventType._tag, _details: { target: _frictionType._submitFailure._name } }
                ]);
            }, _getFormSubmitResultDelay());
        }
    }

    function _getFormSubmitResultDelay() {
        var _maxDelay = 1000;
        var _timeDiff = new Date() - _recordingData._formSubmitReceived;
        return _timeDiff > _maxDelay ? 0 : _maxDelay - _timeDiff;
    }

    function _getFormId(_form) {
        if (typeof (_form) === 'object')
            return _getElementId(_form);

        var _target = _forms.filter(function(_f) {
            return _f._formId === _form;
        }).map(function(_f) {
            return _f._target;
        })[0];

        return _target || _form;
    }

    function _registerSubmit(_formId) {
        if (!_isStarted || !_formId || _isElementBlacklisted(_getElementById(_formId)))
            return;

        if ((+new Date()) - _recordingData._lastSubmitTime < 20) return;
        _recordingData._lastSubmitTime = +new Date();

        _add(_eventType._submit, {
            target: _formId
        });

        if (!_recordingData._firstFormSubmitValues[_formId]) {
            _recordingData._firstFormSubmitValues[_formId] = _getFormValues(_formId);
        } else {
            _addChangedFieldEvents(_formId, _getFormValues(_formId), _recordingData._firstFormSubmitValues[_formId]);
        }

        _addBlankFieldEvents(_formId);
        _storeFormValues(_formId);
        _recordingData._formSubmitReceived = +new Date();
        _recordingData._formSubmitPathHash = _getStringHash(_config.path || _config.location.pathname);
        _handleFormSubmit();
    }

    function _handleFormSubmit(){
        if (!_recordingData._formSubmitPathHash)
            return;

        var _validFormConfigs = _getValidFormsConfigurations();
        if (_validFormConfigs.length) {
            _handleValidFormsConfiguration(_validFormConfigs);
            return;
        } 

        if (_recordingData._formSubmitPathHash !== _getStringHash(_config.path || _config.location.pathname)) {
            _formSubmitSuccess();
        }
    }

    function _handleValidFormsConfiguration(_validFormConfigs) {
        var _nonTargetConfig = _validFormConfigs.filter(function(_config) {
            return !_config.target;
        })[0];

        if (_nonTargetConfig) {
            _runFormConfigResult(_nonTargetConfig);
            return;
        } 

        _setRepeatTimeout(function(){ 
            var _targetConfig = _validFormConfigs.filter(function(_config) {
                return _config.target && _doesTargetExist(_config.target);
            })[0];
    
            if (!_targetConfig) 
                return false;

            _runFormConfigResult(_targetConfig);
            return true;
        }, _internalSettings._formTargetInterval, _internalSettings._formTargetMaxTime);
    }

    function _getValidFormsConfigurations() {
        if (!_config.forms)
            return [];

        var _validFormConfigs = _config.forms.filter(function(_formConfig) {
            if (_formConfig.formPath && _getStringHash(_formConfig.formPath) !== _recordingData._formSubmitPathHash)
                return false;
            if (_formConfig.redirectPath && _formConfig.redirectPath !== _config.location.pathname)
                return false;

            return true;
        });

        return _validFormConfigs;
    }

    function _doesTargetExist(_target){
        var _element = _document.querySelector(_target.selector);
        if (!_element)
            return false;

        if (!_target.text) 
            return true;

        return _element.textContent.toLowerCase().includes(_target.text.toLowerCase());
    }

    function _runFormConfigResult(_config) {
        if (_config.result === 'success') {
            _formSubmitSuccess();
        } else if (_config.result === 'failure') {
            _formSubmitFailure();
        }
    }

    function _setRepeatTimeout(_callback, _interval, _maxTime) {
        var _startTime = new Date();
        var _timeoutFunction = function() {
            var _time = new Date() - _startTime;
            if (_time < _maxTime && !_callback())
                _window.setTimeout(_timeoutFunction, _interval);
        };
        _window.setTimeout(_timeoutFunction, _interval);
    }

    function _addFriction(_friction, _target) {
        if (!_isStarted || !_friction)
            return;

        var _value = +_friction._value;
        if (!_value)
            return;

        var _name = _friction._name;
        if (_name) {
            var _filterForTarget = _name === _frictionType._clickRage || _name === _frictionType._clickError;
            var _previousEvent = _recordingData._addedFrictionTypes.filter(function(e) {
                return e._name === _name && (!_filterForTarget || e._target === _target);
            })[0];

            if (_previousEvent) {
                var _timeSinceLastEvent = new Date() - _previousEvent._date;
                if (_timeSinceLastEvent < _friction._timeout)
                    return;

                _recordingData._addedFrictionTypes.splice(
                    _recordingData._addedFrictionTypes.indexOf(_previousEvent));
                _value = 0;
            }

            _recordingData._addedFrictionTypes.push({
                _name: _name,
                _target: _target,
                _date: new Date()
            });
        } else {
            _name = 'custom-friction' + (_friction._customName ? ('-' + _friction._customName) : '');
        }

        var _frictionData = {
            value: _name,
            target: _target ? _target : '',
            x: _value > 0 ? _value : 0, //X has positive values
            y: _value < 0 ? _value * -1 : 0 //Y has negative values
        };

        _add(_eventType._friction, _frictionData);
    }

    function _addFrictionIfPageBounce() {
        if (_userInfo._last5Pages.length < 2)
            return;

        var _firstPage = _userInfo._last5Pages[_userInfo._last5Pages.length - 2];
        var _lastPage = _userInfo._last5Pages[_userInfo._last5Pages.length - 1];
        var _pathHash = _getStringHash(_config.path || _config.location.pathname);
        if (_firstPage._pathHash === _pathHash && _firstPage._pathHash !== _lastPage._pathHash && _recordingData._startTime - _lastPage._startTime < 10000) {
            _addEventsToPreviousPageview([
                { _type: _eventType._friction, _details: { x: _frictionType._bounce._value, y: 0 } },
                { _type: _eventType._tag, _details: { target: _frictionType._bounce._name } }
            ]);
        }
    }

    function _addFrictionIfSpeedBrowsing() {
        if (_userInfo._last5Pages.length < 4)
            return;

        var _pageBeforeSpeedBrowsing = _userInfo._last5Pages[_userInfo._last5Pages.length - 5];
        var _firstPage = _userInfo._last5Pages[_userInfo._last5Pages.length - 4];
        if (_recordingData._startTime - _firstPage._startTime < 30000) {
            if (_pageBeforeSpeedBrowsing && _firstPage._startTime - _pageBeforeSpeedBrowsing._startTime < 30000)
                return;

            _addEventsToPageview(_firstPage._id, [
                { _type: _eventType._friction, _details: { x: _frictionType._speedBrowsing._value, y: 0 } },
                { _type: _eventType._tag, _details: { target: _frictionType._speedBrowsing._name } }
            ]);
        }
    }

    function _activateFeedback() {
        if (!_isStarted)
            return;

        _feedbackWidget._activateFeedback.apply(_feedbackWidget, arguments);
    }

    function _initUserInfo() {
        return {
            _sessionId: '',
            _pageId: '',
            _userId: '',
            _returning: false,
            _hasTouch: +('ontouchstart' in _window && _config.touchEvents),
            _doNotTrack: (navigator.doNotTrack === 'yes' || navigator.doNotTrack == 1 || window.doNotTrack == 1 || navigator.msDoNotTrack == 1) ? 1 : 0,
            _numberOfPageviews: 0,
            _lastPageId: '',
            _last5Pages: [],
            _completedFeedbackIds: [],
            _hasSessionStorage: _sessionStorage._hasBrowserSupport(),
            _initialRecordingRate: null
        };
    }

    function _initRecordingData() {
        return {
            _startDateTime: new Date(),
            _startTime: +new Date(),
            _bufferTime: +new Date(),
            _lastPageViewTime: +new Date(),
            _data: [],
            _chunks: [],
            _values: [],
            _inputs: [],
            _lastMaskedInputValues: [],
            _elementIds: [],
            _newIds: [],
            _lastMouseDownTime: 0,
            _lastMouseUpTime: 0,
            _lastClickTime: 0,
            _lastClickTarget: '',
            _lastSubmitTime: 0,
            _last5ClickTimes: [],
            _addedFrictionTypes: [],
            _currentMousePosition: { x: 0, y: 0 },
            _lastMousePosition: { x: 0, y: 0 },
            _lastRelativeMousePosition: { x: 0, y: 0 },
            _lastTouchMoveEventTime: -100,
            _currentScroll: { x: 0, y: 0 },
            _lastScroll: { x: 0, y: 0 },
            _lastElementScroll: {},
            _lastScrollEventTime: -100,
            _lastResizeEventTime: -100,
            _lastViewport: { x: 0, y: 0 },
            _domMutationHashes: [],
            _domMutationsIndex: 0,
            _mutationSendQueue: [],
            _variables: [],
            _sequence: 1,
            _lastUserInteraction: 0,
            _lastChangeOrKeyEvent: 0,
            _firstFormSubmitValues: {},
            _customVariableHashes: [],
            _userInteractionBeforeLastEventPackage: 0,
            _viewportHeightBeforeLastEventPackage: 0,
            _scrollBeforeLastEventPackage: 0,
            _completedFeedbackIds: [],
            _javascriptErrorIndex: 0,
            _lastErrorTime: 0,
            _lastError: null,
            _lastFormValues: _getLastFormValues(),
            _sentDomMutationCount: 0,
            _isTransmitting: false,
            _scriptVersion: 0,
            _hasReadUserCookie: false,
            _hasReadSessionCookie: false
        };
    }

    function _getChildren(_node, _filter) {
        var _children = [];
        
        if (!_node.childNodes || !_node.childNodes.length) return _children;
        
        for (var _child = _native._getFirstChild(_node); _child; _child = _native._getNextSibling(_child)) {
            if (_filter && _filter(_child))
                _children.push(_child);
            _children = _children.concat(_getChildren(_child, _filter));
        }
        
        return _children;
    }

    function _getFormFields(_form, _filter) {
        return _form.elements
            ? Array.from(_form.elements).filter(_filter)
            : _getChildren(_form, _filter);
    }

    function _getFormValues(_formId) {
        var _form = _getElementById(_formId);
        var _result = {};
        if (!_form) {
            _log('Form not found: ' + _formId, _getPageViewTime());
            return _result;
        }

        var _children = _getFormFields(_form, function(_e) {
            return /input|select|textarea/i.test(_e.tagName) && !/hidden|submit|reset|image|button/i.test(_e.type);
        });

        _children.forEach(function(_e) {
            var _value = _getElementValue(_e);
            var _id = _getElementId(_e);

            if (!_result[_id])
                _result[_id] = _value;
            else if (_value)
                _result[_id] += ', ' + _value;
        });

        return _result;
    }

    function _storeFormValues(_formId) {
        var _form = _getElementById(_formId);
        if (!_form || !_userInfo._hasSessionStorage)
            return;

        var _children = _getFormFields(_form, function(_e) {
            return /input|textarea/i.test(_e.tagName) && !/hidden|submit|reset|image|file|button|password/i.test(_e.type);
        });

        _children.forEach(function(_e) {
            var _value = _getElementValue(_e);
            if (!_value || _value.length <= 3 || _isCreditCard(_value) || _isElementWhitelisted(_e))
                return;

            var _valueHashes = _getWordHashes(_value);
            if (_valueHashes.length === 0)
                return;

            var _hashes = [];
            for (var _i = 0; _i < _valueHashes.length; _i++) {
                _hashes.push(_valueHashes[_i]._hash);
            }

            var _found = false;
            for (var _i = 0; _i < _recordingData._lastFormValues.length; _i++) {
                var _lastFormValueHashes = _recordingData._lastFormValues[_i];
                _found = _hashes.length === _lastFormValueHashes.length && _indexOfHashSequence(_lastFormValueHashes, _hashes) === 0;
                if (_found) break;
            }

            if (!_found)
                _recordingData._lastFormValues.push(_hashes);
        });

        if (_recordingData._lastFormValues.length) {
            _recordingData._lastFormValues = _recordingData._lastFormValues.slice(-100);
            _setLastFormValues(_recordingData._lastFormValues);
        }
    }

    function _setLastFormValues(_values) {
        _localStorage._setJson('mf_replaceHashes', _values);
    }

    function _getLastFormValues() {
        return _localStorage._getJson('mf_replaceHashes') || [];
    }

    function _replaceLastFormValues(_value) {
        if (_recordingData._lastFormValues.length === 0)
            return _value;

        var _valueHashes = _getWordHashes(_value);

        for (var _i = 0; _i < _recordingData._lastFormValues.length; _i++) {
            var _lastFormValueHashes = _recordingData._lastFormValues[_i];
            var _matchIndex;
            do {
                var _startIndex = _matchIndex !== undefined ? _matchIndex + 1 : 0;
                _matchIndex = _indexOfHashSequence(_valueHashes, _lastFormValueHashes, _startIndex);
                if (_matchIndex !== -1) {
                    var _start = _valueHashes[_matchIndex]._start;
                    var _end = _valueHashes[_matchIndex + _lastFormValueHashes.length - 1]._end;
                    var _replaceValue = _stringRepeat('*', _end - _start);
                    _value = _value.slice(0, _start) + _replaceValue + _value.slice(_end);
                }
            } while (_matchIndex !== -1);
        }

        return _value;
    }

    function _getWordHashes(_value) {
        var _hashes = [];
        var _start;

        function _addWordToHashes(_end) {
            if (_start === undefined)
                return;

            var _word = _value.slice(_start, _end);
            _hashes.push({
                _start: _start,
                _end: _start + _word.length,
                _hash: _getStringHash(_word)
            });

            _start = undefined;
        }

        for (var _i = 0; _i < _value.length; _i++) {
            var _character = _value[_i];
            if (_isWordCharacter(_character)) {
                if (_start === undefined) {
                    _start = _i;
                }
            } else {
                _addWordToHashes(_i);
            }
        }

        _addWordToHashes();

        return _hashes;
    }

    function _indexOfHashSequence(_targetHashes, _valueHashes, _startIndex) {
        for (var _i = _startIndex || 0; _i < _targetHashes.length; _i++) {
            if (_i + _valueHashes.length > _targetHashes.length)
                break;

            if (_matchesHashSequence(_targetHashes, _valueHashes, _i))
                return _i;
        }

        return -1;
    }

    function _matchesHashSequence(_targetHashes, _valueHashes, _startIndex) {
        var _found = false;

        for (var _i = _startIndex || 0, _j = 0; _i < _targetHashes.length && _j < _valueHashes.length; _i++, _j++) {
            _found = _targetHashes[_i]._hash === _valueHashes[_j];

            if (!_found)
                break;
        }

        return _found;
    }

    function _getElementValue(_element) {
        var _value = '';
        if (_element.type && /radio|checkbox/.test(_element.type.toLowerCase()))
            _value = _element.checked ? _element.value : '';
        else if (_element.tagName && /select/.test(_element.tagName.toLowerCase()) && _element.options)
            for (var j = 0; j < _element.options.length; j++) {
                var _val = _element.options[j].selected ? _element.options[j].value : '';
                if (_val && _val != '')
                    _value += (_value && _value != '' ? ',' : '') + _val;
            } else
            _value = _element.value;
        return _value || '';
    }

    function _getMaskedElementValue(_element) {
        if (_element.type === 'password')
            return '*';

        var _value = _getElementValue(_element);

        if (_shouldElementValueBeMasked(_element)) {
            _value = _value.replace(/./g, _getMaskingChar(_element.type));
        } else if (_mayBeCreditCard(_element) && !_isElementWhitelisted(_element)) {
            _value = _value.slice(0, 2) + _value.slice(2).replace(/./g, _getMaskingChar(_element.type));
        }

        return _value;
    }

    function _getMaskedTextContent(_element) {
        var _textContent = _element.textContent;

        if (_element.nodeType === 3 && _native._getParent(_element))
            _element = _native._getParent(_element);

        var _maskedTextContent = _replaceLastFormValues(_textContent);
        if (_maskedTextContent !== _textContent && _config.replaceLastFormValues)
            _textContent = _maskedTextContent;

        if (_shouldElementTextContentBeMasked(_element))
            _textContent = _textContent.replace(/./g, '*');

        return _textContent;
    }

    function _isElementWhitelisted(_element) {
        return _helper._hasClass(_element, 'mouseflow') ||
            _whitelistedNodes.indexOf(_element) !== -1;
    }

    function _isElementBlacklisted(_element) {
        if (!_element)
            return false;

        if (_element[NodeMap.ID_PROP])
            return !!_getNodeProperty(_element, _nodePropertiesBlacklistKey);

        while (_element) {
            if (_isElementOnBlacklist(_element))
                return true;

            _element = _native._getParent(_element);
        }

        return false;
    }

    function _isElementOnBlacklist(_element) {
        return _blacklistedNodes.indexOf(_element) !== -1 || _helper._hasClass(_element, 'no-mouseflow-dom') || _helper._hasClass(_element, 'mf-excluded');
    }

    function _shouldElementBeMasked(_element) {
        return _helper._hasClass(_element, 'no-mouseflow') ||
            (!_config.keyLogging && !_isElementWhitelisted(_element)) ||
            _isElementBlacklisted(_element);
    }

    function _shouldElementValueBeMasked(_element) {
        return (_shouldElementBeMasked(_element) || _isCreditCard(_getElementValue(_element)) || _isGdprAndShouldBeMasked(_element)) &&
            _isInputOrTextArea(_element) && !_nonTextInputFieldRegex.test(_element.type);
    }

    function _shouldElementTextContentBeMasked(_element) {
        return (_element.isContentEditable || _element.tagName === 'TEXTAREA') &&
            _shouldElementBeMasked(_element);
    }

    function _isGdprAndShouldBeMasked(_element) {
        return (_config.gdprEnabled || _config._enforcePrivacy) && (_isEmail(_element) || _isTelephone(_element));
    }

    function _isCreditCard(_value) {
        var _v = _value.replace(/[-\s]+/g, '');
        if (!_creditCardRegex.test(_v) || !_luhnChk.call(this, _v))
            return false;

        return !_creditCardPatterns.every(function(_cardItem) {
            if (_cardItem.patternRegex.test(_v)) {
                _log("Identified credit card " + _cardItem.name);
                return false;
            }
            return true;
        });
    }

    function _isEmail(_element) {
        return /email/i.test(_element.type) || _emailRegex.test(_element.value);
    }

    function _isTelephone(_element) {
        return /tel/i.test(_element.type);
    }

    function _mayBeCreditCard(_element) {
        return _isInputOrTextArea(_element) && /^\d{3}[^a-z]*$/i.test(_element.value);
    }

    function _isInputOrTextArea(_element) {
        return _element.tagName === 'INPUT' || _element.tagName === 'TEXTAREA';
    }

    function _getMaskingChar(_inputType) {
        return /number/i.test(_inputType) ? '0' : '*';
    }

    function _getMaskedKeyDownCode(_event) {
        return _shouldElementValueBeMasked(_event.target) || _mayBeCreditCard(_event.target)
            ? '191'
            : (_event.which && _event.which.toString()) || '';
    }

    function _getDiffedMaskedValue(_element) {
        var _elementId = _getElementId(_element);
        var _oldMaskedValue = _recordingData._lastMaskedInputValues[_elementId];
        var _newMaskedValue = _getMaskedElementValue(_element);
        var _result = _newMaskedValue;

        if (_oldMaskedValue && _oldMaskedValue.length > 3 && _newMaskedValue.indexOf(_oldMaskedValue) === 0)
            _result = '+||' + _newMaskedValue.substring(_oldMaskedValue.length);

        _recordingData._lastMaskedInputValues[_elementId] = _newMaskedValue;

        return _result;
    }

    function _addChangedFieldEvents(_formId, _currentValues, _firstValues) {
        try {
            var _changedFields = [];
            for (var _field in _currentValues) {
                if (typeof _firstValues[_field] == 'undefined' || _currentValues[_field] != _firstValues[_field])
                    _changedFields.push(_field);
            }
            for (var _field in _firstValues) {
                if (typeof _currentValues[_field] == 'undefined' && _changedFields.indexOf(_field) === -1)
                    _changedFields.push(_field);
            }
            for (var i = 0; i < _changedFields.length; i++) {
                _add(_eventType._changedFieldSubmit, {
                    target: _changedFields[i]
                });
            }
        } catch (_ex) {
            _log('Error in _addChangedFieldEvents: ' + _ex.message, _getPageViewTime());
        }
    }

    function _addBlankFieldEvents(_formId) {
        try {
            var _blankFields = _getBlankFields(_formId);
            for (var i = 0; i < _blankFields.length; i++) {
                _add(_eventType._blankFieldSubmit, {
                    target: _blankFields[i]
                });
            }
        } catch (_ex) {
            _log('Error in getBlankFields: ' + _ex.message, _getPageViewTime());
        }
    }

    function _getBlankFields(_formId) {
        var _blankFields = [];
        var _values = _getFormValues(_formId);
        for (var _field in _values)
            if (_values[_field] == '')
                _blankFields.push(_field);
        return _blankFields;
    }

    function _getParentForm(_element) {
        if (_trackedForms.includes(_element))
            return null;
        
        return _element.form || _trackedForms.filter(function(_form) {
            return _form.contains(_element);
        })[0] || null;
    }

    function _readCookies() {
        _readUserCookie();
        _readSessionCookie();
    }

    function _saveCookies() {
        _saveUserCookie();
        _saveSessionCookie();
    }

    function _readUserCookie() {
        var _userCookie = _retrieveValue('mf_user').split('|');
        for (var _i = 0; _i < _userCookie.length; _i++) {
            var _cookieValue = _userCookie[_i];
            switch (_i) {
                case 0: _userInfo._userId = _cookieValue; break;
                case 1: _userInfo._completedFeedbackIds = _cookieValue !== '' ? _cookieValue.split(/[$,]+/) : []; break;
            }
        }

        _userInfo._returning = _userInfo._userId !== '';
        if (_userInfo._userId === '' || _userInfo._userId === '1') _userInfo._userId = _guid();

        _recordingData._hasReadUserCookie = true;
    }

    function _saveUserCookie() {
        if (!_recordingData._hasReadUserCookie)
            return;

        _storeValue('mf_user',
            [
                _userInfo._userId,
                _userInfo._completedFeedbackIds.join('$')
            ].join('|'),
            1, _getBaseDomain(_location));
    }

    function _readSessionCookie() {
        var _sessionCookie = _retrieveValue('mf_' + _config._websiteId).split('|');
        for (var _i = 0; _i < _sessionCookie.length; _i++) {
            var _cookieValue = _sessionCookie[_i];
            switch (_i) {
                case 0: _userInfo._sessionId = _cookieValue; break;
                case 1: _userInfo._last5Pages = _getLastPagesFromString(_cookieValue, _userInfo._pageId); break;
                case 2: _recordingData._lastPageViewTime = parseInt(_cookieValue, 10); break;
                case 3: _recordingData._customVariableHashes = _cookieValue !== '' ? _cookieValue.split('.') : []; break;
                case 4: _userInfo._numberOfPageviews = parseInt(_cookieValue, 10); break;
                case 5: _recordingData._formSubmitPathHash = _cookieValue; break;
                case 6: _recordingData._formSubmitReceived = parseInt(_cookieValue, 10); break;
                case 7: _recordingData._completedFeedbackIds = _cookieValue !== '' ? _cookieValue.split(/[$,]+/) : []; break;
                case 8: _userInfo._returning = _cookieValue === '1'; break;
                case 9: _recordingData._scriptVersion = _cookieValue; break;
                case 10: _userInfo._initialRecordingRate = parseFloat(_cookieValue); break;
            }
        }

        if (!_userInfo._sessionId)
            _userInfo._sessionId = _config.sessionId || _getCrossDomainSessionId();

        if (!_userInfo._initialRecordingRate)
            _userInfo._initialRecordingRate = _getCrossDomainRecordingRate();

        var _lastPage = _userInfo._last5Pages[_userInfo._last5Pages.length - 1];
        if (_lastPage)
            _userInfo._lastPageId = _lastPage._id;

        _recordingData._hasReadSessionCookie = true;
    }

    function _getCrossDomainSessionId() {
        var sessionId = _getCrossDomainSetting();

        return sessionId && sessionId.length === 32
            ? sessionId
            : null;
    }

    function _getCrossDomainRecordingRate() {
        var recordingRate = _getCrossDomainSetting();

        return /^\d+\.\d+$/.test(recordingRate)
            ? parseFloat(recordingRate)
            : null;
    }

    function _getCrossDomainSetting() {
        return _config.crossDomainSupport && _window.name && _window.name.indexOf('mf_' + _config._websiteId) === 0
            ?  _window.name.split('=')[1]
            : null;
    }

    function _saveSessionCookie() {
        if (!_recordingData._hasReadSessionCookie)
            return;

        _storeValue('mf_' + _config._websiteId,
            [
                _userInfo._sessionId,
                _getLastPagesAsString(),
                _recordingData._lastPageViewTime,
                _recordingData._customVariableHashes.join('.'),
                _userInfo._numberOfPageviews,
                _recordingData._formSubmitPathHash || '',
                _recordingData._formSubmitReceived || '',
                _recordingData._completedFeedbackIds.join('$'),
                _userInfo._returning ? '1' : '0',
                _recordingData._scriptVersion,
                _userInfo._initialRecordingRate
            ].join('|'),
            0, _getBaseDomain(_location));

        if (_config.crossDomainSupport)
            _window.name = 'mf_' + _config._websiteId + '=' + (_userInfo._sessionId || _userInfo._initialRecordingRate);
    }

    function _getLastPagesFromString(_value, _pageId) {
        return _value
            .split(/[$,]+/)
            .map(function(_page) {
                var _values = _page.split('.');
                return {
                    _id: _values[0],
                    _pathHash: _values[1],
                    _startTime: +_values[2]
                };
            })
            .filter(function(p) { return p._id !== _pageId })
            .slice(-5);
    }

    function _getLastPagesAsString() {
        var _pages = _userInfo._last5Pages;
        if (_userInfo._pageId) {
            _pages = _pages.concat([{
                _id: _userInfo._pageId,
                _pathHash: _getStringHash(_config.path || _config.location.pathname),
                _startTime: _recordingData._startTime
            }]).slice(-6);
        }

        return _pages.map(function (_page) {
            return _page._id + '.' + _page._pathHash + '.' + _page._startTime;
        }).join('$');
    }

    var _nodePropertiesKey = '__mouseflow_properties__';
    var _nodePropertiesBlacklistKey = 'is-blacklisted';

    function _getNodeProperty(_node, _key) {
        if (!_node)
            return null;

        var _properties = _node[_nodePropertiesKey];

        return _properties
            ? _properties[_key]
            : null;
    }

    function _setNodeProperty(_node, _key, _value, _recursive) {
        var _properties = _node[_nodePropertiesKey];
        if (!_properties)
            _properties = _node[_nodePropertiesKey] = {};

        _properties[_key] = _value;

        if (_recursive && _node.childNodes && _node.childNodes.length) {
            for (var _child = _native._getFirstChild(_node); _child; _child = _native._getNextSibling(_child)) {
                _setNodeProperty(_child, _key, _value, true);
            }
        }
    }

    function _removeNodeProperties(_node) {
        delete _node[_nodePropertiesKey];

        if (_node.childNodes && _node.childNodes.length) {
            for (var _child = _native._getFirstChild(_node); _child; _child = _native._getNextSibling(_child)) {
                _removeNodeProperties(_child);
            }
        }
    }

    function _resetNodeProperties() {
        _removeNodeProperties(_window.document.body);
    }

    function _resetTimers() {
        _recordingData._startTime = +new Date();
        _recordingData._bufferTime = +new Date();
        _moveScrollIntervalFunc = _timer._setInterval(_addMoveScroll, _internalSettings._moveScrollInterval);
        _relativeMoveIntervalFunc = _timer._setInterval(_addRelativeMove, _internalSettings._relativeMoveInterval);
        _pingintervalFunc = _timer._setInterval(_ping, _internalSettings._pingInterval);
        _inactivityFunc = _timer._setTimeout(_timeout, _internalSettings._inactivityTimeoutTime);
    }

    function _canInitialize() {
        if (!_isDomainValid(_config.location.hostname))
            return false;

        if (_isIE8OrOlder()) {
            _log('Recording not started - browser is IE8 or older');
            return false;
        }

        return _recordingCanBegin();
    }

    function _recordingCanBegin() {
        _readCookies();

        if (_config.forceStart)
            return true;

        if (_sessionIdIsInvalidAndNotEmpty()) {
            _log('Recording not started - session ID is invalid.', _getPageViewTime());
            return false;
        }
        if (_isAndHonorsDoNotTrack()) {
            _log('Recording not started - honored "do not track" browser setting.', _getPageViewTime());
            return false;
        }
        if (_isBot()) {
            _log('Recording not started - the browser was identified as a bot.', _getPageViewTime());
            return false;
        }
        if (!_pageMatcher._matchesPage(_pageRules)) {
            _log('Recording not started - page does not match page rules', _getPageViewTime());
            return false;
        }

        var _pageRecordingRule = _pageRecordingRules.filter(function(_pageRule) {
            return _pageMatcher._matchesPageRule(_pageRule);
        }).sort(_sortByHighestRecordingRate)[0];

        if (_pageRecordingRule) {
            _recordingRate = _pageRecordingRule._recordingRate;
            _log('Recording rate set from page recording rule: ' + _pageRecordingRule._type + ', "' + _pageRecordingRule._value + '"', _getPageViewTime());
        }

        if (!_userInfo._initialRecordingRate)
            _userInfo._initialRecordingRate = _getRandomPercentage();

        var _canBegin = _userInfo._sessionId || _userInfo._initialRecordingRate <= _recordingRate;
        if (!_canBegin)
            _log('Recording not started - recordingRate or blocked', _getPageViewTime());

        _saveSessionCookie();

        return _canBegin;
    }

    function _sortByHighestRecordingRate(_firstRule, _secondRule) {
        return _secondRule._recordingRate - _firstRule._recordingRate;
    }

    function _getRandomPercentage() {
        return _math.round(_math.random() * 10000000) / 100000;
    }

    function _isAndHonorsDoNotTrack() {
        return _config.honorDoNotTrack && _userInfo._doNotTrack;
    }

    function _sessionIdIsInvalidAndNotEmpty() {
        return _userInfo._sessionId && _userInfo._sessionId.length != 32;
    }

    function _isBot() {
        if (_config.enableBots)
            return false;

        return _window.navigator.webdriver || /ptst|headlesschrome|lighthouse/i.test(_window.navigator.userAgent);
    }

    function _numberOfPageviewsWithinLimit() {
        return (_userInfo._numberOfPageviews < _internalSettings._pageviewLimit);
    }

    function _getNewPageId(_date) {
        return _padZero(_date.getMonth() + 1, 2) + _padZero(_date.getDate(), 2) + _padZero(_date.getSeconds(), 2) +
            _padZero(_date.getMilliseconds(), 3).slice(1) + _guid();
    }

    function _padZero(_string, _length) {
        return (new Array(_length + 1).join('0') + _string).slice(-_length);
    }

    function _getTimeZone() {
        var _testDate = new Date();
        return _math.max(new Date(_testDate.getFullYear(), 0, 1).getTimezoneOffset(), new Date(_testDate.getFullYear(), 6, 1).getTimezoneOffset());
    }

    var _hasProxied = false;

    function _bindEventHandlers() {
        try {
            _bindScrollEventHandler(_document);
            _captureEvent(_document, 'mousemove', function(_e) {
                _recordingData._currentMousePosition = { x: _e.pageX, y: _e.pageY };
            });
            _captureEventWithExactMatch(_document.documentElement, 'mouseleave', function() {
                _add(_eventType._leaveDocument, {});
                _addFriction(_frictionType._mouseOut);
            });

            _captureEvent(_document, 'mousedown', function(_e) {
                _handleMouseDown(_e, _e.target);
            });
            _captureEvent(_document, 'mouseup', function(_e) {
                _handleMouseUp(_e, _e.target);
            });
            _captureEventWithOptionalFilter(_document, 'click', _getClickSelectors(), function(_e) {
                _handleClick(_e, _e.delegatedTarget || _e.target);
            });

            try {
                var _hoverSelectors = _getHoverSelectors();
                if (_hoverSelectors) {
                    _captureEventWithExactMatch(_document, 'mouseenter', _hoverSelectors, function(_e) {
                        // check if _element matches any custom tagger
                        var _currentTagger = _getMatchingCustomTaggers(_eventType._mouseOver).filter(function(_item) {
                            return _e.delegatedTarget && _e.delegatedTarget.matches(_item._selector);
                        })[0];
                        if (_currentTagger)
                            _tag(_currentTagger._tag);

                        _add(_eventType._mouseOver, {
                            x: _e.pageX,
                            y: _e.pageY,
                            target: _getElementId(_e.target)
                        });
                    });
                    _captureEventWithExactMatch(_document, 'mouseleave', _hoverSelectors, function(_e) {
                        _add(_eventType._mouseOut, {
                            x: _e.pageX,
                            y: _e.pageY,
                            target: _getElementId(_e.target)
                        });
                    });
                }
            } catch (_ex) {
                _log('Error in getHoverSelectors: ' + _ex.message, _getPageViewTime());
            }

            _captureEvent(_document, 'focus', 'input,textarea,select,button', function(_e) {
                _add(_eventType._focus, {
                    target: _getElementId(_e.target)
                });
            });
            _captureEvent(_document, 'blur', 'input,textarea,select,button', function(_e) {
                _add(_eventType._blur, {
                    target: _getElementId(_e.target)
                });
            });
            _captureEvent(_document, 'keypress', 'input,textarea,select', function(_e) {
                if (_e.target && _e.target.type !== 'password') {
                    _add(_eventType._keyPress, {
                        target: _getElementId(_e.target)
                    });
                }
            });
            _captureEvent(_document, 'keydown', 'input,textarea,select', function(_e) {
                if (_e.target && _e.target.type !== 'password') {
                    _add(_eventType._keyDown, {
                        target: _getElementId(_e.target),
                        value: _getMaskedKeyDownCode(_e)
                    });
                }
            });
            _captureEvent(_document, 'keyup', 'input,textarea,select', function(_e) {
                if (_e.target && _e.target.type !== 'password') {
                    _add(_eventType._keyUp, {
                        target: _getElementId(_e.target),
                        value: _getDiffedMaskedValue(_e.target)
                    });
                    if (_isCreditCard(_getElementValue(_e.target)) && _config.autoTagPayments)
                        _tag('payment');
                }
            });
            _captureEvent(_document, 'change', 'input,textarea,select', function(_e) {
                _add(_eventType._change, {
                    target: _getElementId(_e.target),
                    value: _getMaskedElementValue(_e.target)
                });
                if (_e.target && ['password', 'file'].indexOf(_e.target.type) === -1 && _isCreditCard(_getElementValue(_e.target)) && _config.autoTagPayments)
                    _tag('payment');
            });
            _bindSubmitEventHandler(_document);

            if (_userInfo._hasTouch) {
                _captureEvent(_document, 'touchstart', function(_e) {
                    var _touches = _e.touches;
                    if (_touches.length > 0) {
                        _add(_eventType._touchStart, {
                            x: _touches[0].pageX,
                            y: _touches[0].pageY
                        });
                    }
                    if (_touches.length > 1) {
                        _add(_eventType._touchStart2, {
                            x: _touches[1].pageX,
                            y: _touches[1].pageY
                        });
                    }
                });
                _captureEvent(_document, 'touchmove', function(_e) {
                    var _touches = _e.touches;
                    var _pageViewTime = _getPageViewTime();
                    var _moveScrollTime = _pageViewTime - _internalSettings._moveScrollInterval;

                    if (_touches.length > 0 && _recordingData._lastTouchMoveEventTime < _moveScrollTime) {
                        _add(_eventType._touchMove, {
                            x: _touches[0].pageX,
                            y: _touches[0].pageY
                        });

                        if (_touches.length > 1) {
                            _add(_eventType._touchMove2, {
                                x: _touches[1].pageX,
                                y: _touches[1].pageY
                            });
                        }

                        _recordingData._lastTouchMoveEventTime = _pageViewTime;

                        var _viewPortPositionHasChanged = !_hasSamePosition(_getViewport(), _recordingData._lastViewport);

                        if (_viewPortPositionHasChanged) {
                            _recordingData._lastViewport = _getViewport();
                            _add(_eventType._resize, _recordingData._lastViewport);

                            // Register resize - needed to update viewport values while resizing
                            if (_recordingData._lastResizeEventTime < _moveScrollTime) {
                                _add(_eventType._resize, _recordingData._lastViewport); // TODO: check if this line can be removed
                                _recordingData._lastResizeEventTime = _pageViewTime;
                            }
                        }

                        // Register scroll - needed to update scroll values while scrolling (though not possible with elastic scroll)
                        _recordingData._currentScroll = { x: _window.pageXOffset, y: _window.pageYOffset };
                        if (_recordingData._lastScrollEventTime < _moveScrollTime && !_hasSamePosition(_recordingData._currentScroll, _recordingData._lastScroll)) {
                            _recordingData._lastScroll = _recordingData._currentScroll;
                            _add(_eventType._scroll, _recordingData._currentScroll);
                            _recordingData._lastScrollEventTime = _pageViewTime;
                        }
                    }
                });
                _captureEvent(_document, 'touchend', function(_e) {
                    var _touches = _e.touches;
                    if (_touches.length === 0)
                        _add(_eventType._touchEnd, { x: 0, y: 0 });
                    if (_touches.length > 1)
                        _add(_eventType._touchEnd2, { x: 0, y: 0 });
                });

                if (_window.screen.orientation) {
                    _captureEvent(_window.screen.orientation, 'change', function() {
                        _add(_eventType._orientationChange, {
                            x: _window.screen.orientation.angle,
                            y: 0
                        });
                    });
                }
            }

            _captureEvent(_window, _getUnloadEventName(), function() {
                _stop();
            });

            var _oldOnError = _window.onerror;
            _window.onerror = function(_msg, _url, _line, _col, _err) {
                var _timeSinceLastError = new Date() - _recordingData._lastErrorTime;
                if (_timeSinceLastError > 1000 && _recordingData._javascriptErrorIndex < 50) {
                    _recordingData._lastErrorTime = +new Date();

                    var _errorMessage = 'Malformed error';
                    if (_msg && _msg.message)
                        _errorMessage = _msg.message;
                    else if (typeof _msg === 'string')
                        _errorMessage = _msg;

                    _recordingData._lastError = {
                         _msg: _errorMessage,
                         _url: typeof _url === 'string' ? _url : 'Malformed URL',
                         _line: '' + _line,
                         _col: '' + _col,
                         _stack: _err && _err.stack && _err.stack.substring(0, 800),
                         _errorTime: _recordingData._lastErrorTime
                    };

                    // Send error immediately if a recent click has been registered
                    if (_recordingData._lastClickTime !== 0 &&
                        _recordingData._lastErrorTime - _recordingData._lastClickTime < 100) {
                        _addFriction(_frictionType._clickError, _recordingData._lastClickTarget);
                        _feedbackWidget._triggerEvent('clickError');
                        _sendLastError();
                    }
                }
                if (_oldOnError)
                    _oldOnError.apply(this, arguments);
            };

            if (!_hasProxied) {
                if (_config.proxyAttachShadow)
                    _proxyAttachShadow();

                _proxyAdoptedStyleSheets();
                _proxyInsertRule();

                if (_config.enableSpa) {
                    _spa.proxyPushState(_newPageView);
                }

                if (_config.proxyValueSetter)
                    _proxyValueSetter();

                _hasProxied = true;
            }

            if (_config.keyLogging)
                _listenForTextChanges();
        } catch (_ex) {
            _log('Error in bindDomEvents: ' + _ex.message, _getPageViewTime());
        }
    }

    function _bindScrollEventHandler(_root) {
        _captureEventWithOptionalFilter(_root, 'scroll', 'body,div,section,main,article,ul,.mf-scroll-listen', function(_e) {
            if (_e.target === _document) {
                _recordingData._currentScroll = { x: _window.pageXOffset, y: _window.pageYOffset };
            } else if (_e.target === _mainScrollElement) {
                _recordingData._currentScroll = { x: _e.target.scrollLeft, y: _e.target.scrollTop };
            } else {
                _handleElementScroll(_getElementId(_e.target), _e.target.scrollLeft, _e.target.scrollTop);
            }
        });
    }

    function _bindSubmitEventHandler(_root) {
        _captureEvent(_root, 'click', '.mf-form-button', function(_e) {
            _registerSubmit(_getElementId(_getParentForm(_e.target)));
        });
        _captureEvent(_root, 'submit', 'form', function(_e) {
            _registerSubmit(_getElementId(_e.target));
        });
    }

    function _captureEvent(_target, _eventType, _filter, _callback) {
        _eventListener._on(_target, _eventType, _filter, _callback, {
            _capture: true
        });
    }

    function _captureEventWithExactMatch(_target, _eventType, _filter, _callback) {
        _eventListener._on(_target, _eventType, _filter, _callback, {
            _capture: true,
            _exactMatch: true
        });
    }

    function _captureEventWithOptionalFilter(_target, _eventType, _filter, _callback) {
        _eventListener._on(_target, _eventType, _filter, _callback, {
            _capture: true,
            _optionalFilter: true
        });
    }

    function _proxyInsertRule() {
        var _oldInsertRule = CSSStyleSheet.prototype.insertRule;
        var _insertRuleTimeoutId;
        var _insertRuleNodes = [];
        CSSStyleSheet.prototype.insertRule = function() {
            _oldInsertRule.apply(this, arguments);

            if (!_isDomObserverInitialized)
                return;

            var _node = this.ownerNode;
            if (_insertRuleNodes.indexOf(_node) < 0)
                _insertRuleNodes.push(_node);

            _timer._clearTimeout(_insertRuleTimeoutId);
            _insertRuleTimeoutId = _timer._setTimeout(function() {
                _insertRuleNodes = _insertRuleNodes.filter(function(_node) {
                    return _node && _mirrorClient.isKnownNode(_node);
                });

                _mirrorClient.applyChanged([{
                    characterDataChanged: _insertRuleNodes
                }]);

                _insertRuleNodes = [];
            }, 200);
        };
    }

    var _oldAttachShadow = HTMLElement.prototype.attachShadow;
    var _hasProxiedAttachShadow = false;

    function _waitForAttachShadowProxy() {
        var _startTime = new Date();

        var _waitInterval = _window.setInterval(function() {
            var _waitTime = new Date() - _startTime;

            if (HTMLElement.prototype.attachShadow !== _oldAttachShadow || _waitTime > 10000) {
                _window.clearInterval(_waitInterval);
                _proxyAttachShadow();
            }
        }, 200);
    }

    function _resetAttachShadow() {
        if (!_hasProxiedAttachShadow || HTMLElement.prototype.attachShadow !== _attachShadow)
            return;

        _log('Resetting "attach shadow" proxy');
        delete HTMLElement.prototype.attachShadow;
        _hasProxiedAttachShadow = false;
    }

    function _proxyAttachShadow() {
        if (_hasProxiedAttachShadow)
            return;

        if (!_isDomObserverInitialized) {
            _window.setTimeout(_proxyAttachShadow, 200);
            return;
        }

        _log('Setting up "attach shadow" proxy');
        _observeShadowRoot(_document.body);
        _oldAttachShadow = HTMLElement.prototype.attachShadow;
        HTMLElement.prototype.attachShadow = _attachShadow;
        _hasProxiedAttachShadow = true;
    }

    function _attachShadow() {
        var _shadow = _oldAttachShadow.apply(this, arguments);

        if (_isDomObserverInitialized && _mirrorClient.isKnownNode(this)) {
            _bindScrollEventHandler(_shadow);
            _bindSubmitEventHandler(_shadow);
            _mirrorClient.addShadowRoot(_shadow);
        }

        return _shadow;
    }

    function _observeShadowRoot(_element) {
        for (; _element; _element = _element.nextElementSibling) {
            if (_element.shadowRoot) {
                _bindScrollEventHandler(_element.shadowRoot);
                _bindSubmitEventHandler(_element.shadowRoot);
                _mirrorClient.addShadowRoot(_element.shadowRoot);
                _observeShadowRoot(_element.shadowRoot.firstElementChild);
            }

            _observeShadowRoot(_element.firstElementChild);
        }
    }

    function _proxyAdoptedStyleSheets() {
        if (!_isDomObserverInitialized) {
            _window.setTimeout(_proxyAdoptedStyleSheets, 200);
            return;
        }

        _proxyProperty(Document.prototype, 'adoptedStyleSheets', {
            _set: _adoptedStyleSheetsChanged
        });
        _proxyProperty(ShadowRoot.prototype, 'adoptedStyleSheets', {
            _set: _adoptedStyleSheetsChanged
        });
    }

    function _adoptedStyleSheetsChanged() {
        if (!_isDomObserverInitialized)
            return;

        _mirrorClient.applyChanged([{
            attributeChanged: {
                'mf_adoptedStyleSheets': [this]
            }
        }]);
    }

    function _proxyValueSetter() {
        if (!_isDomObserverInitialized) {
            _window.setTimeout(_proxyValueSetter, 200);
            return;
        }

        _proxyProperty(HTMLInputElement.prototype, 'value', {
            _set: _valueChanged
        });
        _proxyProperty(HTMLTextAreaElement.prototype, 'value', {
            _set: _valueChanged
        });
        _proxyProperty(HTMLSelectElement.prototype, 'value', {
            _set: _valueChanged
        });
    }

    function _valueChanged() {
        if (!_mirrorClient.isKnownNode(this))
            return;

        _mirrorClient.applyChanged([{
            attributeChanged: {
                'value': [this]
            }
        }]);
    }

    function _proxyProperty(_node, _property, _descriptor) {
        var _propertyDescriptor = Object.getOwnPropertyDescriptor(_node, _property);
        if (!_descriptor || !_propertyDescriptor)
            return;

        Object.defineProperty(_node, _property, {
            get: function() {
                var _value = _propertyDescriptor.get.apply(this, arguments);

                if (_descriptor._get)
                    _descriptor._get.apply(this, arguments);

                return _value;
            },
            set: function() {
                _propertyDescriptor.set.apply(this, arguments);

                if (_descriptor._set)
                    _descriptor._set.apply(this, arguments);
            }
        });
    }

    function _sendLastError() {
        if (_recordingData._lastError) {
            _recordingData._javascriptErrorIndex++;

            var _params = 'website=' + _config._websiteId + '&session=' + _userInfo._sessionId + '&page=' + _userInfo._pageId +
                '&type=error&data=' + _encodeUriComponent(_helper._jsonStringify({
                    seq: _recordingData._javascriptErrorIndex,
                    errorMsg: _recordingData._lastError._msg,
                    url: _recordingData._lastError._url,
                    line: _recordingData._lastError._line,
                    col: _recordingData._lastError._col,
                    stack: _recordingData._lastError._stack,
                    errorTime: _recordingData._lastErrorTime
                }));

            _add(_eventType._error, { x: _recordingData._javascriptErrorIndex, y: 0 });
            _log('JS error ' + _recordingData._javascriptErrorIndex + ', msg: ' + _recordingData._lastError._msg, _getPageViewTime());
            _transmitCrossDomain({ _url: _baseUrl + 'data', _data: _params });
            _recordingData._lastError = null;
        }
    }

    function _unbindEventHandlers() {
        _eventListener._removeAll();
        if (_inputChangeTimer)
            _timer._clearInterval(_inputChangeTimer);
    }

    function _listenForTextChanges() {
        _recordingData._inputs = _getInputs();
        _inputChangeTimer = _timer._setInterval(function() {
            _fireChangeEvent(_getChangedInputs(_getInputs(), _recordingData._inputs));
        }, 200);
    }

    function _getInputs() {
        var _inputFields = _document.querySelectorAll('input,textarea,select');
        var _textInputs = {};
        for (var i = 0; i < _inputFields.length; i++) {
            var _field = _inputFields[i];
            if (_helper._hasClass(_field, 'no-mouseflow'))
                continue;
            if (!_matchesType(_field, ['text', 'textarea', 'select-one']))
                continue;

            _textInputs[_getElementId(_field)] = _getMaskedElementValue(_field);
        }
        return _textInputs;
    }

    function _matchesType(_field, _typeList) {
        return _field.type && new RegExp(_typeList.join('|'), 'i').test(_field.type);
    }

    function _getChangedInputs(_inputs, _originalInputs) {
        var _changedInputs = [];
        for (var _key in _inputs) {
            var _value = _inputs[_key];
            var _originalValue = _originalInputs[_key];
            if (_originalValue !== undefined && _originalValue !== _value)
                _changedInputs.push({ id: _key, value: _value });
            _originalInputs[_key] = _value;
        }
        return _changedInputs;
    }

    function _fireChangeEvent(_changedInputs) {
        if (_getPageViewTime() - _recordingData._lastChangeOrKeyEvent > 100) {
            for (var i = 0; i < _changedInputs.length; i++) {
                var _input = _changedInputs[i];
                _add(_eventType._change, {
                    target: _input.id,
                    value: _input.value
                });
            }
        }
    }

    function _handleMouseDown(_e, _element) {
        if ((+new Date()) - _recordingData._lastMouseDownTime < 20) return;
        _recordingData._lastMouseDownTime = +new Date();
        _add(_eventType._mouseDown, {
            x: _e.pageX,
            y: _e.pageY,
            target: _getElementId(_element)
        });
    }

    function _handleMouseUp(_e, _element) {
        if ((+new Date()) - _recordingData._lastMouseUpTime < 20) return;
        _recordingData._lastMouseUpTime = +new Date();
        var _relativePosition = _getRelativePosition(_element, _e.pageX, _e.pageY);

        if (!_relativePosition && _element.firstElementChild)
            _relativePosition = _getRelativePosition(_element.firstElementChild, _e.pageX, _e.pageY);

        if (_relativePosition)
            _add(_eventType._mouseUp, {
                x: _relativePosition.x,
                y: _relativePosition.y,
                target: _getElementId(_element)
            });
    }

    function _handleClick(_e, _element) {
        if ((+new Date()) - _recordingData._lastClickTime < 20) return;

        var _target = _getElementId(_element);
        _recordingData._lastClickTime = +new Date();
        _recordingData._lastClickTarget = _target;
        _add(_eventType._click, {
            x: _e.pageX,
            y: _e.pageY,
            target: _target
        });

        _recordingData._last5ClickTimes.push(_recordingData._lastClickTime);
        _recordingData._last5ClickTimes = _recordingData._last5ClickTimes.slice(-5);
        if (_recordingData._last5ClickTimes[4] - _recordingData._last5ClickTimes[0] < 1000) {
            _addFriction(_frictionType._clickRage, _target);
            _feedbackWidget._triggerEvent('clickRage');
        }

        if (_recordingData._lastClickTime !== 0 && _recordingData._lastErrorTime !== 0 &&
            _recordingData._lastClickTime - _recordingData._lastErrorTime < 100) {

            _addFriction(_frictionType._clickError, _target);
            _feedbackWidget._triggerEvent('clickError');
            _sendLastError();
        }

        var _currentTagger = _getMatchingCustomTaggers(_eventType._click).filter(function(_item) {
            return _element.matches(_item._selector);
        })[0];
        
        if (_currentTagger) {
            _tag(_currentTagger._tag);

            if (_currentTagger._pushPageviewUrl)
                _newPageView(_currentTagger._pushPageviewUrl);
        }
    }

    function _handleElementScroll(_id, _left, _top) {
        _recordingData._lastElementScroll[_id] = { x: _left, y: _top };

        if (_elementScrollTimer) return;

        _elementScrollTimer = _timer._setTimeout(_processLastElementScroll, 100);

        function _processLastElementScroll() {
            _elementScrollTimer = null;
            var _isEmpty = true;
            for (var _target in _recordingData._lastElementScroll) {
                if (_recordingData._lastElementScroll.hasOwnProperty(_target)) {
                    _add(_eventType._elementScroll, {
                        x: _recordingData._lastElementScroll[_target].x,
                        y: _recordingData._lastElementScroll[_target].y,
                        target: _target
                    });
                    _isEmpty = false;
                }
            }
            if (!_isEmpty) {
                _recordingData._lastElementScroll = {};
                _elementScrollTimer = _timer._setTimeout(_processLastElementScroll, 100);
            }
        }
    }

    function _getRelativePosition(_node, _x, _y) {
        var _rect = _getBoundingRect(_node);
        if (_rect == null || !_rect.height || !_rect.width)
            return null;

        return {
            x: parseInt((_x - _recordingData._currentScroll.x - _rect.x) / parseFloat(_rect.width) * 65535),
            y: parseInt((_y - _recordingData._currentScroll.y - _rect.y) / parseFloat(_rect.height) * 65535)
        };
    }

    function _getClickSelectors() {
        var _clickSelectorList = ['a','input','select','button','.mf-listen-click'];

        _clickSelectorList.push.apply(_clickSelectorList, _customTaggersToSelectors(_getMatchingCustomTaggers(_eventType._click)));

        return _clickSelectorList.slice(0, 1000).join(',');
    }

    function _getHoverSelectors() {
        var _selectorSet = {};
        var _pattern = /[^(]:hover/;

        if (_config.useAllHoverSelectors) {
            for (var _i = 0; _i < _document.styleSheets.length; _i++) {
                var _styleSheet = _document.styleSheets[_i];
                try {
                    var _cssRules = _styleSheet.cssRules ? _styleSheet.cssRules : _styleSheet.rules;
                    for (var _j = 0; _j < _cssRules.length; _j++) {
                        var _rule = _styleSheet.cssRules[_j];
                        if (!_pattern.test(_rule.selectorText))
                            continue;
                        var _selectorList = _rule.selectorText.split(',');
                        var _selector;
                        for (var _k = 0; _k < _selectorList.length; _k++) {
                            _selector = _selectorList[_k].replace(/^\s+|\s+$/g, ''); // IE8-safe trim
                            if (_pattern.test(_selector)) {
                                _selector = _selector.substring(0, _selector.indexOf(':hover'));
                                _selector = _removePseudoClassesAndElements(_selector);
                                _selectorSet[_selector] = true;
                            }
                        }
                    }
                } catch (_ex) {
                    _log('Cannot inspect external css file, :hover support may fail: ' + _styleSheet.href);
                }
            }
        }

        var _selectorList = ['a', 'input', 'select', 'button', 'textarea', 'li', 'canvas', '.mf-listen'];
        for (_selector in _selectorSet) {
            _selector = _selector.replace(/^\s+|\s+$/g, ''); // IE8-safe trim
            if (_selector != '' && _selector != 'a' && !_endsWith(_selector, ' a') && !_endsWith(_selector, ' select')
                    && !_endsWith(_selector, ' submit') && !_endsWith(_selector, ' textarea') && !_endsWith(_selector, ' li'))
                _selectorList.push(_selector);
        }

        _selectorList.push.apply(_selectorList, _config._cssSelectorTracked);

        _selectorList.push.apply(_selectorList, _customTaggersToSelectors(_getMatchingCustomTaggers(_eventType._mouseOver)));
        
        return _selectorList.slice(0, 1000).join(',');
    }

    function _getMatchingCustomTaggers(_currentEventType) {
        var _eventTypeToString = {
            5: 'Click',
            6: 'Mouseover'
        };
        var _matchingTaggers = _config._customTaggers.filter(function(_item) {
            return _item._event === _eventTypeToString[_currentEventType] && (!_item._pageUrl || _item._pageUrl === _config.location.href);
        });

        return _matchingTaggers;
    }

    function _customTaggersToSelectors(_matchingTaggers) {
        return _matchingTaggers.map(function(_item) {
            return _item._selector;
        });
    }

    function _removePseudoClassesAndElements(_input) {
        var _pseudoArray = [/:active/g, /:visited/g, /::before/g, /:before/g, /::after/g, /:after/g, /::first-letter/g, /::first-line/g, /::selection/g];
        for (var _i = 0; _i < _pseudoArray.length; _i++)
            _input = _input.replace(_pseudoArray[_i], '');
        return _input;
    }

    function _encodeUriComponent(_uriComponent) {
        try {
            return _window.encodeURIComponent(_uriComponent);
        } catch (_ex) {
            _log('Encode error: ' + _ex.message, _getPageViewTime());
            return '';
        }
    }

    function _encodeDomDelimiter(_value) {
        return _value.replace(/%/g, '%25').replace(/\|{3}/g, '%7C%7C%7C');
    }

    function _add(_type, _details) {
        if (!_isStarted)
            return;

        if (_recordingData._data.length === 0)
            _recordingData._bufferTime = +new Date();

        var _eventData = _getEventData(_type, _details, _recordingData._elementIds, _recordingData._values);
        if (!_eventData)
            return;

        if (_isInteractionEvent(_type)) {
            _timer._clearTimeout(_inactivityFunc);
            _inactivityFunc = _timer._setTimeout(_timeout, _internalSettings._inactivityTimeoutTime);
            _recordingData._lastUserInteraction = _getPageViewTime();
            _recordingData._lastPageViewTime = +new Date();
        }

        if (_isKeyOrChangeEvent(_type))
            _recordingData._lastChangeOrKeyEvent = _getPageViewTime();

        var _newIdLength = _getSize(_recordingData._newIds) + (_eventData._newId ? _base64String.encode(_eventData._newId).length : 0),
            _valueLength = _getSize(_recordingData._values) + (_eventData._value ? _base64String.encode(_eventData._value).length : 0);

        var totalDataSize = _recordingData._data.length + _eventData._data.length + _newIdLength + _valueLength;
        if (totalDataSize > _internalSettings._maxCharsToSendInUrl) {
            _save();

            if (_eventData._value !== undefined)
                _eventData._data[_eventData._data.length - 1] = 0; // reset value index

            _recordingData._data = _eventData._data;
            _recordingData._data[0] = 0;
            _recordingData._data[1] = 0;
            if (_eventData._newId !== undefined) _recordingData._newIds.push(_eventData._newId);
            if (_eventData._value !== undefined) _recordingData._values.push(_eventData._value);
        } else {
            _recordingData._data = _recordingData._data.concat(_eventData._data);
            if (_eventData._newId !== undefined) _recordingData._newIds.push(_eventData._newId);
            if (_eventData._value !== undefined) _recordingData._values.push(_eventData._value);

            if (_type === _eventType._touchEnd /* Always send after touch-end due to missing unload event in mobile */) {
                _save();
            }
        }
    }

    function _addEventsToPreviousPageview(_events) {
        _addEventsToPageview(_userInfo._lastPageId, _events);
    }

    function _addEventsToPageview(_pageId, _events) {
        var _data = [],
            _elementIds = [],
            _newIds = [],
            _values = [];

        _events.forEach(function(_event) {
            if (!_event._details)
                _event._details = {};

            var _eventData = _getEventData(_event._type, _event._details, _elementIds, _values);
            if (!_eventData)
                return;

            _data = _data.concat(_eventData._data);
            if (_eventData._newId !== undefined)
                _newIds.push(_eventData._newId);
            if (_eventData._value !== undefined)
                _values.push(_eventData._value);
        });

        var _offsetTime = 0;
        var _chunk = _getDataChunk(_offsetTime, _data, _newIds, _values);

        _transmitCrossDomain({
            _url: _baseUrl + 'events?w=' + _config._websiteId + '&s=' + _userInfo._sessionId + '&p=' + _pageId + '&li=0&lh=0&ls=0&d=' + _chunk
        });
    }

    function _getEventData(_type, _details, _elementIds, _values) {
        var _newId;
        var _value = _details.value;
        var _targetId = -1;
        var _data = [];
        _data._overflow = false;

        if (_eventMustHaveXAndY(_type) && !_xAndYAreValid(_details))
            return null;

        if (_details.value && _details.value.length > _internalSettings._maxCharsToSendInUrl) {
            _log('Event, type: ' + _type + ', skipping due to large value, details: ' + _helper._jsonStringify(_details), _getPageViewTime());
            return null;
        }

        _pushBytes(2, _getTimeInCurrentChunk(), _data);
        _pushBytes(1, _type, _data);

        if (_details.x < 0) _details.x = 0;
        if (_details.y < 0) _details.y = 0;
        if (_details.x > 65534) _details.x = 65534;
        if (_details.y > 65534) _details.y = 65534;
        if (_details.x != undefined) _pushBytes(2, _details.x, _data);
        if (_details.y != undefined) _pushBytes(2, _details.y, _data);

        if (_details.target != undefined) {
            if (typeof _details.target == 'object' && _details.target.id != undefined)
                _details.target = _details.target.id;

            if (_type !== _eventType._tag && _details.target && _details.target.indexOf('||') === -1) {
                var _element = _getElementById(_details.target);
                if (_element){
                    if (_isElementBlacklisted(_element))
                        return null;

                    var _form = _getParentForm(_element);
                    if (_form && !_isElementBlacklisted(_form))
                        _details.target = _getElementId(_form) + '||' + _details.target;
                }
            }

            for (var _i = 0; _i < _elementIds.length; _i++) {
                if (_elementIds[_i] === _details.target) {
                    _targetId = _i;
                    break;
                }
            }
        }

        if (_eventMustHaveTarget(_type)) {
            if (!_details.target) {
                _pushBytes(2, 65535, _data);
            } else if (_targetId === -1) {
                var _elementIdIndex = _elementIds.length;
                _pushBytes(2, _elementIdIndex, _data);
                _newId = _elementIdIndex + ':' + _details.target;
                _elementIds.push(_details.target);
            } else {
                _pushBytes(2, _targetId, _data);
            }
        }

        if (_type !== _eventType._mouseMove && _type !== _eventType._relativeMouseMove)
            _log('Event, type: ' + _type + ', time: ' + _getPageViewTime() + ', details: ' + _helper._jsonStringify(_details), _getPageViewTime());

        if (_eventMustHaveValue(_type)) {
            if (_value instanceof Array) _value = _value.join(', ');
            _pushBytes(1, _values.length, _data);
        }

        if (_data._overflow) {
            _log('Event, type: ' + _type + ', skipping due to overflow in temp data, details: ' + _helper._jsonStringify(_details), _getPageViewTime());
            return null;
        }

        return {
            _data: _data,
            _newId: _newId,
            _value: _value
        };
    }

    function _getTimeInCurrentChunk() {
        return +new Date() - _recordingData._bufferTime;
    }

    function _getReadyTime() {
        return _window.performance && _window.performance.timing.domLoading > 0
            ? _recordingData._startDateTime - _window.performance.timing.domLoading
            : 0;
    }

    function _getLoadTime() {
        return _window.performance && _window.performance.timing.loadEventStart > 0 && _window.performance.timing.fetchStart > 0
            ? _window.performance.timing.loadEventStart - _window.performance.timing.fetchStart
            : 0;
    }

    function _eventMustHaveXAndY(_type) {
        return [
            _eventType._resize,
            _eventType._scroll,
            _eventType._mouseMove,
            _eventType._mouseDown,
            _eventType._mouseUp,
            _eventType._click,
            _eventType._mouseOver,
            _eventType._mouseOut,
            _eventType._load,
            _eventType._error,
            _eventType._touchStart,
            _eventType._touchMove,
            _eventType._touchEnd,
            _eventType._orientationChange,
            _eventType._touchStart2,
            _eventType._touchMove2,
            _eventType._touchEnd2,
            _eventType._touchDoubleTap,
            _eventType._touchSwipe,
            _eventType._touchHold,
            _eventType._touchTransform,
            _eventType._touchDrag,
            _eventType._domMutation,
            _eventType._elementScroll,
            _eventType._relativeMouseMove,
            _eventType._friction
        ].indexOf(_type) !== -1;
    }

    function _xAndYAreValid(_details) {
        return _details.x !== undefined && _details.y !== undefined && !isNaN(_details.x) && !isNaN(_details.y);
    }

    function _eventMustHaveTarget(_type) {
        return [
            _eventType._mouseDown,
            _eventType._mouseUp,
            _eventType._click,
            _eventType._mouseOver,
            _eventType._mouseOut,
            _eventType._keyPress,
            _eventType._keyUp,
            _eventType._change,
            _eventType._focus,
            _eventType._blur,
            _eventType._submit,
            _eventType._tag,
            _eventType._touchDoubleTap,
            _eventType._touchHold,
            _eventType._touchDrag,
            _eventType._keyDown,
            _eventType._blankFieldSubmit,
            _eventType._changedFieldSubmit,
            _eventType._elementScroll,
            _eventType._relativeMouseMove,
            _eventType._friction
        ].indexOf(_type) !== -1;
    }

    function _eventMustHaveValue(_type) {
        return [
            _eventType._keyUp,
            _eventType._change,
            _eventType._keyDown,
            _eventType._friction
        ].indexOf(_type) !== -1;
    }

    function _isInteractionEvent(_type) {
        return _isMouseEvent(_type) || _isKeyOrChangeEvent(_type) || _isTouchEvent(_type);
    }

    function _isMouseEvent(_type) {
        return [
            _eventType._mouseMove,
            _eventType._mouseDown,
            _eventType._mouseUp,
            _eventType._click,
            _eventType._scroll,
            _eventType._mouseOver,
            _eventType._mouseOut,
            _eventType._relativeMouseMove
        ].indexOf(_type) !== -1;
    }

    function _isKeyOrChangeEvent(_type) {
        return [
            _eventType._keyPress,
            _eventType._keyUp,
            _eventType._change,
            _eventType._keyDown
        ].indexOf(_type) !== -1;
    }

    function _isTouchEvent(_type) {
        return [
            _eventType._touchStart,
            _eventType._touchMove,
            _eventType._touchEnd,
            _eventType._orientationChange,
            _eventType._touchStart2,
            _eventType._touchMove2,
            _eventType._touchEnd2,
            _eventType._touchDoubleTap,
            _eventType._touchSwipe,
            _eventType._touchHold,
            _eventType._touchTransform,
            _eventType._touchDrag
        ].indexOf(_type) !== -1;
    }

    function _addMoveScroll() {
        if (!_hasSamePosition(_getViewport(), _recordingData._lastViewport)) {
            _recordingData._lastViewport = _getViewport();
            _add(_eventType._resize, _recordingData._lastViewport);
            _recordingData._lastResizeEventTime = _getPageViewTime();
        }

        if (!_hasSamePosition(_recordingData._currentMousePosition, _recordingData._lastMousePosition)) {
            _recordingData._lastMousePosition = _recordingData._currentMousePosition;
            _add(_eventType._mouseMove, _recordingData._currentMousePosition);
        }

        if (!_hasSamePosition(_recordingData._currentScroll, _recordingData._lastScroll)) {
            _recordingData._lastScroll = _recordingData._currentScroll;
            _add(_eventType._scroll, _recordingData._currentScroll);
            _recordingData._lastScrollEventTime = _getPageViewTime();
        }
    }

    function _addRelativeMove() {
        if (!_hasSamePosition(_recordingData._currentMousePosition, _recordingData._lastRelativeMousePosition)) {
            _recordingData._lastRelativeMousePosition = _recordingData._currentMousePosition;

            var _nodeFromPoint = _document.elementFromPoint(
                _recordingData._currentMousePosition.x - _recordingData._currentScroll.x,
                _recordingData._currentMousePosition.y - _recordingData._currentScroll.y);

            var _relativePosition = _getRelativePosition(_nodeFromPoint, _recordingData._currentMousePosition.x, _recordingData._currentMousePosition.y);
            if (_relativePosition) {
                _add(_eventType._relativeMouseMove, {
                    x: _relativePosition.x,
                    y: _relativePosition.y,
                    target: _getElementId(_nodeFromPoint)
                });
            }
        }
    }

    function _save() {
        var _offsetTime = _recordingData._bufferTime - _recordingData._startTime;
        var _chunk = _getDataChunk(_offsetTime, _recordingData._data, _recordingData._newIds, _recordingData._values);
        _recordingData._chunks.push(_chunk);

        _recordingData._data = [];
        _recordingData._values = [];
        _recordingData._newIds = [];
        _recordingData._bufferTime = +new Date();

        if (_getPageViewTime() > _internalSettings._maximumPageViewTime) {
            _log('Pageview over max.time, stopping.', _getPageViewTime());
            _unbindEventHandlers();
            _timer._clearInterval(_moveScrollIntervalFunc);
            _timer._clearInterval(_relativeMoveIntervalFunc);
            _timer._clearInterval(_pingintervalFunc);
            _timer._clearTimeout(_inactivityFunc);
            _isRecording = false;
        } else {
            _transmit();
        }
    }

    function _getDataChunk(_offsetTime, _data, _newIds, _values) {
        var _tempData = [];
        _pushBytes(3, _offsetTime, _tempData);
        _pushBytes(2, _data.length, _tempData);
        _tempData = _tempData.concat(_data);

        return _base64.e(_tempData) + '.' + _getValues(_newIds || []) + '.' + _getValues(_values || []);
    }

    function _transmit() {
        if (_isRecording && _recordingData._chunks.length > 0) {
            if (_recordingData._sequence == 1) {
                _userInfo._numberOfPageviews++;
            }

            var _queue = _userInfo._hasSessionStorage
                ? _getTransmitQueue()
                : [];

            for (var _i = 0; _i < _recordingData._chunks.length; _i++) {
                _queue.push({
                    _url: _baseUrl + 'events?w=' + _config._websiteId + '&s=' + _userInfo._sessionId + '&p=' + _userInfo._pageId + '&q=' + _recordingData._sequence +
                        '&li=' + _recordingData._userInteractionBeforeLastEventPackage + '&lh=' + _recordingData._viewportHeightBeforeLastEventPackage +
                        '&ls=' + _recordingData._scrollBeforeLastEventPackage + '&d=' + _recordingData._chunks[_i]
                });
                _recordingData._sequence++;
                _recordingData._userInteractionBeforeLastEventPackage = _recordingData._lastUserInteraction;
                _recordingData._viewportHeightBeforeLastEventPackage = _recordingData._lastViewport.y;
                _recordingData._scrollBeforeLastEventPackage = _recordingData._lastScroll.y;
            }

            _recordingData._chunks = [];

            if (_userInfo._hasSessionStorage && _setTransmitQueue(_queue.slice(-10))) {
                _transmitFromQueue();
            } else {
                for (var _i = 0; _i < _queue.length; _i++) {
                    _transmitCrossDomain(_queue[_i]);
                }
            }

            if (_recordingData._sequence > _internalSettings._chunkLimit)
                _stop();
        }
    }

    function _transmitFromQueue() {
        if (_recordingData._isTransmitting)
            return;

        var _options = _getTransmitQueue().slice(0, 1)[0];
        if (_options) {
            _recordingData._isTransmitting = true;
            _options._success = _options._error = function() {
                _setTransmitQueue(_getTransmitQueue().slice(1));
                _recordingData._isTransmitting = false;
                _timer._setTimeout(_transmitFromQueue, 1);
            };
            _transmitCrossDomain(_options);
        }
    }

    function _getTransmitQueue() {
        return _sessionStorage._getJson('mf_transmitQueue') || [];
    }

    function _setTransmitQueue(_queue) {
        return _sessionStorage._setJson('mf_transmitQueue', _queue);
    }

    function _transmitCrossDomain(_options) {
        if (!_options || !_options._url) return;

        _saveCookies();

        if (_isIE9OrOlder() && _window.XDomainRequest) {
            _sendXDR(_options);
        } else if (_window.XMLHttpRequest) {
            if (_options._data && _options._compress) {
                var _compressFunction = _config.compressFunction || _compress;
                _compressFunction(_options._data, function(_data) {
                    _options._data = _data;
                    _options._url = _addGZipParameterIfNeeded(_options._url, '1');
                    _sendXHR(_options);
                }, function() {
                    _options._url = _addGZipParameterIfNeeded(_options._url, '0');
                    _sendXHR(_options);
                });
            } else {
                _options._url = _addGZipParameterIfNeeded(_options._url, '0');
                _sendXHR(_options);
            }
        }
    }

    function _sendXDR(_options) {
        try {
            _options._url = _forceSameProtocol(_addGZipParameterIfNeeded(_options._url, '0'));

            var _xdr = new _window.XDomainRequest();
            _xdr.open(_options._data ? 'POST' : 'GET', _options._url);
            _xdr.onload = function() {
                if (_options._success) _options._success(_getXDomainResponse(_xdr));
            };
            _xdr.onerror = function() {
                if (_options._error) _options._error(_getXDomainResponse(_xdr));
            };
            _xdr.onprogress = function() {
                _log('XDR progress:' + _options._url, _getPageViewTime());
            };
            _xdr.ontimeout = function() {
                _log('XDR timeout:' + _options._url, _getPageViewTime());
            };
            _xdr.timeout = 20000;

            _timer._setTimeout(function() {
                _xdr.send(_options._data);
            }, 500);
        } catch (_ex) {
            _log('Error in transmitCrossDomain (XDomainRequest): ' + _ex.message, _getPageViewTime());
            if (_options._error) _options._error({});
        }
    }

    function _sendXHR(_options) {
        try {
            var _xhr = new _window.XMLHttpRequest();
            _xhr.onreadystatechange = function() {
                if (_xhr.readyState !== 4 || !_xhr.status) return; // equal to XMLHttpRequest.DONE, which can be overridden

                if (_isHttpStatusSuccess(_xhr.status)) {
                    if (_options._success) _options._success(_getXMLHttpResponse(_xhr));
                } else {
                    if (_options._error) _options._error(_getXMLHttpResponse(_xhr));
                }
            };

            _xhr.open(_options._data ? 'POST' : 'GET', _options._url, true);
            _xhr.setRequestHeader('Content-type', 'text/plain');
            if (_options._sendCookies)
                _xhr.withCredentials = true; // Enabling sending of cross-domain cookies here which is required for us to respect mf_block from mouseflow.com
            _xhr.send(_options._data);
        } catch (_ex) {
            _log('Error in transmitCrossDomain (XMLHttpRequest): ' + _ex.message, _getPageViewTime());
            if (_options._error) _options._error({});
        }
    }

    function _getXDomainResponse(_xdr) {
        return {
            _response: _xdr.responseText
        };
    }

    function _getXMLHttpResponse(_xhr) {
        return {
            _status: _xhr.status,
            _response: _xhr.response
        };
    }

    function _compress(_data, _success, _error) {
        if (!_window.CompressionStream) {
            if (_error) _error();
            return;
        }

        var _encoder = new _window.TextEncoder();
        var _stream = new _window.ReadableStream({
            start(_controller) {
                _controller.enqueue(_encoder.encode(_data));
                _controller.close();
            }
        }).pipeThrough(new _window.CompressionStream('gzip'));

        var _reader = _stream.getReader();
        var _chunks = [];
        var _length = 0;

        _read();

        function _read() {
            _reader.read().then(function(_chunk) {
                if (_chunk.value) {
                    _chunks.push(_chunk.value);
                    _length += _chunk.value.length;
                }

                if (_chunk.done) {
                    _done();
                } else {
                    _read();
                }
            }).catch(_error);
        }

        function _done() {
            var _result;

            if (_chunks.length === 1) {
                _result = _chunks[0];
            } else {
                _result = new Uint8Array(_length);

                var _offset = 0;
                _chunks.forEach(function(_value) {
                    _result.set(_value, _offset);
                    _offset += _value.length;
                });
            }

            if (_success) _success(_result);
        }
    }

    function _addGZipParameterIfNeeded(_url, _value) {
        return /\/(html|dom)/.test(_url)
            ? _url + (_url.indexOf('?') === -1 ? '?' : '&') + 'gz=' + _value
            : _url;
    }

    function _transmitData(_type, _data) {
        _transmitCrossDomain({
            _url: _baseUrl + 'data',
            _data: 'website=' + _config._websiteId + '&session=' + _userInfo._sessionId + '&page=' + _userInfo._pageId +
                '&type=' + _type + '&data=' + _encodeUriComponent(_helper._jsonStringify(_data))
        });
    }

    function _isHttpStatusSuccess(_status) {
        return _status >= 200 && _status < 300;
    }

    function _isIE9OrOlder() {
        return _document.all && !_window.atob; // source: http://tanalin.com/en/articles/ie-version-js/
    }

    function _isIE8OrOlder() {
        return _document.all && !_document.addEventListener; // source: http://tanalin.com/en/articles/ie-version-js/
    }

    function _forceSameProtocol(_url) {
        return _url.replace(/^https?:/i, _config.location.protocol);
    }

    function _sendInitialDom(_domMutation) {
        var _html = _helper._jsonStringify(_domMutation._data);
        if (_html && _html.length > _config._initialDomLimit)
        {
            _log('DOM size too big, not sending, size: ' + _helper._humanBytes(_html.length), _getPageViewTime());
            _tag('mf_secret_html-too-big');
            return;
        }

        var _encodedHtml = _encodeUriComponent(_html);
        var _maxSessionStorageSize = 5242000;
        var _isInitialDomSizeWithinLimit = _encodedHtml.length <= _maxSessionStorageSize;

        var _options = {
            _url: _baseUrl + 'html' +
                '?website=' + _domMutation._page._websiteId +
                '&session=' + _domMutation._page._sessionId +
                '&page=' + _domMutation._page._pageId,
            _data: 'size=' + _domMutation._size +
                '&html=' + _encodedHtml,
            _compress: _config.compress
        };

        if (_userInfo._hasSessionStorage && _isInitialDomSizeWithinLimit) {
            var _queue = _getInitialDomQueue();

            if (_encodedHtml !== '')
            {
                _log('Adding initial DOM to queue, size: ' + _helper._humanBytes(_encodedHtml.length), _getPageViewTime());
                _queue.push(_options);
            }
            else
                _log('Initial DOM empty, not sending', _getPageViewTime());

            if (_setInitialDomQueue(_queue.slice(-10)))
                _sendInitialDomFromQueue();
            else {
                _transmitInitialDom(_options, _isInitialDomSizeWithinLimit, _encodedHtml.length);
            }
        } else {
            if (_encodedHtml == '') {
                _log('Initial DOM empty, not sending', _getPageViewTime());
                return;
            }
            
            _transmitInitialDom(_options, _isInitialDomSizeWithinLimit, _encodedHtml.length);
        }
    }

    function _sendInitialDomFromQueue() {
        var _queue = _getInitialDomQueue();
        var _options = _queue.splice(0, 1)[0];
        if (_options) {
            _log('Sending initial DOM mutations. Size: ' + _options._data.length, _getPageViewTime());
            _options._success = _options._error = function() {
                _setInitialDomQueue(_queue);
                _timer._setTimeout(_sendInitialDomFromQueue, 1);
            };
            _transmitCrossDomain(_options);
        }
    }

    function _transmitInitialDom(_options, _isInitialDomSizeWithinLimit, _domSize) {
        if (_isInitialDomSizeWithinLimit) {
            _log('Transmitting initial DOM without queue due to no sessionstorage, size: ' + _helper._humanBytes(_domSize), _getPageViewTime());
        } else {
            _log('Transmitting initial DOM without queue due too big html, size: ' + _helper._humanBytes(_domSize), _getPageViewTime());
        }
        _transmitCrossDomain(_options);
    }

    function _getInitialDomQueue() {
        return _sessionStorage._getJson('mf_initialDomQueue') || [];
    }

    function _setInitialDomQueue(_queue) {
        return _sessionStorage._setJson('mf_initialDomQueue', _queue);
    }

    function _enqueueDomMutation(_domMutation) {
        var _isDuplicate = _domMutation._data.args[1].some(function(_elem) {
            return _domMutationDetector._isDuplicate(_elem);
        });

        if (_isDuplicate) {
            _log('DOM mutation is a duplicate and has not been added.', _getPageViewTime());
            return;
        }

        // Check if the DOM mutation is similar (only style tag is changed) of one of the enqueued (but not sent) DOM mutations. If so, mutate the enqueued DOM data and discard current DOM mutation.
        var _similarMutationIndex = _findSimilarMutation(_domMutation, _recordingData._mutationSendQueue);
        if (_similarMutationIndex > -1) {
            _recordingData._mutationSendQueue[_similarMutationIndex]._data = _domMutation._data;
            _log('Deduplicating DOM mutation', _getPageViewTime());

            return;
        }

        // Check if an identical DOM mutation already exists. If so, re-use the previous sequence, send the event, but not the DOM mutation data.
        if (_config.domReuse) {
            var _domMutationHash = _getDomMutationHash(_domMutation);
            var _existingDomMutationSequence = _getPreviouslySentIdenticalDomMutationSequence(_domMutationHash);

            if (_existingDomMutationSequence > -1) {
                _domMutation.sequence = _existingDomMutationSequence;
                _log('Reusing already sent DOM mutation, sequence ' + _domMutation.sequence, _getPageViewTime());

                _add(_eventType._domMutation, {
                    x: _domMutation.sequence,
                    y: 0
                });
                return;
            } else
                _recordingData._domMutationHashes.push(_domMutationHash);
        }

        // If DOM mutation is new/unique, assign new sequence, add the event and schedule sending the DOM data
        _domMutation.sequence = ++_recordingData._domMutationsIndex;
        _add(_eventType._domMutation, {
            x: _domMutation.sequence,
            y: 0
        });
        _recordingData._mutationSendQueue.push(_domMutation);

        if (!_sendDomMutationTimeoutFunc)
            _sendDomMutationTimeoutFunc = _timer._setTimeout(_sendDomMutations, 1500);
    }

    function _getPreviouslySentIdenticalDomMutationSequence(_domMutationHash) {
        for (var i = 0; i < _recordingData._domMutationHashes.length; i++)
            if (_recordingData._domMutationHashes[i] == _domMutationHash)
                return i + 1;
        return -1;
    }

    function _getDomMutationHash(_domMutation) {
        return _getStringHash(_helper._jsonStringify(_domMutation._data));
    }

    function _sendDomMutations() {
        _sendDomMutationTimeoutFunc = 0;

        if (_isRecording && _recordingData._mutationSendQueue.length > 0) {
            var _msgCount = _recordingData._mutationSendQueue.length;
            var _domMutationMap = _recordingData._mutationSendQueue.map(function(_domMutation) {
                return {
                    _page: 'website=' + _domMutation._page._websiteId + '&session=' + _domMutation._page._sessionId + '&page=' + _domMutation._page._pageId,
                    _data: _domMutation.sequence + '.' + _encodeDomDelimiter(_helper._jsonStringify(_domMutation._data))
                };
            }).filter(function(_domMutation) {
                return _domMutation._data.length;
            }).reduce(function(_domMutationMap, _domMutation) {
                var _list = _domMutationMap[_domMutation._page];
                if (!_list) _list = _domMutationMap[_domMutation._page] = [];

                _list.push(_domMutation._data);

                return _domMutationMap;
            }, {});

            _recordingData._mutationSendQueue = [];

            Object.keys(_domMutationMap).forEach(function(_page) {
                var _data = _domMutationMap[_page].join('|||');
                _data = _page + '&data=' + _encodeUriComponent(_data);

                _transmitCrossDomain({
                    _url: _baseUrl + 'dom',
                    _data: _data,
                    _compress: _config.compress
                });

                _log('Sending DOM mutations: ' + _msgCount + ', size: ' + _data.length, _getPageViewTime());

                _recordingData._sentDomMutationCount += _msgCount;

                if (_recordingData._sentDomMutationCount > _internalSettings._domLimit) {
                    _log('DOM mutation limit of ' + _internalSettings._domLimit + ' reached. Stopping recording.', _getPageViewTime());
                    _stop();
                }
            });
        }
    }

    function _findSimilarMutation(_mutation, _mutationList) {
        if (!_config.domDeduplicator)
            return -1;

        var _args = _mutation._data.args;
        var _hasStyleChange = _mutationHasOnlyStyleChanges(_args);
        var _hasSvgChange = _mutationHasOnlySvgChanges(_args);
        if (!_hasStyleChange && !_hasSvgChange)
            return -1;

        for (var i = 0; i < _mutationList.length; i++) {
            var _prevArgs = _mutationList[i]._data.args;
            if (_hasStyleChange && _mutationHasOnlyStyleChanges(_prevArgs) && _changesAffectSameElements(_args[2], _prevArgs[2])) {
                return i;
            } else if (_hasSvgChange && _mutationHasOnlySvgChanges(_prevArgs)) {
                return i;
            }
        }
        return -1;
    }

    function _mutationHasOnlyStyleChanges(_args) {
        return _mutationHasOnlyAttributeChanges(_args) &&
            _args[2].filter(_argumentHasOnlyStyleChanges).length === _args[2].length;
    }

    function _mutationHasOnlySvgChanges(_args) {
        return _mutationHasOnlyAttributeChanges(_args) &&
            _args[2].filter(_argumentHasOnlySvgChanges).length === _args[2].length;
    }

    function _mutationHasOnlyAttributeChanges(_args) {
        return _args[0].length === 0 && _args[1].length === 0 && _args[2].length > 0 && _args[3].length === 0;
    }

    function _argumentHasOnlyStyleChanges(_arg) {
        return _arg.attributes.style && _getPropertyCount(_arg.attributes) === 1;
    }

    function _argumentHasOnlySvgChanges(_arg) {
        return _arg.attributes.d && _getPropertyCount(_arg.attributes) === 1;
    }

    function _getPropertyCount(obj) {
        var count = 0;
        for (var prop in obj)
            if (obj.hasOwnProperty(prop))
                count++;
        return count;
    }

    function _changesAffectSameElements(_args1, _args2) {
        if (_args1.length !== _args2.length)
            return false;
        for (var i = 0; i < _args1.length; i++) {
            var _arg1 = _args1[i],
                _arg2 = _args2[i];
            if (_arg1.id !== _arg2.id)
                return false;
        }
        return true;
    }

    function _ping() {
        if (_recordingData._data.length > 0 && _getTimeInCurrentChunk() >= 5000) {
            _add(_eventType._ping, {});
            _save();
        }
    }

    function _timeout() {
        _log('Inactivity timeout.', _getPageViewTime());
        _stop(true);
    }

    function _hasSamePosition(_a, _b) {
        return _a.x == _b.x && _a.y == _b.y;
    }

    function _getViewport() {
        return {
            x: _window.innerWidth,
            y: _window.innerHeight
        };
    }

    function _getBoundingRect(_obj) {
        if (!_obj || !_obj.getBoundingClientRect)
            return null;

        var _clientRect = _obj.getBoundingClientRect();
        var _computedRect;

        if (!_obj.childElementCount && !_clientRect.height && !_clientRect.width)
            _computedRect = _getComputedRect(_obj);

        if (!_computedRect){
            return {
                x: _clientRect.left,
                y: _clientRect.top,
                width: _clientRect.width,
                height: _clientRect.height
            };
        } else {
            _computedRect.x += _clientRect.left - _obj.offsetLeft;
            _computedRect.y += _clientRect.top - _obj.offsetTop;
            return _computedRect;
        }
    }

    function _getComputedRect(_element) {
        var _computedStyle = window.getComputedStyle(_element, [':after']);
        if (!_computedStyle)
            return _computedStyle;

        return {
            x: +_computedStyle.left.slice(0, -2),
            y: +_computedStyle.top.slice(0, -2),
            width: +_computedStyle.width.slice(0, -2),
            height: +_computedStyle.height.slice(0, -2)
        };
    }

    function _getElementId(_element) {
        var _frozenId = _frozenElementIds.get(_element);
        if (_frozenId)
            return _frozenId;

        try {
            var _id = [];
            while (_element) {
                var _root = _element.getRootNode
                    ? _element.getRootNode()
                    : _document;

                _id.unshift(_getElementName(_element, _root) || _getCssPath(_element, _root));
                _element = _root.host;
            }

            return _id.join(' > :document-fragment: > ');
        } catch (_ex) {
            _log('Error in getElementPath: ' + _ex.message, _getPageViewTime());
        }
        return '';
    }

    function _getElementName(_element) {
        var name = _element.attributes['name']
            ? _element.attributes['name'].value
            : null;

        if (name && _getParentForm(_element) && /button|input|select|textarea/.test(_element.tagName.toLowerCase())) {
            var _elementsWithSameName = _document.getElementsByName(name);
            if (_elementsWithSameName.length === 1)
                return name;

            if (_elementsWithSameName.length > 1) {
                for (var _i = 0; _i < _elementsWithSameName.length; _i++)
                    if (_element === _elementsWithSameName[_i])
                        return name + '[' + _i + ']_mf';
            }
        }

        return null;
    }

    function _getCssPath(_el, _root) {
        var _path = [];
        try {
            while (_el && _el.nodeType === 1) {
                var _selector = '';
                var _parent = _native._getParent(_el);
                var _frozenId = _frozenElementIds.get(_el);
                if (_frozenId) {
                    _path.unshift(_frozenId);
                    break;
                }
                if (_el.tagName === 'TABLE' && _path.indexOf('tbody') === -1 && _path.indexOf('thead') === -1)
                    _path.unshift('tbody');	
                if (_el.getAttribute('id') && !_helper._parentHasAttribute(_el, 'data-mf-ignore-child-ids') && _config.useIdSelectors) {
                    _selector += '#' + _el.getAttribute('id');
                    _path.unshift(_selector);
                    break;
                } else {
                    _selector += _el.tagName.toLowerCase();
                    var _classSelector = '', _sib = _el, _nth = 1;
                    if (_parent && _parent.tagName && _parent.tagName.toLowerCase() == 'body') {
                        var _classList = _helper._getClassList(_el);
                        _classSelector = _classList.length ? '.' + _classList.join('.') : '';
                    }

                    if (_classSelector !== '' && _root.querySelectorAll(_decodeCssPath('body > ' + _selector + _classSelector)).length === 1)
                        _selector += _classSelector;
                    else {
                        while ((_sib = _sib.previousElementSibling)) {
                            if (_sib.tagName.toLowerCase() === _selector)
                                _nth++;
                        }
                        if (_nth !== 1)
                            _selector += ':[' + _nth + ']';
                    }
                }
                _path.unshift(_selector);
                if (!_parent) return '';
                _el = _parent;
            }
        } catch (_ex) {
            _log('Error in _getCssPath: ' + _ex.message, _getPageViewTime());
        }
        return _path.join(' > ').replace('html > body > ', '> ');
    }

    function _getElementById(_id) {
        if (!_id) return null;

        var _element = _getElementByName(_id);
        if (!_element) {
            try {
                var _root = _document;
                _decodeCssPath(_id).split(' > :document-fragment: > ').forEach(function(_selector) {
                    _element = _root.querySelector(_selector);
                    _root = _element.shadowRoot;
                });
            } catch (_ex) {
                _log('Error in _getElementById: ' + _ex.message, _getPageViewTime());
            }
        }

        return _element;
    }

    function _getElementByName(_name) {
        if (!_name) return null;

        var _match = _formNameRegex.exec(_name);
        if (_match && _match[1]) {
            try {
                var _index = _window.parseInt(_match[1]);
                return _document.getElementsByName(_name.replace(_formNameRegex, ''))[_index];
            } catch (_ex) { }
        }
        var _elements = _document.getElementsByName(_name);
        if (_elements && _elements.length === 1)
            return _elements[0];

        return null;
    }

    function _decodeCssPath(_path) {
        if (!_path) return null;
        if (_path.substr(0, 1) === '>')
            _path = 'html > body ' + _path;
        _path = _path.replace(/^#(\d)/, '#\\3$1 '); // #45 => #\3 45
        _path = _path.replace(/^#(-\d)/, '#\\$1');  // #-45 => #\-45
        _path = _path.replace(/:([^\[])/g, '\\:$1'); // field:value => field \:value
        _path = _path.replace(/\\:document-fragment\\:/g, ':document-fragment:'); // \:document-fragment\: => :document-fragment:
        _path = _path.replace(/^#[^\s]+/, function(id) { return '#' + id.slice(1).replace(/([^a-zA-Z\d\s:\\])/g, '\\$1') }); // Escapes ID path characters if needed.
        _path = _path.replace(/:\[([^\]]+)\]/g, ':nth-of-type($1)'); // :[4] => :nth-of-type(4)
        return _path;
    }

    function _pushBytes(_byteCount, _value, _collection) {
        for (var _i = _byteCount - 1; _i > 0; _i--) {
            var _remainingBits = _math.pow(256, _i);
            _pushByte(_math.floor(_value / _remainingBits), _collection);
            _value = _value % _remainingBits;
        }
        _pushByte(_value, _collection);
    }

    function _pushByte(_byte, _collection) {
        if (_byte > 255) {
            _collection._overflow = true;
            return;
        }

        _collection.push(_byte);
    }

    function _getValues(_element) {
        var _result = '';
        for (var _i = 0; _i < _element.length; _i++) {
            _result += (_i > 0 ? ',' : '') + _base64String.encode('' + _element[_i]);
        }
        return _result;
    }

    function _getSize(_element) {
        var _size = 0;
        for (var _i = 0; _i < _element.length; _i++) _size += _base64String.encode('' + _element[_i]).length + 1;
        return _size > 0 ? _size - 1 : _size;
    }

    function _getBaseDomain(_input) {
        if (_validateIPaddress(_input.hostname) || !_config.includeSubDomains)
            return _input.hostname;
        var _domain = _input.href;
        var _sld = /\.co\.|\.com\.|\.ac\.|\.org\.|\.gov\.|\.edu\.|\.net\./;
        _domain = _domain.replace(/^http(s)?\:\/\/?/i, '').replace(/^([^\/]+)\/.*/i, '$1').replace(/:[\d]*$/, '');
        if (_sld.test(_domain))
            _domain = _domain.replace(/^([^\.]+\.){1,}([^\.]+\.[^\.]+\.[^\.]+)$/i, '$2');
        else
            _domain = _domain.replace(/^([^\.]+\.){1,}([^\.]+\.[^\.]+)$/i, '$2');
        return '.' + _domain;
    }

    function _validateIPaddress(ipaddress) {
        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
            return (true);
        }
        return (false);
    }

    function _storeValue(_name, _value, _persistent, _domain) {
        if (_config.preferStorageApi)
            _localStorage._set(_name, _value);
        else
            _setCookie(_name, _value, _persistent, _domain);
    }

    function _retrieveValue(_name) {
        if (_config.preferStorageApi)
            return _localStorage._get(_name) || '';
        else
            return _getCookie(_name);
    }

    function _deleteValue(_name) {
        if (_config.preferStorageApi) {
            _sessionStorage._remove(_name);
            _localStorage._remove(_name);
        } else {
            _document.cookie = _name + '=; expires=Thu, 01-Jan-70 00:00:01 GMT; path=/; domain=' + _getBaseDomain(_location) + ';';
        }
    }

    function _setCookie(_name, _value, _persistent, _domain) {
        var _expires = '';
        if (_persistent == 1) {
            var _date = new Date();
            _date.setTime(_date.getTime() + _internalSettings._farFutureCookieLifetime);
            _expires = '; expires=' + _date.toGMTString();
        }
        var _secure = _config.secureCookie ? 'secure;' : '';
        _document.cookie = _name + '=' + _value + _expires + '; path=/; domain=' + _domain + ';' + _secure + 'SameSite=Strict;';
    }

    function _getCookie(_name) {
        var _nameWithEqualsSign = _name + '=';
        var _cookies = _document.cookie.split(';');
        for (var i = 0; i < _cookies.length; i++) {
            var c = _cookies[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(_nameWithEqualsSign) === 0) {
                return c.substring(_nameWithEqualsSign.length, c.length);
            }
        }
        return '';
    }

    // Included tools
    var _base64 = new function() {
        for (var d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split(''), c = 64; c;)--c;
        this.e = function(e) {
            for (var a = [], f = 0, b = 0, g, c = e.length, h = c % 3; f < c;) a[b++] = d[(g = e[f++] << 16 | e[f++] << 8 | e[f++]) >> 18 & 63] + d[g >> 12 & 63] + d[g >> 6 & 63] + d[g & 63];
            if (h) for (a[--b] = a[b].substr(0, a[b].length - (h = 3 - h)) ; h--;) a[b] += '*';
            return a.join('');
        };
    };
    var _base64String = { _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', encode: function(c) { for (var a = '', d, b, e, i, h, f, g = 0, c = this._utf8_encode(c) ; g < c.length;) d = c.charCodeAt(g++), b = c.charCodeAt(g++), e = c.charCodeAt(g++), i = d >> 2, d = (d & 3) << 4 | b >> 4, h = (b & 15) << 2 | e >> 6, f = e & 63, isNaN(b) ? h = f = 64 : isNaN(e) && (f = 64), a = a + this._keyStr.charAt(i) + this._keyStr.charAt(d) + this._keyStr.charAt(h) + this._keyStr.charAt(f); return a }, _utf8_encode: function(c) { for (var c = c.replace(/\r\n/g, '\n'), a = '', d = 0; d < c.length; d++) { var b = c.charCodeAt(d); 128 > b ? a += String.fromCharCode(b) : (127 < b && 2048 > b ? a += String.fromCharCode(b >> 6 | 192) : (a += String.fromCharCode(b >> 12 | 224), a += String.fromCharCode(b >> 6 & 63 | 128)), a += String.fromCharCode(b & 63 | 128)) } return a } };

    function _guid() {
        var _a = function() { return ((1 + _math.random()) * 65536 | 0).toString(16).substring(1); };
        return _a() + _a() + _a() + _a() + _a() + _a() + _a() + _a();
    }

    var _initalizeRetryCount = 0;
    function _initRecorder() {
        if (_document.body) {
            _log('Initializing recorder');
            if (!_canInitialize())
                return;

            if (_enableFetchConfig)
                _fetchConfig(_initRecorderInner);
            else
                _initRecorderInner();
            return;
        }

        _initalizeRetryCount++;

        if (_initalizeRetryCount === 1) {
            _log('Retrying to initialize recorder - document.body is not set', _getPageViewTime());
        } else if (_initalizeRetryCount === 25) {
            _log('Failed to initialize recorder', _getPageViewTime());
            return;
        };

        _timer._setTimeout(_initRecorder, 200);
    }

    function _initRecorderInner() {
        _log('Initializing recorder', _getPageViewTime());
        if (!_isDomainValid(_config.location.hostname))
            return;

        if (_isIE8OrOlder()) {
            _log('Recording not started - browser is IE8 or older', _getPageViewTime());
            return;
        }

        if (_needsInstalling)
            _signalInstalled();

        if (_needsInstalling || _needsApproval)
            return;

        _isInitialized = true;

        function _readyStateChanged() {
            if (!_isStarted && _config.autoStart && _document.readyState !== 'loading')
                _start();

            _sendLoadEvent(_getLoadTime());
        }

        _eventListener._on(_document, 'readystatechange', _readyStateChanged);
        _readyStateChanged();
    }

    function _sendLoadEvent(_loadTime) {
        if (_hasSentLoadEvent || !_isStarted || _document.readyState !== 'complete')
            return;

        _add(_eventType._load, {
            x: _loadTime,
            y: _mainScrollElement
                ? _mainScrollElement.scrollHeight
                : _helper._getDocumentHeight()
        });
        _hasSentLoadEvent = true;
    }

    function _getUnloadEventName() {
        return _config.useUnload
            ? 'unload'
            : 'beforeunload';
    }

    function _endsWith(_str, _suffix) {
        return _str.indexOf(_suffix, _str.length - _suffix.length) !== -1;
    }

    function _getStringHash(_input) {
        var _hash = 0, _charCode;
        for (var _i = 0; _i < _input.length; _i++) {
            _charCode = _input.charCodeAt(_i);
            _hash = ((_hash << 5) - _hash) + _charCode;
        }
        return _hash.toString();
    }

    function _findVariableHashIndex(_key) {
        for (var _i = 0; _i < _recordingData._customVariableHashes.length; _i++)
            if (_recordingData._customVariableHashes[_i].split('_')[0] === _getStringHash(_key)) {
                return _i;
            }
        return -1;
    }

    function _tryAddOrUpdateVariableHash(_key, _value) {
        var _existingVariableHashIndex = _findVariableHashIndex(_key);
        var _valueHash = _getStringHash('' + _value);
        if (_existingVariableHashIndex > -1) {
            if (_recordingData._customVariableHashes[_existingVariableHashIndex].split('_')[1] === _valueHash) {
                return false;
            }
            _recordingData._customVariableHashes[_existingVariableHashIndex] = _getStringHash(_key) + '_' + _valueHash;
        } else if (_recordingData._customVariableHashes.length < 20) {
            _recordingData._customVariableHashes.push(_getStringHash(_key) + '_' + _valueHash);
        }
        return true;
    }

    function _isDomainValid(_domain) {
        var _originalDomain = _domain;
        _domain = _normalizeAndRemoveWwwFromDomain(_domain);
        var _sameSubdomainOrDomainMatch = false;
        for(var _i = 0; _i < _domainList.length; _i++) {
            if (_domain == _normalizeAndRemoveWwwFromDomain(_domainList[_i]))
            {
                _sameSubdomainOrDomainMatch = true;
                break;
            }
        }
        _domain = _removeSubdomainIfSubdomainsAllowed(_domain);
        var _any = false;
        for(var _i = 0; _i < _domainList.length; _i++) {
            if (_domain == _normalizeAndRemoveWwwFromDomain(_domainList[_i]))
            {
                _any = true;
                break;
            }
        }
        var _result = _sameSubdomainOrDomainMatch || _any;
        if (!_result) _log('Domain was blocked: ' + _originalDomain + ' - domain list: ' + _domainList, _getPageViewTime());
        return _result;
    }

    function _normalizeAndRemoveWwwFromDomain(_domain) {
        if (_domain == null) return '';

        _domain = _domain.toLowerCase();
        _domain = _domain.replace(/^\s+|\s+$/g, ''); // IE8-safe trim
        if (_domain.substring(0, 4) == 'www.')
        {
            _domain = _domain.substring(4, _domain.length);
        }
        return _domain;
    }

    function _removeSubdomainIfSubdomainsAllowed(_domain) {
        if (_config.includeSubDomains)
        {
            _domain = _removeSubdomain(_domain);
        }
        return _domain;
    }

    function _removeSubdomain(_domain) {
        var _sections = _domain.split('.');
        if (_sections.length <= 2) return _domain;

        if (_domain.indexOf('.co.') > -1 || _domain.indexOf('.com.') > -1 || _domain.indexOf('.org.') > -1)
        {
            _sections = _sections.slice(_sections.length - 3, _sections.length);
            return _sections.join('.');
        }
        _sections = _sections.slice(_sections.length - 2, _sections.length);
        return _sections.join('.');
    }

    function _detectFrameworksUsed() {
        var _result = [];
        if (typeof Ember != 'undefined') _result.push('em');
        if (typeof angular != 'undefined') _result.push('an');
        if (typeof Backbone != 'undefined') _result.push('bb');
        return _result;
    }

    function _getLargestScrollingElement() {
        var scrollingEl = null;
        var bodyScrollHeight = _window.document.body.scrollHeight;
        document.querySelectorAll('body *').forEach(function(el) {
            if (el.tagName === 'LINKBAR-CONTAINER')
                return;
            if (!scrollingEl)
                scrollingEl = el;

            if (scrollingEl.scrollHeight < el.scrollHeight)
                scrollingEl = el;
        });
        return scrollingEl.scrollHeight > bodyScrollHeight ? scrollingEl : null;
    }

    function _getMainScrollElement() {
        if (!_config.autoScrollSelector)
            return _document.querySelector(_config.scrollSelector);

        return _getLargestScrollingElement();
    }

    function _autoTagIfEnabled() {
        if (_config.autoTagging) {
            _log('Autotagging session', _getPageViewTime());
            var _parameters = ['utm_source', 'utm_medium', 'utm_term', 'utm_content', 'utm_campaign', 'gclid'];
            for (var _i = 0; _i < _parameters.length; _i++) {
                var _parameter = _parameters[_i];
                var _value = _getQuerystringParameterByName(_config.location.href, _parameter);
                if (!_value) _value = _getQuerystringParameterByName(_document.referrer, _parameter);
                if (_value) _window._mfq.push(['setVariable', _parameter, _value]);
            }
        }
    }

    function _getQuerystringParameterByName(_url, _name) {
        _name = _name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + _name + '=([^&#]*)'),
            results = regex.exec(_url);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    const nonWordCharactersRegex = /[\s"'.,_\-+/*:=!?\@#%&{}[\]\\|]/;
    function _isWordCharacter(_character) {
        return !nonWordCharactersRegex.test(_character);
    }

    function _stringRepeat(_value, _count) {
        var _result = '';
        for (var _i = 0; _i < _count; _i++) {
            _result += _value;
        }

        return _result;
    }

    function _getPageViewTime() {
        return +new Date() - _recordingData._startTime;
    }

    function _elementHasPre(_node) {
        var _isElement = _node instanceof Element;
        if (!_isElement)
            return false;

        var _cStyles = _window.getComputedStyle(_node);
        var _wSp = _cStyles ? _cStyles['white-space'] : '';
        if (_wSp && (_wSp.indexOf('pre') > -1 || _wSp === 'break-spaces'))
            return true;
        return false;
    }

    _initRecorder();

    

    this.start = function() {
        _start();
        _sendLoadEvent(_getLoadTime());
    };
    this.stop = _stop;
    this.newPageView = _newPageView;
    this.stopSession = _stopSession;
    this.getSessionId = function() {
        return _userInfo._sessionId;
    };
    this.getPageViewId = function() {
        return _userInfo._pageId;
    };
    this.tag = _tag;
    this.star = _star;
    this.setVariable = _setVariable;
    this.identify = _identify;
    this.formSubmitAttempt = _formSubmitAttempt;
    this.formSubmitSuccess = _formSubmitSuccess;
    this.formSubmitFailure = _formSubmitFailure;
    this.addFriction = function(_value, _name) {
        _addFriction({ _value: _value, _customName: _name });
    };
    this.isRecording = function() {
        return _isRecording;
    };
    this.isReturningUser = function() {
        return _userInfo._returning;
    };
    this.activateFeedback = _activateFeedback;
    this.proxyAttachShadow = _proxyAttachShadow;
    this.recordingRate = _recordingRate;
    this.version = _version;
    this.lastUpdate = _lastUpdate;
    this.isCreditCard = _isCreditCard;
}
/******************************************************************************************
Mouseflow recording script, DOM mutation detector module
-------------------------------------------------------------------------------------------
Copyright (c) 2019 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedLocals
function _DomMutationDetector(_native, _config) {
    var _knownMutations = [];
    
    function _isDuplicate(_elem) {
        if (!_config.domMutationDetectorEnable || !_elem || _elem.nodeType !== 1)
            return false;

        var _parent = _native._getParent(_elem);
        var _parentNodeId = _parent ? _parent.id : undefined;
        var _previousSiblingId = _elem.previousSibling ? _elem.previousSibling.id : undefined;
        var _tagName = _elem.tagName;
        var _elemId = _elem.attributes ? _elem.attributes.id : undefined;
        var _elemClass = _elem.attributes ? _elem.attributes.class : undefined;

        var _key = _tagName;
        
        if (_config.domMutationUseParentNode && _parentNodeId)
            _key += '_' + _parentNodeId;
        if (_config.domMutationUsePreviousSibling && _previousSiblingId)
            _key += '_' + _previousSiblingId;
        if (_elemId)
            _key += '_' + _elemId;
        if (_elemClass)
            _key += '_' + _elemClass.replace(/\s/g, "_");

        var _timeStamp = +new Date();
        var _mutation = _knownMutations[_key];
        var _mutationCount = _mutation ? _mutation._count : 0;
        var _secondsSinceLastMutation = _mutation ? ((_timeStamp - _mutation._lastOccurence) / 1000) : 0;

        var _isBelowCountThreshold = _mutationCount < _config.domMutationCountThreshold;
        var _isBelowTimeThreshold = _secondsSinceLastMutation < _config.domMutationTimeThresholdInSeconds;
        var _isDuplicate = _mutation ? (_isBelowCountThreshold && _isBelowTimeThreshold) : false;

        if (!_isBelowCountThreshold || !_isBelowTimeThreshold)
            _mutationCount = 0;

        _knownMutations[_key] = {
            _lastOccurence: _timeStamp,
            _count: _mutationCount + 1
        };

        return _isDuplicate;
    }

    

    this._isDuplicate = _isDuplicate;
}
/******************************************************************************************
Mouseflow recording script, live heatmaps module
-------------------------------------------------------------------------------------------
Copyright (c) 2019 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedLocals
function _LiveHeatmaps(_window, _config, _rootElement, _helper, _eventListener, _urlFilter, _localStorage) {
    var _appUrl, _websiteId, _log, _rootHtmlElement;
    var _settingName = 'mf_liveHeatmaps';
    var _settings;
    var _dataRequests = [];
    var _initInterval;
    var _legacy = false;

    function _start(_websiteIdInput, _logInput, _base, _sideload) {
        _websiteId = _websiteIdInput;
        _appUrl = _base;
        _log = _logInput;
        _legacy = window.location.search.indexOf('mf_legacy=1') !== -1 ? true : false;

        _log('Live heatmaps starting');
        _rootHtmlElement = _rootElement._createHtmlElement();
        if (!_rootHtmlElement) {
            _log('Live heatmaps not initiated - could not create root HTML element');
            return;
        }

        if (!_window.opener) {
            _log('Live heatmaps not initiated - window.opener is missing');
            return;
        }

        if (typeof _sideload === 'function') {
            _sideload(function () {
                _setupEventListener();
            });
        }
        else {
            _setupEventListener();
        }
    }

    function _stop() {
        _deleteSettings();
    }

    function _setupEventListener() {
        _eventListener._on(_window, 'message', function(_event) {
            if (_event.origin !== _appUrl)
                return;
            _logMessageReceived(_event.data);

            switch (_event.data.message) {
                case 'MouseflowLiveHeatmaps_Init_Received':
                    _window.clearInterval(_initInterval);
                    break;
                case 'MouseflowLiveHeatmaps_Init_Success':
                case 'MouseflowLiveHeatmaps_Hello': // TODO: remove when client recording scripts have been bumped to version 17.08
                    _initSettings(_event.data.minDate, _event.data.filters, _event.data.filteredViews, _event.data.user, _event.data.websiteSettings.cssSelectorTracked);
                    _loadScripts(_event.data.scripts, function() {
                        var message;
                        
                        if (_legacy) {
                            message = {
                                mfCommand: 'settings',
                                value: { websiteSettings: _event.data.websiteSettings }
                            };
                        } else {
                            _updateHeatmapV2Settings();
                            message = {
                                mfCommand: 'settings_liveheatmap',
                                value: _settings
                            };
                        }
                        _sameDomainPostMessage(JSON.stringify(message));
                    });
                    break;
                case 'MouseflowLiveHeatmaps_StreamData_Chunk':
                    _getRequest(_event.data.requestUrl, true)._dataCallback(_event.data.dataChunk);
                    break;
                case 'MouseflowLiveHeatmaps_StreamData_Success':
                    _getRequest(_event.data.requestUrl)._successCallback();
                    break;
                case 'MouseflowLiveHeatmaps_StreamData_Error':
                    _getRequest(_event.data.requestUrl)._errorCallback();
                    break;
                case 'MouseflowLiveHeatmaps_RequestData_Success':
                    _getRequest(_event.data.requestUrl)._successCallback(_event.data.responseText);
                    break;
                case 'MouseflowLiveHeatmaps_RequestData_Error':
                    _getRequest(_event.data.requestUrl)._errorCallback();
                    break;
            }
        });

        _initInterval = _window.setInterval(_initLiveHeatmaps, 500);
        _window.setTimeout(function() {
            _window.clearInterval(_initInterval);
        }, 10000);
        _initLiveHeatmaps();
    }

    function _initLiveHeatmaps() {
        _postMessage({
            message: 'MouseflowLiveHeatmaps_Init',
            websiteId: _websiteId,
            legacy: _legacy
        });
    }

    function _initSettings(_minDate, _filters, _filteredViews, _user, _cssSelectorTracked) {
        _settings = _getSettings();
        var _defaults = _getDefaultValues();

        var _searchMatch = _config.location.search.match(/mf_liveHeatmaps=([^&]+)/);
        var _windowNameConfig = typeof _window.name === 'string' && _window.name.indexOf('mf_liveHeatmaps') === 0
            ? _window.name.slice(15).split('_')
            : [];
        var _shouldInit = _searchMatch || _windowNameConfig[1] === 'init';

        if (_settings && !_shouldInit) {
            _settings.filters.url = _defaults.url;
            _saveSettings(_settings);
            return;
        }

        _settings = {
            isMinimized: false,
            appUrlBase: _appUrl,
            websiteId: _websiteId,
            filters: _defaults,
            minDate: _minDate,
            filteredViews: _filteredViews,
            user: _user,
            cssSelectorTracked: _cssSelectorTracked
        };

        if (_filters && _filters.view) {
            _settings.selectedFilteredView = _filters.view;
            delete _filters.view;
        }

        if (_filters) {
            Object.keys(_filters).forEach(function(_key) {
                var _value = _filters[_key];
                if (_value instanceof Date)
                    _value = _getIsoDateString(_value);

                _settings.filters[_key] = _value;
            });
        }

        if (_searchMatch && _searchMatch[1] !== '1')
            _settings.filters.maptype = _searchMatch[1];
        else if (_windowNameConfig[2])
            _settings.filters.maptype = _windowNameConfig[2];

        _saveSettings(_settings);
        _window.name = 'mf_liveHeatmaps';
    }

    function _updateHeatmapV2Settings() {
        _settings.devices = _settings.filters.device ? [_settings.filters.device] : [];
        _settings.mapType = _settings.filters.maptype;
        _settings.url = _settings.filters.url = _urlFilter._getDisplayUrl();
    }

    function _loadScripts(_scripts, _callback) {
        if (!_scripts)
            return;

        var _scriptIndex = 0;

        function _loadNextScript() {
            if (_scriptIndex >= _scripts.length) {
                _callback();
                return;
            }

            var _script = _scripts[_scriptIndex];
            _logLoadingScript(_script);
            _scriptIndex++;

            var _scriptElement = document.createElement('script');
            if (_script.startsWith('/'))
                _scriptElement.src = _appUrl + _script;
            else
                _scriptElement.src = _appUrl + '/' + _script;

            _scriptElement.onload = _loadNextScript;

            _rootHtmlElement.appendChild(_scriptElement);
        }

        _loadNextScript();
    }

    function _getSettings() {
        return _localStorage._getJson(_settingName);
    }

    function _saveSettings(_settings) {
        if (_log)
            _log('Live heatmaps saving settings');
        _localStorage._setJson(_settingName, _settings);
    }

    function _deleteSettings() {
        if (_log)
            _log('Live heatmaps removing settings');
        _localStorage._remove(_settingName);
    }

    function _getRequest(_url, _leave) {
        var _request = _dataRequests.filter(function(_dataRequest) {
            return _dataRequest._url === _url;
        })[0];

        if (!_leave && _request)
            _dataRequests.splice(_dataRequests.indexOf(_request), 1);

        return _request;
    }

    function _updateFilters(_options) {
        if (typeof _options !== 'object')
            return;

        _settings = _getSettings();
        var _defaults = _getDefaultValues();

        Object.keys(_options).forEach(function(_key) {
            var _value = _options[_key];

            if (_value instanceof Date)
                _value = _getIsoDateString(_value);

            _settings.filters[_key] = _value || undefined;
        });

        Object.keys(_defaults).forEach(function(_key) {
            if (!_settings.filters[_key])
                _settings.filters[_key] = _defaults[_key];
        });

        if (_settings.filters.view) {
            _settings.selectedFilteredView = _settings.filters.view;
            delete _settings.filters.view;
        }

        _saveSettings(_settings);
    }

    function _getDefaultValues() {
        var _today = new Date();
        _today = new Date(_today.getFullYear(), _today.getMonth(), _today.getDate());
        var _fromdate = new Date(_today);
        _fromdate.setDate(_fromdate.getDate() - 29);

        return {
            maptype: 'click',
            url: _urlFilter._getDisplayUrl(),
            fromdate: _getIsoDateString(_fromdate),
            todate: _getIsoDateString(_today)
        };
    }

    function _postMessage(_data) {
        _window.opener.postMessage(_data, _appUrl);
        _log('Sent ' + _data.message + (_data.requestUrl ? ', request URL: ' + _data.requestUrl : ''));
    }

    function _sameDomainPostMessage(_data) {
        _window.postMessage(_data, _window.location.origin);
        _log('Sent ' + _data.message + (_data.requestUrl ? ', request URL: ' + _data.requestUrl : ''));
    }

    function _logMessageReceived(_data) {
        if (_data.message && _data.message.indexOf('MouseflowLiveHeatmaps_') === 0)
            _log('Received ' + _data.message + (_data.requestUrl ? ', request URL: ' + _data.requestUrl : ''));
    }

    function _logLoadingScript(_script) {
        _log('Live heatmaps loading script: ' + _script);
    }

    function _getIsoDateString(_date) {
        return _date.getFullYear() + '-' +
            _padString(_date.getMonth() + 1, '00') + '-' +
            _padString(_date.getDate(), '00');
    }

    function _padString(_stringToPad, _pad) {
        return (_pad + _stringToPad).slice(-_pad.length);
    }

    

    this._start = _start;
    this._stop = _stop;
    this._updateHeatmap = function(_options) {
        _updateFilters(_options);
        if (_legacy) {
            _sameDomainPostMessage('{"mfCommand":"MouseflowHeatmap_UpdateHeatmap"}');
        } else {
            _updateHeatmapV2Settings();
            var message = {
                mfCommand: 'settings_change',
                value: {
                    settings: _settings,
                    reloadData: _options && _options.maptype ? false : true // TODO: find more logical place to determine if data needs to be reloaded 
                }
            };
            _sameDomainPostMessage(JSON.stringify(message));
        }
        _log('Sent postmessage updateheatmap');
    };

    _window.mouseflowHeatmap = {
        streamData: function(_url, _dataCallback, _successCallback, _errorCallback) {
            _dataRequests.push({
                _url: _url,
                _dataCallback: _dataCallback || function() {},
                _successCallback: _successCallback || function() {},
                _errorCallback: _errorCallback || function() {}
            });
            _postMessage({
                message: 'MouseflowLiveHeatmaps_StreamData',
                requestUrl: _url
            });
        },
        getData: function(_url, _successCallback, _errorCallback) {
            _dataRequests.push({
                _url: _url,
                _successCallback: _successCallback || function() {},
                _errorCallback: _errorCallback || function() {}
            });
            _postMessage({
                message: 'MouseflowLiveHeatmaps_RequestData',
                requestUrl: _url
            });
        }
    };
}
/******************************************************************************************
Mouseflow recording script, privacy tool
-------------------------------------------------------------------------------------------
Copyright (c) 2016 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _PrivacyTool(_window, _rootElement, _native, _timer, _helper, _eventListener, _localStorage, _config) {
    var _document = _window.document,
        _appUrl,
        _websiteId,
        _log,
        _tool,
        _rootHtmlElement,
        _privacyToolHtmlElement,
        _blacklistHtmlElement,
        _whitelistHtmlElement,
        _trackHtmlElement,
        _statusTextHtmlElement,
        _submitButtonHtmlElement,
        _loadingTextHtmlElement,
        _highlightHtmlElement,
        _highlightTimeout,
        _redrawTimeout,
        _mutationObserver,
        _apiTarget,
        _saveSuccessCallback,
        _saveFailedCallback,
        _styleSheet;

    function _start(_appUrlInput, _websiteIdInput, _cssSelectorBlacklist, _cssSelectorWhitelist, _cssSelectorTracked, _logInput) {
        _appUrl = _appUrlInput;
        _websiteId = _websiteIdInput;
        _log = _logInput;
        _tool = _readSettings() || {
            _isMinimized: false,
            _mode: 'exclude',
            _blacklist: _cssSelectorBlacklist || [],
            _whitelist: _cssSelectorWhitelist || [],
            _tracked: _cssSelectorTracked || []
        };
        _log('Starting privacy tool');

        _rootHtmlElement = _rootElement._createHtmlElement();
        if (!_rootHtmlElement) {
            _log('Privacy tool not initiated - could not create root HTML element');
            return;
        }

        _setupApi();

        _timer._setTimeout(function() {
            _showPrivacyTool();
            _saveSettings(_tool);
        }, 1000); // Wait to ensure font is loaded
    }

    function _stop() {
        _removeEventHandlers();
        _rootElement._removeHtmlElement();
    }

    function _setupApi() {
        _eventListener._on(_window, 'message', function (event) {
            if (event.origin !== _appUrl)
                return;

            switch (event.data.message) {
                case 'MouseflowPrivacyTool_Hello':
                    _log('Privacy tool API ready');
                    _apiTarget = event.source;
                    if (event.data.cssSelectorBlacklist) {
                        _tool._blacklist = event.data.cssSelectorBlacklist;
                        _tool._whitelist = event.data.cssSelectorWhitelist;
                        _tool._tracked = event.data.cssSelectorTracked;
                    }
                    _init();
                    break;
                case 'MouseflowPrivacyTool_Save_Success':
                    _log('Successfully saved CSS lists');

                    if (_saveSuccessCallback)
                        _saveSuccessCallback();

                    _saveSuccessCallback = undefined;
                    _saveFailedCallback = undefined;
                    break;
                case 'MouseflowPrivacyTool_Save_Failed':
                    _log('Failed saving CSS lists');

                    if (_saveFailedCallback)
                        _saveFailedCallback();

                    _saveSuccessCallback = undefined;
                    _saveFailedCallback = undefined;
                    _showError(
                        'Uh oh! We couldn\'t save your changes.<br><br>' +
                        'Please refresh the page and try again.');
                    break;
                case 'MouseflowPrivacyTool_Unauthorized':
                    _log('Privacy tool API logged out - cannot save');

                    if (_saveFailedCallback)
                        _saveFailedCallback();

                    _saveSuccessCallback = undefined;
                    _saveFailedCallback = undefined;
                    _showError(
                        'Uh oh! We couldn\'t save your changes.<br><br>' +
                        'Please log into Mouseflow and try again.');
                    break;
            }
        });

        if (_window.opener) {
            _log('Loading privacy tool API using window.opener');
            _window.opener.postMessage({
                message: 'MouseflowPrivacyTool_Hello'
            }, _appUrl);
        }

        _timer._setTimeout(function() {
            if (!_apiTarget) {
                _log('Loading privacy tool API using iframe');
                var _apiFrame = _document.createElement('iframe');
                _apiFrame.style.width = '0px';
                _apiFrame.style.height = '0px';
                _apiFrame.style.display = 'none';
                _apiFrame.src = _appUrl + '/websites/' + _websiteId + '/privacytool';
                _rootHtmlElement.appendChild(_apiFrame);

                _timer._setTimeout(function() {
                    if (!_apiTarget) {
                        _log('Loading privacy tool API timed out');
                        _showLoadingError(
                            'We\'re having trouble loading the Privacy Tool on this page. Please try ' +
                            'refreshing the page or logging in to Mouseflow and reloading the Privacy Tool from there.<br><br>' +
                            'If you need help, please don\'t hesitate to reach out to us at:  <a class="green" href="mailto:support@mouseflow.com">support@mouseflow.com</a>');
                    }
                }, 5000);
            }
        }, 2000);
    }

    function _showPrivacyTool() {
        _privacyToolHtmlElement = _getHtmlElementForPrivacyTool(_tool);
        _blacklistHtmlElement = _privacyToolHtmlElement.querySelector('.tool-exclude output');
        _whitelistHtmlElement = _privacyToolHtmlElement.querySelector('.tool-whitelist output');
        _trackHtmlElement = _privacyToolHtmlElement.querySelector('.tool-track output');
        _statusTextHtmlElement = _privacyToolHtmlElement.querySelector('.tool-status-text');
        _submitButtonHtmlElement = _privacyToolHtmlElement.querySelector('.btn-widget');
        _loadingTextHtmlElement = _privacyToolHtmlElement.querySelector('.tool-loading h2');

        _tool._blacklist.forEach(_addToBlacklist);
        _tool._whitelist.forEach(_addToWhitelist);
        _tool._tracked.forEach(_addToTracked);

        _rootHtmlElement.appendChild(_privacyToolHtmlElement);

        _highlightHtmlElement = _getHtmlElementForHighlightBox();
        _privacyToolHtmlElement.appendChild(_highlightHtmlElement);

        _helper._toggleClass(_document.body, 'mf-privacy-tool-opened', !_tool._isMinimized);

        _addCloseEventHandler();
        _init();
    }

    function _init() {
        if (_privacyToolHtmlElement && _apiTarget) {
            _helper._removeClass(_privacyToolHtmlElement, 'is-loading');
            _redrawSelectorBoxes();
            _addEventHandlers();
            _setStyleSheetInShadowRoots();
        }
    }

    function _closePrivacyTool() {
        _deleteSettings();
        _stop();
        _window.close();
    }

    function _addCloseEventHandler() {
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-close', _closePrivacyTool, { _preventDefault: true });
    }

    function _addEventHandlers() {
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-toggle', _toggleTool, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-close', _closePrivacyTool, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-exclude', _activateExcludeMode, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-whitelist', _activateWhitelistMode, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-tool-track', _activateTrackMode, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.highlight-excluded', _removeExcludedElement, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.highlight-whitelisted', _removeWhitelistedElement, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.highlight-tracked', _removeTrackedElement, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-remove-excluded', _removeExcludedElementByTag, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-remove-whitelisted', _removeWhitelistedElementByTag, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'click', '.mf-remove-tracked', _removeTrackedElementByTag, { _preventDefault: true });
        _eventListener._on(_privacyToolHtmlElement, 'submit', _saveChanges, { _preventDefault: true });
        _eventListener._on(_document, 'mouseover', _highlightElement, { _capture: true });
        _eventListener._on(_document, 'mouseleave', _hideHighlight, { _capture: true });
        _eventListener._on(_document, 'mouseup', _selectHighlightedElement, { _capture: true });
        _eventListener._on(_document, 'mouseenter', _ignoreEventHandler, { _capture: true });
        _eventListener._on(_document, 'mousemove', _ignoreEventHandler, { _capture: true });
        _eventListener._on(_document, 'mousedown', _ignoreEventHandler, { _capture: true });
        _eventListener._on(_document, 'click', _ignoreEventHandler, { _capture: true });
        _eventListener._on(_document, 'mouseout', _ignoreEventHandler, { _capture: true });
        _eventListener._on(_document, 'scroll', _redrawSelectorBoxes, { _capture: true, _exactMatch: true });
        _eventListener._on(_window, 'resize', _redrawSelectorBoxes, { _capture: true, _exactMatch: true });

        var MutationObserver = _window.MutationObserver || _window.WebKitMutationObserver || _window.MozMutationObserver;
        if (MutationObserver) {
            _mutationObserver = new MutationObserver(function(_mutations) {
                var _hasHighlightMutations = _mutations.some(function(_mutation) {
                    if (_mutation.target.nodeType !== 1 || _helper._matches(_mutation.target, '#mouseflow *'))
                        return false;

                    var _hadHighlightClass = _mutation.oldValue && _mutation.oldValue.indexOf('mf-highlight') !== -1;
                    var _hasHighlightClass = _mutation.target.className && _mutation.target.className.indexOf('mf-highlight') !== -1;
                    var _hadOrHasHighlightClass = _hadHighlightClass || _hasHighlightClass;
                    if (_mutation.type === 'attributes' && _mutation.attributeName === 'class' && _hadOrHasHighlightClass)
                        return false;

                    return true;
                });
                if (_hasHighlightMutations)
                    _redrawSelectorBoxes();

                _mutations.forEach(function(_mutation) {
                    _mutation.addedNodes.forEach(function(_node) {
                        if (!_node.shadowRoot)
                            return;

                        _mutationObserver.observe(_node.shadowRoot, {
                            childList: true,
                            subtree: true
                        });

                        _setStyleSheetInShadowRoots(_node);
                    });
                });
            });
            _mutationObserver.observe(_document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true,
                attributeOldValue: true
            });
        }
    }

    function _removeEventHandlers() {
        _eventListener._removeAll();

        if (_mutationObserver)
            _mutationObserver.disconnect();
    }

    function _setStyleSheetInShadowRoots(_parent) {
        if (!_styleSheet)
            _styleSheet = _getStyleSheet();
        if (!_parent)
            _parent = _document;

        for (var _child = _native._getFirstChild(_parent); _child; _child = _native._getNextSibling(_child)) {
            _setStyleSheetInShadowRoots(_child);

            var _shadow = _child.shadowRoot;
            if (!_shadow)
                continue;

            _setStyleSheetInShadowRoots(_shadow);

            if (_shadow.adoptedStyleSheets) {
                if (_shadow.adoptedStyleSheets.indexOf(_styleSheet) > -1)
                    continue;

                var _adoptedStyleSheets = Array.prototype.slice.call(_shadow.adoptedStyleSheets);
                _adoptedStyleSheets.push(_styleSheet);
                _shadow.adoptedStyleSheets = _adoptedStyleSheets;
            } else {
                if (_shadow.querySelector('.mf-privacy-tool-style'))
                    continue;

                var _style = _document.createElement('style');
                _style.type = 'text/css';
                _style.innerHTML = _getCssForPrivacyTool();
                _style.className = 'mf-privacy-tool-style';
                _shadow.appendChild(_style);
            }
        }
    }

    function _toggleTool() {
        _tool._isMinimized = !_tool._isMinimized;
        _saveSettings(_tool);
        _helper._toggleClass(_privacyToolHtmlElement, 'tool-closed', _tool._isMinimized);
        _helper._toggleClass(_document.body, 'mf-privacy-tool-opened', !_tool._isMinimized);

        var _step = _privacyToolHtmlElement.getElementsByClassName('step')[0];
        var _container = _privacyToolHtmlElement.getElementsByClassName('tool-container')[0];

        if (_tool._isMinimized) {
            _helper._removeClass(_step, 'fade-out');
            _helper._addClass(_step, 'fade-in');
            _helper._removeClass(_container, 'fade-in');
            _helper._addClass(_container, 'fade-out');
        } else {
            _helper._removeClass(_step, 'fade-in');
            _helper._addClass(_step, 'fade-out');
            _helper._removeClass(_container, 'fade-out');
            _helper._addClass(_container, 'fade-in');
        }
    }

    function _activateExcludeMode() {
        _tool._mode = 'exclude';
        _saveSettings(_tool);

        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-whitelist')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-whitelist')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-track')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-track')[0], 'active');

        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-exclude')[0], 'active');
        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('tool-exclude')[0], 'active');
    }

    function _activateWhitelistMode() {
        _tool._mode = 'whitelist';
        _saveSettings(_tool);

        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-exclude')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-exclude')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-track')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-track')[0], 'active');

        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-whitelist')[0], 'active');
        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('tool-whitelist')[0], 'active');
    }

    function _activateTrackMode() {
        _tool._mode = 'track';
        _saveSettings(_tool);

        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-exclude')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-exclude')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-whitelist')[0], 'active');
        _helper._removeClass(_privacyToolHtmlElement.getElementsByClassName('tool-whitelist')[0], 'active');

        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('mf-tool-track')[0], 'active');
        _helper._addClass(_privacyToolHtmlElement.getElementsByClassName('tool-track')[0], 'active');
    }

    function _removeExcludedElement(_e) {
        if (_tool._mode === 'exclude') {
            _removeFromBlacklist(_e.target.getAttribute('data-target'));
            _redrawSelectorBoxes();
        }
    }

    function _removeWhitelistedElement(_e) {
        if (_tool._mode === 'whitelist') {
            _removeFromWhitelist(_e.target.getAttribute('data-target'));
            _redrawSelectorBoxes();
        }
    }

    function _removeTrackedElement(_e) {
        if (_tool._mode === 'track') {
            _removeFromTracked(_e.target.getAttribute('data-target'));
            _redrawSelectorBoxes();
        }
    }

    function _removeExcludedElementByTag(_e) {
        _removeFromBlacklist(_e.target.parentNode.getAttribute('data-target'));
        _redrawSelectorBoxes();
    }

    function _removeWhitelistedElementByTag(_e) {
        _removeFromWhitelist(_e.target.parentNode.getAttribute('data-target'));
        _redrawSelectorBoxes();
    }

    function _removeTrackedElementByTag(_e) {
        _removeFromTracked(_e.target.parentNode.getAttribute('data-target'));
        _redrawSelectorBoxes();
    }

    function _saveChanges() {
        _startButtonLoading();

        _saveAllLists(_tool._blacklist, _tool._whitelist, _tool._tracked, function() {
            _stopButtonLoading();
            _submitButtonHtmlElement.innerHTML = 'Saved';
            _deleteSettings(); // ensure privacy tool is closed, when tab is closed before 2 seconds
            _timer._setTimeout(_closePrivacyTool, 500);
        }, function() {
            _stopButtonLoading();
        });
    }

    function _highlightElement(_e) {
        _timer._clearTimeout(_highlightTimeout);

        var _highlightedElements = _document.getElementsByClassName('mf-highlight');
        for (var _i = 0; _i < _highlightedElements.length; _i++) {
            _helper._removeClass(_highlightedElements[_i], 'mf-highlight');
        }
        _helper._addClass(_highlightHtmlElement, 'hidden');

        if (_ignoreEventHandler(_e) || _ignoreClick(_e.target))
            return;

        _helper._addClass(_e.target, 'mf-highlight');

        _highlightTimeout = _timer._setTimeout(function() {
            var _rect = _e.target.getBoundingClientRect();
            _highlightHtmlElement.style.left = _rect.left + _window.pageXOffset + 'px';
            _highlightHtmlElement.style.top = _rect.top + _window.pageYOffset + 'px';
            _highlightHtmlElement.style.width = _rect.width + 'px';
            _highlightHtmlElement.style.height = _rect.height + 'px';
            _helper._removeClass(_highlightHtmlElement, 'hidden');
        }, 75);
    }

    function _hideHighlight(_e) {
        if (_ignoreEventHandler(_e))
            return;

        if (_e.target === _document) {
            _helper._addClass(_highlightHtmlElement, 'hidden');
        }
    }

    function _selectHighlightedElement(_e) {
        if (_ignoreEventHandler(_e))
            return;

        if (_e.button !== 0 || _ignoreClick(_e.target))
            return;

        _helper._removeClass(_e.target, 'mf-highlight');

        var _selector = _getElementSelector(_e.target);
        if (_tool._mode === 'exclude') {
            _addToBlacklist(_selector);
        } else if (_tool._mode === 'whitelist') {
            _addToWhitelist(_selector);
        } else {
            _addToTracked(_selector);
        }

        _redrawSelectorBoxes();
    }

    function _ignoreEventHandler(_e) {
        if (_tool._isMinimized || _e.target.nodeType !== 1 || _helper._matches(_e.target, '#mouseflow *'))
            return true;

        _e.preventDefault();
        _e.stopPropagation();

        return false;
    }

    function _ignoreClick(_element) {
        return _element === _document.body || _helper._matches(_element, 'html') ||
            (_tool._mode === 'whitelist' && (!/INPUT|TEXTAREA/.test(_element.tagName) || /checkbox|radio|button|submit/.test(_element.type)));
    }

    function _addToTracked(_selector) {
        if (_selector && _tool._tracked.indexOf(_selector) === -1) {
            _tool._tracked.unshift(_selector);
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _addToBlacklist(_selector) {
        if (_selector && _tool._blacklist.indexOf(_selector) === -1) {
            _tool._blacklist.unshift(_selector);
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _addToWhitelist(_selector) {
        if (_selector && _tool._whitelist.indexOf(_selector) === -1) {
            _tool._whitelist.unshift(_selector);
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _removeFromBlacklist(_selector) {
        if (_selector && _tool._blacklist.indexOf(_selector) !== -1) {
            _tool._blacklist = _tool._blacklist.filter(function(_item) {
                return _item !== _selector;
            });
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _removeFromWhitelist(_selector) {
        if (_selector && _tool._whitelist.indexOf(_selector) !== -1) {
            _tool._whitelist = _tool._whitelist.filter(function(_item) {
                return _item !== _selector;
            });
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _removeFromTracked(_selector) {
        if (_selector && _tool._tracked.indexOf(_selector) !== -1) {
            _tool._tracked = _tool._tracked.filter(function(_item) {
                return _item !== _selector;
            });
            _saveSettings(_tool);
        }

        _updateListsAndStatusText();
    }

    function _redrawSelectorBoxes() {
        _timer._clearTimeout(_redrawTimeout);

        if (!_redrawTimeout) { // set a maximum timeout between redrawing
            _timer._setTimeout(function() {
                if (_redrawTimeout) {
                    _timer._clearTimeout(_redrawTimeout);
                    _redrawSelectorBoxesInner();
                    _redrawTimeout = undefined;
                }
            }, 200);
        }

        _redrawTimeout = _timer._setTimeout(function() {
            _redrawSelectorBoxesInner();
            _redrawTimeout = undefined;
        }, 100);
    }

    function _redrawSelectorBoxesInner() {
        var _currentBoxes = _privacyToolHtmlElement.querySelectorAll('.highlight-excluded,.highlight-whitelisted,.highlight-tracked'),
            _i;
        for (_i = 0; _i < _currentBoxes.length; _i++) {
            _privacyToolHtmlElement.removeChild(_currentBoxes[_i]);
        }

        _tool._blacklist.forEach(function(_selector) {
            var _elements = _querySelectorAllDeep(_selector, _document);
            for (_i = 0; _i < _elements.length; _i++) {
                _privacyToolHtmlElement.appendChild(
                    _getHtmlElementForBlacklistBox(_selector, _elements[_i].getBoundingClientRect()));
            }
        });

        _tool._whitelist.forEach(function(_selector) {
            var _elements = _querySelectorAllDeep(_selector, _document);
            for (_i = 0; _i < _elements.length; _i++) {
                _privacyToolHtmlElement.appendChild(
                    _getHtmlElementForWhitelistBox(_selector, _elements[_i].getBoundingClientRect()));
            }
        });

        _tool._tracked.forEach(function(_selector) {
            var _elements = _querySelectorAllDeep(_selector, _document);
            for (_i = 0; _i < _elements.length; _i++) {
                _privacyToolHtmlElement.appendChild(
                    _getHtmlElementForTrackBox(_selector, _elements[_i].getBoundingClientRect()));
            }
        });
    }

    function _querySelectorAllDeep(_selector, _root) {
        try {
            var _elements = [];

            _selector.split(',').forEach(function(_selector) {
                var _selectors = _selector.split(' > :document-fragment: > ', 1);

                _root.querySelectorAll(_selectors[0]).forEach(function(_element) {
                    if (_selectors[1] && _element.shadowRoot) {
                        _querySelectorAllDeep(_selectors[1], _element.shadowRoot).forEach(function(_element) {
                            _elements.push(_element);
                        });
                    } else {
                        _elements.push(_element);
                    }
                });
            });

            return _elements;
        } catch (_ex) {
            _log('Could not get element from selector: ' + ex.message);
        }
    }

    function _saveAllLists(_blacklist, _whitelist, _tracked, _successCallback, _failedCallback) {
        if (_saveSuccessCallback) {
            _log('Attempted to save CSS lists while previous save was in progress');
            return;
        }

        _saveSuccessCallback = _successCallback;
        _saveFailedCallback = _failedCallback;
        _clearError();

        _apiTarget.postMessage({
            message: 'MouseflowPrivacyTool_Save',
            blacklist: _blacklist,
            whitelist: _whitelist,
            tracked: _tracked
        }, _appUrl);

        // TODO IE-SUPPORT - This should be removed when IE support is ended
        _timer._setTimeout(function() {
            if (_saveSuccessCallback === _successCallback) {
                _log('Saving CSS lists timed out');

                if (_saveFailedCallback)
                    _saveFailedCallback();

                _saveSuccessCallback = undefined;
                _saveFailedCallback = undefined;
                _showError(
                    'Uh oh! We couldn\'t save your changes.<br><br>' +
                    'Please log into Mouseflow and try again.');
            }
        }, 7500);
    }

    function _getElementSelector(_element) {
        if (_element == null)
            return null;

        try {
            var _id = [];
            while (_element) {
                var _root = _element.getRootNode
                    ? _element.getRootNode()
                    : _document;

                var _selector = _getSelectorByUniqueCombination(_element, _root);
                //var _selector = _getSelectorByClosestUnique(_element, _root) || _getSelectorByUniqueCombination(_element, _root);

                _id.unshift(_selector);
                _element = _root.host;
            }

            return _id.join(' > :document-fragment: > ');
        } catch (ex) {
            _log('Could not get element selector: ' + ex.message);
            return null;
        }
    }

    function _getSelectorByClosestUnique(_element, _root) {
        var _rootSelector = _closestUniqueSelector(_element, _root);
        if (!_rootSelector)
            return null;

        if (_helper._matches(_element, _rootSelector))
            return _rootSelector;

        var _rootElement = _root.querySelector(_rootSelector);
        var _currentElement = _element;
        var _selectors = [];

        while (_currentElement && _currentElement !== _rootElement) {
            var _selectorList = _getSelectorListForElement(_currentElement, _root);
            if (_selectorList.length === 0)
                _selectorList.push(_getSelectorForNthElement(_currentElement));

            _selectors.unshift(_selectorList);
            _currentElement = _currentElement.parentNode;
        }
        _selectors.unshift(_rootSelector);

        return _getUniqueSelectorCombination(_selectors, _root);
    }

    function _getSelectorByUniqueCombination(_element, _root, _selectors) {
        if (!_selectors)
            _selectors = [];

        var _selectorList = _getSelectorListForElement(_element, _root);
        _selectors.unshift(_selectorList);

        var _selector = _getUniqueSelectorCombination(_selectors, _root);
        if (_selector)
            return _selector;

        if (_selectorList.length === 0) {
            _selectorList.push(_getSelectorForNthElement(_element));
            _selector = _getUniqueSelectorCombination(_selectors, _root);
            if (_selector)
                return _selector;
        }

        return _getSelectorByUniqueCombination(_element.parentNode, _root, _selectors);
    }

    function _getUniqueSelectorCombination(_selectors, _root) {
        var _selectorCombinations = _selectors.length > 1
            ? _getSelectorCombinations.apply(this, _selectors)
            : _selectors[0];

        for (var _i = 0; _i < _selectorCombinations.length; _i++) {
            if (_root.querySelectorAll(_selectorCombinations[_i]).length === 1)
                return _selectorCombinations[_i];
        }

        return null;
    }

    function _closestUniqueSelector(_element, _root) {
        var _currentElement = _element;
        while (_currentElement) {
            var _selectorList = _getSelectorListForElement(_currentElement, _root);

            for (var _i = 0; _i < _selectorList.length; _i++) {
                if (_root.querySelectorAll(_selectorList[_i]).length === 1)
                    return _selectorList[_i];
            }

            _currentElement = _currentElement.parentNode;
        }

        return null;
    }

    function _getSelectorListForElement(_element, _root) {
        if (_element === _document.body)
            return ['body'];

        var _selectorList = [];
        var _parent = _element.parentNode;
        var _i;

        var _id = _element.getAttribute('id');
        var _selector = '#' + _helper._cssEscape(_id);
        if (_id && _root.querySelectorAll(_selector).length === 1 && !_helper._parentHasAttribute(_element, 'data-mf-ignore-child-ids') && _config.useIdSelectors)
            return [_selector];

        var _name = _element.getAttribute('name');
        _selector = '[name="' + _helper._cssEscape(_name) + '"]';
        if (_name) {
            if (_root.querySelectorAll(_selector).length === 1)
                return [_selector];
            if (_parent.querySelectorAll(_selector).length === 1)
                _selectorList.push(_selector);
        }

        var _classList = _helper._getClassList(_element);
        for (_i = 0; _i < _classList.length; _i++) {
            _selector = '.' + _helper._cssEscape(_classList[_i]);
            if (_root.querySelectorAll(_selector).length === 1)
                return [_selector];
            if (_parent.querySelectorAll(_selector).length === 1)
                _selectorList.push(_selector);
        }

        for (_i = 0; _i < _classList.length; _i++) {
            _selector = _helper._cssEscape(_element.tagName.toLowerCase()) + '.' + _helper._cssEscape(_classList[_i]);
            if (_root.querySelectorAll(_selector).length === 1)
                return [_selector];
            if (_parent.querySelectorAll(_selector).length === 1)
                _selectorList.push(_selector);
        }

        return _selectorList;
    }

    function _getSelectorForNthElement(_element) {
        var _selector = _helper._cssEscape(_element.tagName.toLowerCase());
        if (_element.parentNode.querySelectorAll(_selector).length === 1)
            return _selector;

        var _nth = 0;
        var _sibling = _element;
        while (_sibling) {
            if (_sibling.tagName === _element.tagName)
                _nth++;
            _sibling = _sibling.previousElementSibling;
        }
        _selector += ':nth-of-type(' + _nth + ')';

        return _selector;
    }

    function _getSelectorCombinations() {
        var _selectorList, _startItems, _endItems, _i;

        var _startIndex = 0;
        var _endIndex = arguments.length - 1;
        var _moveStart = false;
        var _moveEnd = true;

        while (_startIndex < _endIndex) {
            _startItems = undefined;
            for (_i = 0; _i <= _startIndex; _i++) {
                _startItems = _startItems
                    ? _reduceSelectorLists(_startItems, arguments[_i], ' > ')
                    : arguments[_i];
            }

            _endItems = undefined;
            for (_i = arguments.length - 1; _i >= _endIndex; _i--) {
                _endItems = _endItems
                    ? _reduceSelectorLists(arguments[_i], _endItems, ' > ')
                    : arguments[_i];
            }

            var _separator = (_startIndex + 1) == _endIndex
                ? ' > '
                : ' ';

            _selectorList = _selectorList
                ? _selectorList.concat(_reduceSelectorLists(_startItems, _endItems, _separator))
                : _reduceSelectorLists(_startItems, _endItems, _separator);

            if (_moveEnd && _moveStart) {
                _endIndex--;
                _moveStart = false;
                _moveEnd = true;
            } else if (_moveEnd) {
                _endIndex--;
                _moveStart = true;
                _moveEnd = false;
            } else {
                _startIndex++;
                if (_startIndex != _endIndex)
                    _endIndex++;
                _moveStart = true;
                _moveEnd = true;
            }
        }

        return _selectorList;
    }

    function _reduceSelectorLists(_selectorList1, _selectorList2, _separator) {
        var _selectorList = [];

        for (var _i = 0; _i < _selectorList1.length; _i++) {
            for (var _j = 0; _j < _selectorList2.length; _j++) {
                _selectorList.push(_selectorList1[_i] + _separator + _selectorList2[_j]);
            }
        }

        return _selectorList;
    }

    function _readSettings() {
        return _localStorage._getJson('mf_privacyTool') || null;
    }

    function _saveSettings(_settings) {
        _localStorage._setJson('mf_privacyTool', _settings);
    }

    function _deleteSettings() {
        _localStorage._remove('mf_privacyTool');
    }

    function _startButtonLoading() {
        _submitButtonHtmlElement.setAttribute('disabled', '');
        _submitButtonHtmlElement.setAttribute('original-html', _submitButtonHtmlElement.innerHTML);
        _submitButtonHtmlElement.innerHTML = '<i>&bull;</i> <i>&bull;</i> <i>&bull;</i> <i>&bull;</i>';
        _helper._addClass(_submitButtonHtmlElement, 'loading');
    }

    function _stopButtonLoading() {
        _helper._removeClass(_submitButtonHtmlElement, 'loading');
        _submitButtonHtmlElement.innerHTML = _submitButtonHtmlElement.getAttribute('original-html');
        _submitButtonHtmlElement.removeAttribute('original-html');
        _submitButtonHtmlElement.removeAttribute('disabled');
    }

    function _updateListsAndStatusText() {
        _blacklistHtmlElement.innerHTML = _getHtmlForExcludedItems(_tool._blacklist);
        _whitelistHtmlElement.innerHTML = _getHtmlForWhitelistedItems(_tool._whitelist);
        _trackHtmlElement.innerHTML = _getHtmlForTrackedItems(_tool._tracked);
        _statusTextHtmlElement.innerHTML = _getStatusText(_tool._blacklist, _tool._whitelist, _tool._tracked);
        _helper._removeClass(_statusTextHtmlElement, 'red');
    }

    function _showLoadingError(_message) {
        if (!_loadingTextHtmlElement)
            return;

        _loadingTextHtmlElement.innerHTML = _message;
        _helper._addClass(_loadingTextHtmlElement, 'red');
    }

    function _showError(_message) {
        if (!_statusTextHtmlElement)
            return;

        _statusTextHtmlElement.innerHTML = _message;
        _helper._addClass(_statusTextHtmlElement, 'red');
    }

    function _clearError() {
        if (!_statusTextHtmlElement)
            return;

        _statusTextHtmlElement.innerHTML = _getStatusText(_tool._blacklist, _tool._whitelist, _tool._tracked);
        _helper._removeClass(_statusTextHtmlElement, 'red');
    }

    function _getHtmlElementForPrivacyTool(_tool) {
        var _div = _document.createElement('div');
        _div.className = 'privacy-tool is-loading';
        _div.innerHTML = _getHtmlForPrivacyTool(_tool);
        if (_tool._isMinimized)
            _div.className += ' tool-closed';

        var _style = _document.createElement('style');
        _style.type = 'text/css';
        _style.innerHTML = _getCssForPrivacyTool(); // TODO: use constructed stylesheets to reuse the style used for shadow DOMs
        _div.appendChild(_style);

        return _div;
    }

    function _getHtmlElementForHighlightBox() {
        var _div = _document.createElement('div');
        _div.className = 'highlight-box';

        return _div;
    }

    function _getHtmlElementForBlacklistBox(_selector, _rect) {
        var _div = _document.createElement('div');
        _div.className = 'highlight-box highlight-excluded';
        _div.setAttribute('data-target', _selector);
        _div.style.left = _rect.left + _window.pageXOffset + 'px';
        _div.style.top = _rect.top + _window.pageYOffset + 'px';
        _div.style.width = _rect.width + 'px';
        _div.style.height = _rect.height + 'px';

        return _div;
    }

    function _getHtmlElementForWhitelistBox(_selector, _rect) {
        var _div = _document.createElement('div');
        _div.className = 'highlight-box highlight-whitelisted';
        _div.setAttribute('data-target', _selector);
        _div.style.left = _rect.left + _window.pageXOffset + 'px';
        _div.style.top = _rect.top + _window.pageYOffset + 'px';
        _div.style.width = _rect.width + 'px';
        _div.style.height = _rect.height + 'px';

        return _div;
    }

    function _getHtmlElementForTrackBox(_selector, _rect) {
        var _div = _document.createElement('div');
        _div.className = 'highlight-box highlight-tracked';
        _div.setAttribute('data-target', _selector);
        _div.style.left = _rect.left + _window.pageXOffset + 'px';
        _div.style.top = _rect.top + _window.pageYOffset + 'px';
        _div.style.width = _rect.width + 'px';
        _div.style.height = _rect.height + 'px';

        return _div;
    }

    function _getHtmlForPrivacyTool(_tool) {
        return (
            '<form action="#" id="mf_privacy_tool">' +
                '<link rel="stylesheet" href="https://use.typekit.net/eum4oaj.css" integrity="sha512-IvJAKZThVn6ZWi/sYuEWzExyOzWEEBNC+ZP2Ju7FANW9J516gSpwyzHouK1cGiWd0WxNp6a0ZsKpBgKiLfolOQ==" crossorigin="anonymous">' +
                _getHtmlForClosedWidget(_tool) +
                _getHtmlForOpenWidget(_tool) +
            '</form>');
    }

    function _getHtmlForClosedWidget(_tool) {
        return (
            '<div class="step step-block' + (_tool._isMinimized ? ' fade-in' : '') + '">' +
                '<div class="widget-header">' +
                    '<div class="widget-text">Open privacy tool</div>' +
                    '<div class="widget-toggle">' +
                        '<a href="#" class="btn-arrow btn-arrow--up mf-tool-toggle"></a>' +
                    '</div>' +
                '</div>' +
            '</div>');
    }

    function _getHtmlForOpenWidget() {
        return (
            '<div class="tool-container' + (_tool._isMinimized ? '' : ' fade-in') + '">' +
                '<div class="tool-header">' +
                    '<svg class="logo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 168.56 32" class=""><defs></defs><g data-name="Layer 2"><g data-name="Layer 1"><path class="logo-path" d="M35.31,16c0-2.75-2.2-5.18-5.77-6.86.33-3.92-.67-7-3.06-8.43S20.88,0,17.65,2.28l-.31-.21C14.09-.1,11.07-.58,8.83.71S5.44,5.22,5.77,9.14C2.21,10.82,0,13.25,0,16s2.21,5.19,5.78,6.87a2.43,2.43,0,0,0,0,.38c-.26,3.89.84,6.75,3.08,8a5.4,5.4,0,0,0,2.75.71,11,11,0,0,0,6.08-2.28A11,11,0,0,0,23.73,32a5.37,5.37,0,0,0,2.75-.71c2.25-1.29,3.34-4.15,3.09-8l0-.38C33.1,21.19,35.31,18.76,35.31,16ZM23.75,1.94a3.49,3.49,0,0,1,1.77.44c1.48.85,2.27,3,2.14,6a27.56,27.56,0,0,0-4.91-1.2,27.61,27.61,0,0,0-3.49-3.64A8.7,8.7,0,0,1,23.75,1.94ZM7.86,10.36a24,24,0,0,1,3-.9c-.41.62-.82,1.27-1.2,1.94s-.76,1.36-1.09,2A22.4,22.4,0,0,1,7.86,10.36ZM21.71,23a32.55,32.55,0,0,1-4.05.24A32.6,32.6,0,0,1,13.6,23c-.95-.12-1.85-.28-2.7-.47a22.61,22.61,0,0,1-3-.91,23.19,23.19,0,0,1,.73-3.08c.26-.85.58-1.71.94-2.57a33.42,33.42,0,0,1,1.81-3.65A31.45,31.45,0,0,1,13.59,9a26.92,26.92,0,0,1,1.76-2.11,23.13,23.13,0,0,1,2.3-2.18A22.26,22.26,0,0,1,20,6.87c.61.66,1.2,1.36,1.77,2.11A33,33,0,0,1,24,12.36,33.42,33.42,0,0,1,25.77,16c.36.86.68,1.72.94,2.57a21.79,21.79,0,0,1,.74,3.08,23.22,23.22,0,0,1-3,.91C23.56,22.76,22.66,22.92,21.71,23Zm-4.05,2.17c.78,0,1.55,0,2.3-.08a22,22,0,0,1-2.3,2.18,21.08,21.08,0,0,1-2.31-2.18C16.1,25.18,16.87,25.21,17.66,25.21Zm9.05-11.77q-.5-1-1.08-2c-.39-.67-.79-1.31-1.21-1.94a24,24,0,0,1,3,.9A22.4,22.4,0,0,1,26.71,13.44ZM9.79,2.38a3.53,3.53,0,0,1,1.8-.44,8.61,8.61,0,0,1,4.46,1.59,27.07,27.07,0,0,0-3.49,3.64A26.32,26.32,0,0,0,7.65,8.38C7.52,5.42,8.31,3.23,9.79,2.38ZM1.93,16c0-1.84,1.57-3.55,4.12-4.85A26.55,26.55,0,0,0,7.46,16a26.91,26.91,0,0,0-1.41,4.85C3.43,19.49,1.93,17.72,1.93,16Zm9.64,14.06a3.55,3.55,0,0,1-1.78-.43c-1.51-.87-2.28-3.05-2.13-6a26.22,26.22,0,0,0,4.9,1.2,27.17,27.17,0,0,0,3.49,3.65A8.68,8.68,0,0,1,11.57,30.06Zm14-.43c-1.48.85-3.76.44-6.26-1.15a26.56,26.56,0,0,0,3.49-3.65,26.33,26.33,0,0,0,4.91-1.2C27.8,26.58,27,28.76,25.52,29.63Zm3.74-8.77A27.14,27.14,0,0,0,27.85,16a26.55,26.55,0,0,0,1.41-4.86c2.55,1.3,4.13,3,4.13,4.85S31.89,19.49,29.26,20.86Z"></path><path class="logo-path" d="M17.66,10.22a28,28,0,0,0-4.78,10l4.78-2.61,4.78,2.61a29,29,0,0,0-2-5.32A29,29,0,0,0,17.66,10.22Z"></path><path class="logo-path" d="M22.44,20.19l-4.78-2.61-4.78,2.61a28,28,0,0,1,4.78-10,29,29,0,0,1,2.81,4.65A29,29,0,0,1,22.44,20.19Z"></path><path class="logo-path" d="M47.62,22.09V9.91H50l.36,1.53a7.07,7.07,0,0,1,4.17-1.53,3.45,3.45,0,0,1,3.26,1.67,7.58,7.58,0,0,1,4.37-1.67Q66,9.91,66,14.54v7.55H62.94V14.42c0-1.35-.57-2-1.72-2A4.14,4.14,0,0,0,58.36,14v8.12H55.28V14.46c0-1.38-.57-2.07-1.69-2.07A4,4,0,0,0,50.69,14v8.12Z"></path><path class="logo-path" d="M67.93,16q0-6.21,6.15-6.21T80.23,16q0,6.2-6.15,6.2T67.93,16Zm6.15,3.77q3.08,0,3.08-3.82t-3.08-3.72Q71,12.23,71,16T74.08,19.77Z"></path><path class="logo-path" d="M93.58,9.91V22.09H91.17l-.37-1.55a7.65,7.65,0,0,1-4.45,1.55q-4.21,0-4.21-4.53V9.91h3.08v7.68a1.78,1.78,0,0,0,2,2,4.91,4.91,0,0,0,3.28-1.54V9.91Z"></path><path class="logo-path" d="M96.79,21.51V19a12.63,12.63,0,0,0,4.69.81c1.33,0,2-.42,2-1.27s-.45-1.17-1.34-1.17h-2.2c-2.48,0-3.72-1.23-3.72-3.71S98,9.79,101.63,9.79a13.06,13.06,0,0,1,4.33.7V13a11.77,11.77,0,0,0-4.41-.81c-1.66,0-2.49.42-2.49,1.27s.48,1.17,1.45,1.17h2c2.71,0,4.07,1.23,4.07,3.71s-1.73,3.83-5.18,3.83A13.94,13.94,0,0,1,96.79,21.51Z"></path><path class="logo-path" d="M119.58,17.2h-8q0,2.46,4,2.46a20,20,0,0,0,3.69-.35v2.44a20.57,20.57,0,0,1-4.16.34q-6.62,0-6.62-6.23,0-6,6.07-5.95T119.58,17.2Zm-8-2.26h5.09c.1-1.75-.71-2.62-2.44-2.62S111.74,13.19,111.6,14.94Z"></path><path class="logo-path" d="M122.2,22.15V9.31q0-4.43,5.48-4.42a7.84,7.84,0,0,1,2.72.46V7.79a7.29,7.29,0,0,0-2.73-.46c-1.6,0-2.39.86-2.39,2.58h3.65v2.43h-3.65v9.77Z"></path><path class="logo-path" d="M135.07,5.49v16.6H132V5.49Z"></path><path class="logo-path" d="M137.25,16q0-6.21,6.16-6.21T149.56,16q0,6.2-6.15,6.2T137.25,16Zm6.16,3.77q3.08,0,3.07-3.82t-3.07-3.72c-2.06,0-3.08,1.24-3.08,3.72S141.35,19.77,143.41,19.77Z"></path><path class="logo-path" d="M150.58,9.91h3.1l1.81,8.25,2.71-8.25h2.63l2.93,8.25,1.6-8.25h3.2l-3.29,12.18h-2.89l-2.87-8.41-2.9,8.41h-2.94Z"></path></g></g></svg>' +
                    '<div class="tool-toggle">' +
                        '<div class="tool-toggle-text">' +
                            'Hide to navigate' +
                        '</div>' +
                        '<div class="tool-toggle-icon">' +
                            '<a href="#" class="btn-arrow btn-arrow--down mf-tool-toggle"></a>' +
                        '</div>' +
                    '</div>' +
                    '<div class="tool-close">' +
                        '<div class="tool-toggle-text">' +
                            'Close' +
                        '</div>' +
                        '<div class="tool-toggle-icon">' +
                            '<a href="#" class="btn-cross mf-tool-close"></a>' +
                        '</div>' +
                    '</div>' +
                '</div>' +
                '<div class="tool-content">' +
                    '<ul class="tool-menu">' +
                        '<li class="tool-menu-item mf-tool-exclude' + (_tool._mode === 'exclude' ? ' active' : '') + '">' +
                            'Excluded content' +
                        '</li>' +
                        '<li class="tool-menu-item mf-tool-whitelist' + (_tool._mode === 'whitelist' ? ' active' : '') + '">' +
                            'Whitelisted fields' +
                        '</li>' +
                        '<li class="tool-menu-item mf-tool-track' + (_tool._mode === 'track' ? ' active' : '') + '">' +
                            'Tracked elements' +
                        '</li>' +
                    '</ul>' +
                    '<div class="tool-exclude' + (_tool._mode === 'exclude' ? ' active' : '') + '">' +
                        '<h2>Exclude content from appearing in Mouseflow</h2>' +
                        '<p>' +
                            'To get started, just click the element(s) or content you wish to exclude. ' +
                            'This will add the necessary CSS selectors to be blocked in the list below.' +
                        '</p>' +
                        '<p>' +
                            'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' +
                        '</p>' +
                        '<p>' +
                            'For more details and best practices, read our <a href="https://help.mouseflow.com/en/articles/5973120-excluded-whitelisted-tracked-fields" target="_blank">Support Guide</a>.' +
                        '</p>' +
                        '<h3>Excluded content</h3>' +
                        '<div>' +
                            '<output></output>' +
                        '</div>' +
                    '</div>' +
                    '<div class="tool-whitelist' + (_tool._mode === 'whitelist' ? ' active' : '') + '">' +
                        '<h2>Whitelist input fields</h2>' +
                        '<p>' +
                            'You can whitelist any input field or text area, simply by clicking the field(s) on the page. ' +
                            'This will let Mouseflow record input in that field.' +
                        '</p>' +
                        '<p>' +
                            'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' +
                        '</p>' +
                        '<p>' +
                            'For more details and best practices, read our <a href="https://help.mouseflow.com/en/articles/5973120-excluded-whitelisted-tracked-fields" target="_blank">Support Guide</a>.' +
                        '</p>' +
                        '<h3>Whitelisted fields</h3>' +
                        '<div>' +
                            '<output></output>' +
                        '</div>' +
                    '</div>' +
                    '<div class="tool-track' + (_tool._mode === 'track' ? ' active' : '') + '">' +
                        '<h2>Tracked elements</h2>' +
                        '<p>' +
                            'When viewing a heatmap, most of your links will include a box that shows additional metrics(clicks, hovers, etc.).In some cases, these boxes will not appear.' +
                        '</p>' +
                        '<p>' +
                            'If you\'ve found such an element, you can select it here. That will ensure the additional metrics are shown in your heatmaps.' +
                        '</p>' +
                        '<p>' +
                            'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' +
                        '</p>' +
                        '<p>' +
                            'For more details and best practices, read our <a href="https://help.mouseflow.com/en/articles/5973120-excluded-whitelisted-tracked-fields" target="_blank">Support Guide</a>.' +
                        '</p>' +
                        '<h3>Tracked elements</h3>' +
                        '<div>' +
                            '<output></output>' +
                        '</div>' +
                    '</div>' +
                    '<div class="tool-status">' +
                        '<div class="tool-status-text">' +
                            _getStatusText(_tool._blacklist, _tool._whitelist, _tool._tracked) +
                        '</div>' +
                        '<div class="tool-status-buttons">' +
                            '<button type="submit" class="btn-widget">Save and close</button>' +
                            '<a href="#" class="green bold mf-tool-close">Close Privacy Tool</a>' +
                        '</div>' +
                    '</div>' +
                    '<div class="tool-loading">' +
                        '<h2 class="loading">Loading the Privacy Tool<i>.</i><i>.</i><i>.</i></h2>' +
                    '</div>' +
                    '<div class="tool-message">' +
                        '<h3>Browser window is to small to load the Privacy Tool</h3>' +
                        '<p>To use Mouseflow\'s Privacy Tool, you need to view the page in a larger browser window.</p>' +
                    '</div>' +
                '</div>' +
            '</div>');
    }

    function _getHtmlForExcludedItems(_selectors) {
        return _selectors.map(function(_selector) {
            return (
                '<div class="tm-tag" data-target="' + _helper._htmlEscape(_selector) + '">' +
                    _helper._htmlEscape(_selector) +
                    '<a href="#" class="btn-cross mf-remove-excluded"></a>' +
                '</div>');
        }).join('');
    }

    function _getHtmlForWhitelistedItems(_selectors) {
        return _selectors.map(function(_selector) {
            return (
                '<div class="tm-tag" data-target="' + _helper._htmlEscape(_selector) + '">' +
                    _helper._htmlEscape(_selector) +
                    '<a href="#" class="btn-cross mf-remove-whitelisted"></a>' +
                '</div>');
        }).join('');
    }

    function _getHtmlForTrackedItems(_selectors) {
        return _selectors.map(function(_selector) {
            return (
                '<div class="tm-tag" data-target="' + _helper._htmlEscape(_selector) + '">' +
                    _helper._htmlEscape(_selector) +
                    '<a href="#" class="btn-cross mf-remove-tracked"></a>' +
                '</div>');
        }).join('');
    }

    function _getStatusText(_blacklist, _whitelist, _trackedList) {
        return '<p>You have:</p>' +
            '<p>' +
            '&nbsp;&bull; excluded <i class="emphasis"> ' + _blacklist.length + '</i> ' + (_blacklist.length === 1 ? 'element' : 'elements') + '<br>' +
            '&nbsp;&bull; whitelisted <i class="emphasis">' + _whitelist.length + '</i> input ' + (_whitelist.length === 1 ? 'field' : 'fields') + '<br>' +
            '&nbsp;&bull; tracked <i class="emphasis">' + _trackedList.length + '</i> input ' + (_trackedList.length === 1 ? 'element' : 'elements') +
            '</p>';
    }

    function _getStyleSheet() {
        var _sheet = new CSSStyleSheet();
        _sheet.replace(_getCssForPrivacyTool());
        return _sheet;
    }

    function _getCssForPrivacyTool() {
        return (
            ':root {' + 
                '--deep-ocean: #08163c;' +
                '--dusty-cloud: #f7f9fc;' +
                '--dark-border: #bbc8e0;' +
                '--lighter-navy: #d4dbe3;' +
                '--dark-mode: #10172D;' +
                '--serious-business: #0b65e3;' +
                '--light-blue: #66A7FD;' +
                '--subtle-warmth: #7162e3;' +
                '--lighter-aqua: #ebf2fa;' +
                '--dusty-cloud-darker: #E4E9F2;' +
                '--deep-ocean-light: #A1B2D3;' +
                '--redwine-vibes: #cd575f;' +
            '}' +
            '.mf-highlight {' +
                'cursor: pointer !important;' +
            '}' +

            '.mf-privacy-tool-opened iframe {' +
                'pointer-events: none;' +
            '}' +

            '#mouseflow {' +
                'font-weight: 300;' +
                'font-family: \'museo-sans\';' +
            '}' +

            '#mouseflow .highlight-box {' +
                'background-color: #add8e6;' +
                'border: 2px dotted #808080;' +
                'position: absolute;' +
                'border-radius: 2px;' +
                'z-index: 2147483646;' +
                'cursor: pointer;' +
                'pointer-events: none;' +
                'opacity: 0.5;' +
                '-webkit-transition: opacity .075s linear;' +
                'transition: opacity .075s linear;'+
            '}' +

            '#mouseflow .highlight-box.hidden,' +
            '#mouseflow .tool-closed .highlight-box {' +
                'opacity: 0;' +
            '}' +

            '#mouseflow .highlight-box.highlight-excluded {' +
                'background-color: #ffb6c1;' +
                'pointer-events: initial;' +
            '}' +

            '#mouseflow .highlight-box.highlight-whitelisted {' +
                'background-color: #90ee90;' +
                'pointer-events: initial;' +
            '}' +

            '#mouseflow .highlight-box.highlight-tracked {' +
                'background-color: orange;' +
                'pointer-events: initial;' +
            '}' +

            '#mouseflow .tool-closed .highlight-box.highlight-excluded,' +
            '#mouseflow .tool-closed .highlight-box.highlight-whitelisted,' +
            '#mouseflow .tool-closed .highlight-box.highlight-tracked {' +
                'pointer-events: none;' +
            '}' +

            '#mouseflow .btn-widget {' +
                'background: var(--serious-business);' +
            '}' +

            '#mouseflow .widget-header {' +
                'background: var(--dusty-cloud);' +
            '}' +

            '#mouseflow .widget-text,' +
            '#mouseflow .btn-arrow,' +
            '#mouseflow .btn-cross {' +
                'color: var(--deep-ocean);' +
            '}' +

            '#mouseflow .btn-widget {' +
                'color: white;' +
            '}' +

            '#mouseflow .tm-tag {' +
                'margin: 7px 7px 0 0;' +
                'padding: 7px;' +
                'display: inline-block;' +
                'border-radius: 8px;' +
                'border: 1px solid var(--dark-border);' +
                'background-color: var(--dusty-cloud);' +
                'color: var(--deep-ocean);' +
                'font-size: 13px;' +
            '}' +

            '#mouseflow .step {' +
                'visibility: hidden;' +
                'opacity: 0;' +
                'position: fixed;' +
                'bottom: 30px;' +
                'right: 30px;' +
                'z-index: 2147483647;' +
                'width: 300px;' +
                'border-radius: 8px;' +
                'border: 1px solid var(--deep-ocean);' +
                'overflow: hidden;' +
            '}' +

            '#mouseflow a:hover {' +
                'text-decoration: underline;' +
            '}' +

            '#mouseflow h2 {' +
                'font-size: 21px;' +
                'font-weight: 700;' +
                'line-height: 1.4em;' +
                'margin-bottom: 6px;' +
            '}' +

            '#mouseflow h3 {' +
                'font-size: 16px;' +
                'font-weight: 700;' +
                'line-height: 1.4em;' +
            '}' +

            '#mouseflow p {' +
                'margin-bottom: 8px;' +
                'line-height: 1.4em;' +
            '}' +

            '#mouseflow .green {' +
                'color: var(--deep-ocean);' +
            '}' +

            '#mouseflow .red {' +
                'color: var(--redwine-vibes);' +
            '}' +

            '#mouseflow .emphasis {' +
                'color: var(--subtle-warmth);' +
                'font-weight: 700;' +
            '}' +

            '#mouseflow .bold {' +
                'font-weight: 700;' +
            '}' +

            '#mouseflow .tool-container {' +
                'visibility: visible;' +
                'opacity: 0;' +
                'position: fixed;' +
                'bottom: 0;' +
                'left: 0;' +
                'width: 100%;' +
                'height: 350px;' +
                'max-height: 40%;' +
                'overflow: hidden;' +
                'background-color: white;' +
                'box-shadow: 0 0 6px var(--deep-ocean-light);' +
                'z-index: 2147483647;' +
            '}' +

            '#mouseflow .tool-header {' +
                'background-color: var(--dusty-cloud);' +
                'height: 58px;' +
                'border: 1px solid var(--dusty-cloud-darker);' +
            '}' +

            '#mouseflow .logo {' +
                'display: inline;' +
                'height: 30px;' +
                'margin: 14px 10px;' +
                'fill: black;' +
            '}' +

            '#mouseflow .tool-toggle,' +
            '#mouseflow .tool-close {' +
                'float: right;' +
                'padding: 18px 24px;' +
            '}' +

            '#mouseflow .is-loading .tool-close {' +
                'display: block;' +
            '}' +

            '#mouseflow .is-loading .tool-toggle,' +
            '#mouseflow .tool-close {' +
                'display: none;' +
            '}' +

            '#mouseflow .tool-toggle-text {' +
                'display: inline-block;' +
                'color: var(--deep-ocean);' +
                'font-size: 16px;' +
            '}' +

            '#mouseflow .tool-toggle-icon {' +
                'width: 23px;' +
                'display: inline-block;' +
                'position: relative;' +
                'top: 0px;' +
            '}' +

            '#mouseflow .tool-close .tool-toggle-icon {' +
                'top: 4px;' +
            '}' +

            '#mouseflow .tool-content {' +
                'height: calc(100% - 58px);' +
            '}' +

            '#mouseflow .tool-menu {' +
                'width: 15%;' +
                'height: 100%;' +
                'float: left;' +
            '}' +

            '#mouseflow .tool-menu-item {' +
                'background-color: var(--dusty-cloud);' +
                'color: var(--deep-ocean);' +
                'cursor: pointer;' +
                'height: 40px;' +
                'padding: 12px;' +
            '}' +

            '#mouseflow .tool-menu-item.active {' +
                'position: relative;' +
                'background-color: var(--lighter-navy);' +
                'color: var(--deep-ocean);' +
                'cursor: default;' +
            '}' +

            '#mouseflow .tool-exclude,' +
            '#mouseflow .tool-whitelist,' +
            '#mouseflow .tool-track {' +
                'display: none;' +
                'width: 70%;' +
                'height: 100%;' +
                'float: left;' +
                'color: var(--deep-ocean);' +
                'overflow-y: auto;' +
                'overflow-x: hidden;' +
                'padding: 10px 20px;' +
            '}' +

            '#mouseflow .tool-exclude p, #mouseflow .tool-whitelist p, #mouseflow .tool-track p {' +
                'color: black;' +
            '}' +

            '#mouseflow .tool-exclude.active,' +
            '#mouseflow .tool-whitelist.active,' +
            '#mouseflow .tool-track.active {' +
                'display: block;' +
            '}' +

            '#mouseflow .tool-exclude::-webkit-scrollbar,' +
            '#mouseflow .tool-whitelist::-webkit-scrollbar,' +
            '#mouseflow .tool-track::-webkit-scrollbar {' +
                'width: 8px;' +
            '}' +

            '#mouseflow .tool-exclude::-webkit-scrollbar-track,' +
            '#mouseflow .tool-whitelist::-webkit-scrollbar-track,' +
            '#mouseflow .tool-track::-webkit-scrollbar-track {' +
                'border-radius: 10px;' +
                'background-color: #F5F5F5;' +
                '-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);' +
            '}' +

            '#mouseflow .tool-exclude::-webkit-scrollbar-thumb,' +
            '#mouseflow .tool-whitelist::-webkit-scrollbar-thumb,' +
            '#mouseflow .tool-track::-webkit-scrollbar-thumb {' +
                'border-radius: 10px;' +
                'background-color: #a7a7a7;' +
                '-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);' +
            '}' +

            '#mouseflow .tool-status {' +
                'width: 15%;' +
                'background-color: var(--dusty-cloud);' +
                'color: var(--deep-ocean);' +
                'height: 100%;' +
                'float: left;' +
                'position: relative;' +
            '}' +

            '#mouseflow .tool-status-text {' +
                'font-size: 16px;' +
                'font-weight: 300;' +
                'text-align: left;' +
                'padding: 0 15px;' +
                'position: absolute;' +
                'top: 40px;' +
            '}' +

            '#mouseflow .tool-status-buttons {' +
                'width: 100%;' +
                'text-align: center;' +
                'position: absolute;' +
                'padding: 0 30px;' +
                'bottom: 40px;' +
            '}' +

            '#mouseflow .tool-loading {' +
                'width: 100%;' +
                'height: calc(100% - 58px);' +
                'background-color: white;' +
                'color: rgb(71, 64, 62);' +
                'position: absolute;' +
                'top: 58px;' +
                'z-index: 2;' +
                'visibility: hidden;' +
                'opacity: 0;' +
                '-webkit-animation: fadeOut .3s linear;' +
                'animation: fadeOut .3s linear;' +
            '}' +

            '#mouseflow .is-loading .tool-loading {' +
                'visibility: visible;' +
                'opacity: 1;' +
                '-webkit-animation: fadeIn .3s linear;' +
                'animation: fadeIn .3s linear;' +
            '}' +

            '#mouseflow .tool-loading h2 {' +
                'position: absolute;' +
                'left: 50%;' +
                'top: 50%;' +
                '-webkit-transform: translate(-50%, -50%);' +
                '-ms-transform: translate(-50%, -50%);' +
                'transform: translate(-50%, -50%);' +
            '}' +

            '#mouseflow .widget-header {' +
                'color: #fff;' +
                'padding: 12px 15px;' +
                'vertical-align: middle;' +
                'overflow: hidden;' +
                'position: relative;' +
                'z-index: 1;' +
                '-webkit-transition: opacity .3s linear;' +
                'transition: opacity .3s linear;' +
            '}' +

            '#mouseflow .widget-header:hover {' +
                'background-color: var(--lighter-aqua);' +
            '}' +

            '#mouseflow .widget-text {' +
                'font-size: 16px;' +
                'line-height: 20px;' +
                'width: 245px;' +
                'display: inline-block;' +
                'vertical-align: middle;' +
            '}' +

            '#mouseflow .widget-toggle {' +
                'width: 20px;' +
                'display: inline-block;' +
                'vertical-align: middle;' +
                'margin: 0;' +
            '}' +

            '#mouseflow .btn-arrow,' +
            '#mouseflow .btn-cross {' +
                'float: right;' +
                'z-index: 10;' +
                'line-height: .5;' +
            '}' +

            '#mouseflow .tool-toggle-icon .btn-arrow,' +
            '#mouseflow .tool-toggle-icon .btn-cross {' +
                'font-size: 23px;' +
            '}' +

            '#mouseflow .widget-toggle .btn-arrow {' +
                'font-size: 23px;' +
            '}' +

            '#mouseflow .tm-tag .btn-cross {' +
                'margin: 3px 0 0 7px;' +
                'font-weight: 700;' +
                'font-size: 16px;' +
            '}' +

            '#mouseflow .btn-arrow--up {' +
                '-webkit-transform: rotate(-90deg) scale(1.5, 1.5);' +
                '-ms-transform: rotate(-90deg) scale(1.5, 1.5);' +
                'transform: rotate(-90deg) scale(1.5, 1.5);' +
            '}' +

            '#mouseflow .btn-arrow--down {' +
                '-webkit-transform: rotate(+90deg) scale(1.5, 1.5);' +
                '-ms-transform: rotate(+90deg) scale(1.5, 1.5);' +
                'transform: rotate(+90deg) scale(1.5, 1.5);' +
            '}' +

            '#mouseflow .widget-toggle .btn-arrow:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: -185px;' +
                'left: -15px;' +
                'right: -15px;' +
                'bottom: -15px;' +
                'display: block;' +
            '}' +

            '#mouseflow .tool-toggle-icon .btn-arrow:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: -10px;' +
                'left: -15px;' +
                'right: -15px;' +
                'bottom: -100px;' +
                'display: block;' +
            '}' +

            '#mouseflow .tool-toggle-icon .btn-cross:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: -25px;' +
                'left: -150px;' +
                'right: -20px;' +
                'bottom: -20px;' +
                'display: block;' +
            '}' +

            '#mouseflow .btn-arrow:after {' +
                'content: "\\203a";' +
                'display: inline;' +
            '}' +

            '#mouseflow .btn-cross:after {' +
                'content: "\\00d7";' +
                'display: inline;' +
                'top: -4px;' +
                'position: relative;' +
            '}' +

            '#mouseflow .tm-tag .btn-cross:after {' +
                'top: 0px;' +
            '}' +

            '#mouseflow .btn-arrow:hover,' +
            '#mouseflow .btn-cross:hover {' +
                'text-decoration: none;' +
            '}' +

            '#mouseflow .btn-widget {' +
                'width: 100%;' +
                'height: 38px;' +
                'border: none;' +
                'border-radius: 8px;' +
                'overflow: hidden;' +
                'position: relative;' +
                'z-index: 1;' +
                'cursor: pointer;' +
                'display: block;' +
                'padding: 10px;' +
                'font-size: 16px;' +
                'font-family: inherit;' +
                'font-weight: bold;' +
                'text-align: center;' +
                'outline: none;' +
                'color: var(--dusty-cloud);' +
                'margin-bottom: 10px;' +
                '-webkit-transition: background-color .3s linear;' +
                'transition: background-color .3s linear;' +
            '}' +

            '#mouseflow .btn-widget:hover {' +
                'text-decoration: none;' +
                'background-color: var(--light-blue);' +
            '}' +

            '#mouseflow .privacy-tool {' +
                'height: 350px;' +
                'max-height: 40%;' +
                '-webkit-transition: height .5s ease-out;' +
                'transition: height .5s ease-out;' +
            '}' +

            '#mouseflow .privacy-tool.tool-closed {' +
                'height: 0;' +
            '}' +

            '#mouseflow .tool-closed .step {' +
                'visibility: visible;' +
            '}' +

            '#mouseflow .tool-closed .tool-container {' +
                'visibility: hidden;' +
            '}' +

            '#mouseflow .step.fade-in,' +
            '#mouseflow .tool-container.fade-in {' +
                '-webkit-animation: fadeUpIn .8s cubic-bezier(0, 0, 0, 1) both;' +
                'animation: fadeUpIn .8s cubic-bezier(0, 0, 0, 1) both;' +
            '}' +

            '#mouseflow .step.fade-out,' +
            '#mouseflow .tool-container.fade-out {' +
                '-webkit-animation: fadeDownOut .8s cubic-bezier(0, 0, 0, 1);' +
                'animation: fadeDownOut .8s cubic-bezier(0, 0, 0, 1);' +
            '}' +

            '#mouseflow .btn-widget.loading {' +
                'cursor: default;' +
            '}' +

            '#mouseflow .btn-widget.loading:before {' +
                'display: none;' +
            '}' +

            '#mouseflow .loading i {' +
                'animation-name: blink;' +
                'animation-duration: 1.4s;' +
                'animation-iteration-count: infinite;' +
                'animation-fill-mode: both;' +
            '}' +

            '#mouseflow .loading i:nth-child(2) {' +
                'animation-delay: .2s;' +
            '}' +

            '#mouseflow .loading i:nth-child(3) {' +
                'animation-delay: .4s;' +
            '}' +

            '#mouseflow .loading i:nth-child(4) {' +
                'animation-delay: .6s;' +
            '}' +

            '#mouseflow .tool-message {' +
                'width: 100%;' +
                'height: calc(100% - 58px);' +
                'background-color: white;' +
                'color: rgb(71, 64, 62);' +
                'position: absolute;' +
                'top: 58px;' +
                'z-index: 3;' +
                'padding: 20px;' +
                'overflow-y: auto;' +
                'overflow-x: hidden;' +
                'visibility: hidden;' +
                'opacity: 0;' +
                '-webkit-animation: fadeOut .3s linear;' +
                'animation: fadeOut .3s linear;' +
            '}' +

            '#mouseflow .tool-message h3 {' +
                'margin-bottom: 20px;' +
            '}' +

            '@media (max-width: 1300px) {' +
                '#mouseflow .tool-exclude,' +
                '#mouseflow .tool-whitelist,' +
                '#mouseflow .tool-track {' +
                    'width: 60%;' +
                '}' +

                '#mouseflow .tool-status {' +
                    'width: 25%;' +
                '}' +

                '#mouseflow .tool-status-buttons {' +
                    'bottom: 10px;' +
                '}' +
            '}' +

            '@media (max-width: 850px) {' +
                '#mouseflow .tool-menu-item {' +
                    'height: 56px;' +
                '}' +

                '#mouseflow .tool-status-text {' +
                    'font-size: 14px;' +
                '}' +

                '#mouseflow .btn-widget {' +
                    'font-size: 12px;' +
                '}' +

                '#mouseflow a.mf-tool-close {' +
                    'font-size: 12px;' +
                '}' +
            '}' +

            '@media (max-height: 800px) {' +
                '#mouseflow .tool-status-text {' +
                    'top: 20px;' +
                '}' +

                '#mouseflow .tool-status-buttons {' +
                    'bottom: 20px;' +
                '}' +
            '}' +

            '@media (max-height: 650px) {' +
                '#mouseflow .tool-status-text {' +
                    'font-size: 14px;' +
                '}' +
            '}' +

            '@media (max-width: 650px), (max-height: 600px) {' +
                '#mouseflow .tool-message {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                    '-webkit-animation: fadeIn .3s linear;' +
                    'animation: fadeIn .3s linear;' +
                '}' +
            '}' +

            '@-webkit-keyframes fadeUpIn {' +
                '0% {' +
                    '-webkit-transform: translateY(50px);' +
                    '-ms-transform: translateY(50px);' +
                    'transform: translateY(50px);' +
                    'opacity: 0;' +
                '}' +

                '100% {' +
                    '-webkit-transform: translateY(0);' +
                    '-ms-transform: translateY(0);' +
                    'transform: translateY(0);' +
                    'opacity: 1;' +
                '}' +
            '}' +

            '@keyframes fadeUpIn {' +
                '0% {' +
                    '-webkit-transform: translateY(50px);' +
                    '-ms-transform: translateY(50px);' +
                    'transform: translateY(50px);' +
                    'opacity: 0;' +
                '}' +

                '100% {' +
                    '-webkit-transform: translateY(0);' +
                    '-ms-transform: translateY(0);' +
                    'transform: translateY(0);' +
                    'opacity: 1;' +
                '}' +
            '}' +

            '@-webkit-keyframes fadeDownOut {' +
                '0% {' +
                    'visibility: visible;' +
                    '-webkit-transform: translateY(0);' +
                    '-ms-transform: translateY(0);' +
                    'transform: translateY(0);' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'visibility: hidden;' +
                    '-webkit-transform: translateY(50px);' +
                    '-ms-transform: translateY(50px);' +
                    'transform: translateY(50px);' +
                    'opacity: 0;' +
                '}' +
            '}' +

            '@keyframes fadeDownOut {' +
                '0% {' +
                    'visibility: visible;' +
                    '-webkit-transform: translateY(0);' +
                    '-ms-transform: translateY(0);' +
                    'transform: translateY(0);' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'visibility: hidden;' +
                    '-webkit-transform: translateY(50px);' +
                    '-ms-transform: translateY(50px);' +
                    'transform: translateY(50px);' +
                    'opacity: 0;' +
                '}' +
            '}' +

            '@-webkit-keyframes fadeIn {' +
                '0% {' +
                    'visibility: visible;' +
                    'opacity: 0;' +
                '}' +

                '100% {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                '}' +
            '}' +

            '@keyframes fadeIn {' +
                '0% {' +
                    'visibility: visible;' +
                    'opacity: 0;' +
                '}' +

                '100% {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                '}' +
            '}' +

            '@-webkit-keyframes fadeOut {' +
                '0% {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'visibility: hidden;' +
                    'opacity: 0;' +
                '}' +
            '}' +

            '@keyframes fadeOut {' +
                '0% {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'visibility: hidden;' +
                    'opacity: 0;' +
                '}' +
            '}' +

            '@keyframes blink {' +
                '0% {' +
                    'opacity: .2;' +
                '}' +

                '20% {' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'opacity: .2;' +
                '}' +
            '}');
    }

    

    this._start = _start;
    this._stop = _stop;
}
/******************************************************************************************
Mouseflow recording script, tagger tool
-------------------------------------------------------------------------------------------
Copyright (c) 2016 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _TaggerTool(_window, _rootElement, _timer, _helper, _eventListener, _config) {
    var _log,
        _rootHtmlElement,
        _initInterval,
        _appUrl,
        _startWithHeatMap,
        _callbackFinish;

    function _start(_logInput, _base, _startWithHeatMapBool, _callback) {
        _appUrl = _base;
        _log = _logInput;
        _callbackFinish = _callback;
        _startWithHeatMap = !!_startWithHeatMapBool;
        _log('Tagger tool starting');

        _rootHtmlElement = _rootElement._createHtmlElement();

        if (!_rootHtmlElement) {
            _log('Tagger tool not initiated - could not create root HTML element');
            return;
        }

        if (!_window.opener) {
            _log('Tagger tool not initiated - window.opener is missing');
            return;
        }

        _setupEventListener();
    }

    function _setupEventListener() {
        _eventListener._on(_window, 'message', function (_event) {
            if (_event.origin !== _appUrl)
                return;

            _logMessageReceived(_event.data);

            switch (_event.data.message) {
                case 'MouseflowTaggerTool_Init_Received':
                    _window.clearInterval(_initInterval);
                    break;
                case 'MouseflowTaggerTool_Init_Success':
                    _loadScripts(_event.data.scripts,
                        function () {
                            if (typeof _callbackFinish === 'function')
                                _callbackFinish();
                            _log('Tagger tool scripts loaded');
                        });
                    break;
            }
        });

        _initInterval = _window.setInterval(_initTaggerTool, 500);
        _window.setTimeout(function () {
            _window.clearInterval(_initInterval);
        }, 10000);
        _initTaggerTool();
    }

    function _initTaggerTool() {
        _postMessage({
            message: 'MouseflowTaggerTool_Init',
            startWithHeatMap: _startWithHeatMap
        });
    }

    function _loadScripts(_scripts, _callback) {
        if (!_scripts)
            return;

        var _scriptIndex = 0;

        function _loadNextScript() {
            if (_scriptIndex >= _scripts.length) {
                _callback();
                return;
            }

            var _script = _scripts[_scriptIndex];
            _logLoadingScript(_script);
            _scriptIndex++;

            var _scriptElement = document.createElement('script');
            if (_script.startsWith('/'))
                _scriptElement.src = _appUrl + _script;
            else
                _scriptElement.src = _appUrl + '/' + _script;

            _scriptElement.onload = _loadNextScript;

            _rootHtmlElement.appendChild(_scriptElement);
        }

        _loadNextScript();
    }

    function _logLoadingScript(_script) {
        _log('Tagger tool loading script: ' + _script);
    }

    function _logMessageReceived(_data) {
        if (_data.message && _data.message.indexOf('MouseflowTaggerTool_') === 0)
            _log('Received ' + _data.message + (_data.requestUrl ? ', request URL: ' + _data.requestUrl : ''));
    }

    function _postMessage(_data) {
        _window.opener.postMessage(_data, _appUrl);
        _log('Sent ' + _data.message + (_data.requestUrl ? ', request URL: ' + _data.requestUrl : ''));
    }

    this._start = _start;
}
/******************************************************************************************
Mouseflow recording script, URL filter module
-------------------------------------------------------------------------------------------
Copyright (c) 2020 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _UrlFilter(_config, _mergeUrls, _pageIdentifiers) {
    function _getDisplayUrl() {
        var _pathname = (_config.crossDomainSupport ? _config.location.hostname : '') + (_config.path || (_config.decodePathName ? decodeURIComponent(_config.location.pathname) : _config.location.pathname)).toLowerCase();
        var _hash = (_config.includeHashInPath ? _config.location.hash : '').toLowerCase();
        var _search = _config.location.search.toLowerCase();

        if (_pathname !== '/' && _pathname.slice(-1) === '/' && (!_config.includeQueryStringInPath && !_config.includeHashInPath))
            _pathname = _pathname.slice(0, -1);

        return _applyMergeUrls(_pathname + (_config.includeQueryStringInPath ? _search : '') + _hash)
            || _pathname + _applyQueryString(_search) + _hash;
    }

    function _applyMergeUrls(_pathname) {
        return _mergeUrls.filter(function(_mergeUrl) {
            return _matchesMergeUrl(_pathname, _mergeUrl);
        }).map(function(_mergeUrl) {
            return _getAlias(_pathname, _mergeUrl);
        })[0];
    }

    function _applyQueryString(_search) {
        if (_search[0] === '?')
            _search = _search.slice(1);

        var _match;
        var _searchItems = [];
        var _regex = /([^&=]+)=?([^&]*)/g;
        while (_match = _regex.exec(_search)) {
            var _index = _pageIdentifiers.indexOf(_match[1]);
            if (_match[2] && _index > -1)
                _searchItems[_index] = _match[0];
        }

        return _searchItems.length
            ? '?' + _searchItems.filter(hasValue).join('&')
            : (_config.includeQueryStringInPath && _search ? '?' + _search : '');
    }

    function _matchesMergeUrl(_pathname, _mergeUrl) {
        var _searchIndex = _pathname.indexOf('?');
        if (!_config.includeQueryStringInPath && _searchIndex > -1)
            _pathname = _pathname.slice(0, _searchIndex);

        switch (_mergeUrl._type) {
            case 'equals':
                return _pathname === _mergeUrl._value.toLowerCase();
            case 'startsWith':
                return _pathname.substr(0, _mergeUrl._value.length) === _mergeUrl._value;
            case 'endsWith':
                return _pathname.substr(-_mergeUrl._value.length) === _mergeUrl._value;
            case 'contains':
                return _pathname.includes(_mergeUrl._value.toLowerCase());
            case 'regex':
                return new RegExp(_mergeUrl._value).test(_pathname);
            default:
                return false;
        }
    }

    function _getAlias(_pathname, _mergeUrl) {
        if (_mergeUrl._alias)
            return _mergeUrl._alias;

        switch (_mergeUrl._type) {
            case 'startsWith':
                return _mergeUrl._value + '*';
            case 'endsWith':
                return '*' + _mergeUrl._value;
            default:
                return _mergeUrl._value;
        }
    }

    function hasValue(value) {
        return value;
    }

    this._getDisplayUrl = _getDisplayUrl;
}
/******************************************************************************************
Mouseflow recording script, storage module
-------------------------------------------------------------------------------------------
Copyright (c) 2023 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
Examples
-------------------------------------------------------------------------------------------
Construct a storage object for localStorage:
var _localStorage = _Storage('local', _window, _helper);

Construct a storage object for sessionStorage:
var _localStorage = _Storage('session', _window, _helper);

Get string value from storage:
var _value = _storage._get('some-key');

Set string value to storage:
var _value = _storage._set('some-key', 'some-value');

Get JSON parsed object from storage:
var _value = _storage._getJson('some-key');

Set JSON stringified object to storage:
var _value = _storage._setJson('some-key', { key: 'value' });
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _Storage(_type, _window, _helper, _log) {
    var _storage = _getStorage(_type);

    this._get = function(_key) {
        try {
            return _storage.getItem(_key) || null;
        } catch (e) {
            _log(e);
            return null;
        }
    };

    this._getJson = function(_key) {
        try {
            return _helper._jsonParse(this._get(_key)) || null;
        } catch (e) {
            _log(e);
            return null;
        }
    };

    this._set = function(_key, _value) {
        try {
            _storage.setItem(_key, _value);
            return true;
        } catch (e) {
            _log(e);
            return false;
        }
    };

    this._setJson = function(_key, _value) {
        try {
            return this._set(_key, _helper._jsonStringify(_value));
        } catch (e) {
            _log(e);
            return false;
        }
    };

    this._remove = function(_key) {
        try {
            _storage.removeItem(_key);
        } catch (e) {
            _log(e);
        }
    };

    this._hasBrowserSupport = function() {
        try {
            var _key = 'mf_supportsSessionStorage';
            var _value = '1';
            _storage.setItem(_key, _value);
            var _supportsSessionStorage = _storage.getItem(_key) === _value;
            _storage.removeItem(_key);

            return _supportsSessionStorage;
        } catch (e) {
            _log(e);
            return false;
        }
    };

    function _getStorage(_type) {
        switch (_type) {
            case 'local':
                return _window.localStorage;
            case 'session':
                return _window.sessionStorage;
            default:
                throw Error('Unknown storage type: ' + (_type || 'null'));
        }
    }
}
/******************************************************************************************
Mouseflow recording script, recording events module
-------------------------------------------------------------------------------------------
Copyright (c) 2018 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
Examples
-------------------------------------------------------------------------------------------
Event listener for bubbling click events (upstream) on all DOM elements:
_eventListener._on(_document, 'click', function(_e) { });

Event listener for capturing click events (downstream) on all DOM elements:
_eventListener._on(_document, 'click', function(_e) { }, { _capture: true });

Delegated event listener for capturing click events (downstream) on DOM elements that has a 'js-click' class:
_eventListener._on(_document, 'click', '.js-click', function(_e) { }, { _capture: true });

Always trigger event listener for click events on all DOM elements, but set _e.delegatedTarget to the element that has a 'js-click' class:
_eventListener._on(_document, 'click', '.js-click', function(_e) { }, { _optionalFilter: true });

Automatically call _e.preventDefault() for click events on all DOM elements:
_eventListener._on(_document, 'click', function(_e) { }, { _preventDefault: true });

Automatically call _e.stopPropagation() for click events on all DOM elements:
_eventListener._on(_document, 'click', function(_e) { }, { _stopPropagation: true });

Delegated event listener for mouseenter events.
_eventListener._on(_document, 'mouseenter', '.js-mouseenter', function(_e) { }, { _capture: true, _exactMatch: true });
Note: mouseenter does not bubble, so we need to capture it downstream to use event delegation
      mouseenter is triggered as separate events for each element downstream, so we need the target to match the filter exactly

Event listener for document scroll events:
_eventListener._on(_document, 'scroll', function(_e) { }, { _exactMatch: true });

Event listener for window resize events:
_eventListener._on(_window, 'resize', function(_e) { }, { _exactMatch: true });

_eventListener._on(_form, 'submit', function(_e) { }, { _capture: true, _preventDefault: true, _stopPropagation: true, _exactMatch: true });
Note: you can mix multiple options to get the desired behaviour
      capture event listeners are desired to avoid interference caused by stopPropagation
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _EventListener(_native, _helper) {
    var _eventListeners = [];
    var _clonedEventKeys = [
        'target', 'button', 'pageX', 'pageY', 'which', 'data', 'origin', 'source', 'touches'
    ];

    // _target (object): DOM element to add event listener on
    // _eventType (string): The event to bind event listener to
    // _filter (string): optional CSS selector used for event delegation - https://learn.jquery.com/events/event-delegation/
    //     Note: the first DOM element matched by the filter is set to Event.delegatedTarget
    // _listener (function): Callback to be triggered
    // _options (object): optional settings for configuration
    // _options._capture (boolean): Determines whether the event is triggered on the way down (capture) or the way up (bubble)
    // _options._preventDefault (boolean): Automatically call Event.preventDefault() when event is triggered - https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
    // _options._stopPropagation (boolean): Automatically call Event.stopPropagation() when event is triggered - https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation
    // _options._optionalFilter (boolean): Always trigger the event listener, event when the filter does not match.
    //     Note: if the filter matches an element, it is set to Event.delegatedTarget
    // _options._exactMatch (boolean): Event.target must match Event.delegatedTarget or _target
    function _addEventListener(_target, _eventType, _filter, _listener, _options) {
        var _capture = !!_options._capture;
        var _proxyListener = function(_e) {
            var _composedPath = [];
            if (_e.composedPath && ((_e.target && _e.target.shadowRoot) || _filter))
                _composedPath = _e.composedPath();

            var _orig = _e;
            _e = _cloneEvent(_e);
            _e.preventDefault = function() { _orig.preventDefault(); };
            _e.stopPropagation = function() { _orig.stopPropagation(); };

            if (_e.target && _e.target.shadowRoot && _composedPath.length)
                _e.target = _composedPath[0];

            if (_filter) {
                _e.delegatedTarget = _getDelegatedTarget(function(_el, _i) {
                    return _composedPath.length
                        ? _composedPath[_i]
                        : (_el ? _native._getParent(_el) : _e.target);
                }, _filter);

                if (!_e.delegatedTarget && !_options._optionalFilter)
                    return;

                if (_options._exactMatch && _e.target !== _e.delegatedTarget)
                    return;
            } else if (_options._exactMatch && _e.target !== _target) {
                return;
            }

            if (_options._preventDefault)
                _e.preventDefault();

            if (_options._stopPropagation)
                _e.stopPropagation();

            _listener.apply(this, arguments);
        };

        _target.addEventListener(_eventType, _proxyListener, { capture: _capture });

        _eventListeners.push({
            _target: _target,
            _eventType: _eventType,
            _listener: _proxyListener,
            _capture: _capture
        });
    }

    function _cloneEvent(_e) {
        var _c = {};
        _clonedEventKeys.forEach(function(_key) {
            if (_e[_key] != undefined)
                _c[_key] = _e[_key];
        });
        return _c;
    }

    function _removeAllEventListeners() {
        _eventListeners.forEach(function(_eventListener) {
            _eventListener._target.removeEventListener(
                _eventListener._eventType,
                _eventListener._listener,
                { capture: _eventListener._capture });
        });
        _eventListeners = [];
    }

    function _getDelegatedTarget(_getNextTarget, _filter, _target, _index) {
        if (!_index)
            _index = 0;

        _target = _getNextTarget(_target, _index);
        if (!_target || !_filter)
            return null;

        if (_helper._matches(_target, _filter))
            return _target;

        return _getDelegatedTarget(_getNextTarget, _filter, _target, ++_index);
    }

    this._on = function(_target, _eventType, _filter, _callback, _options) {
        // When the _filter argument is left out, shift the last arguments
        if (typeof _filter === 'function') {
            _options = _callback;
            _callback = _filter;
            _filter = null;
        }
        _addEventListener(_target, _eventType, _filter, _callback, _options || {});
    };

    this._removeAll = _removeAllEventListeners;
}
/******************************************************************************************
Mouseflow recording script, page matcher module
-------------------------------------------------------------------------------------------
Copyright (c) 2018 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _PageMatcher(_config, _helper) {
    function _matchesPage(_pageRules) {
        if (!_pageRules || !_pageRules.length)
            return true;

        _pageRules = _pageRules.filter(function(_pageRule) {
            return _pageRule && _pageRule._type && _pageRule._value;
        });

        var _positiveRules = _pageRules.filter(function(_pageRule) {
            return _pageRule._type.indexOf('not') !== 0;
        });
        var _matchesPositiveRules = _positiveRules.length === 0 || _positiveRules.some(function (_pageRule) {
            return _matchesPageRule(_pageRule);
        });

        var _negativeRules = _pageRules.filter(function(_pageRule) {
            return _pageRule._type.indexOf('not') === 0;
        });
        var _matchesNegativeRules = _negativeRules.length === 0 || _negativeRules.every(function(_pageRule) {
            return _matchesPageRule(_pageRule);
        });

        return _matchesNegativeRules && _matchesPositiveRules;
    }

    function _matchesPageRule(_pageRule) {
        var _pathname = (_config.path || _config.location.pathname).toLowerCase();
        var _hash = (_config.includeHashInPath ? _config.location.hash : '').toLowerCase();
        var _search = (_config.includeQueryStringInPath ? _config.location.search : '').toLowerCase();
        var _path = _pathname + _search + _hash;

        var _isMatch = _matchesPageRuleInner(_pageRule, _path);

        if (!_isMatch && _config.crossDomainSupport)
            _isMatch = _matchesPageRuleInner(_pageRule, _config.location.hostname + _path);

        return _isMatch;
    }

    function _matchesPageRuleInner(_pageRule, _path) {
        var _type = _pageRule._type || '';
        var _value = _pageRule._value || '';

        switch (_type.toLowerCase()) {
            case 'equals':
                _path = _helper._trimRight(_path, '/').toLowerCase();
                _value = _helper._trimRight(_value, '/').toLowerCase();
                return _path === _value;
            case 'startswith':
                _path = _path.toLowerCase();
                _value = _value.toLowerCase();
                return _path.substr(0, _value.length) === _value;
            case 'endswith':
                _path = _helper._trimRight(_path, '/').toLowerCase();
                _value = _helper._trimRight(_value, '/').toLowerCase();
                return _path.substr(-_value.length) === _value;
            case 'regex':
                return new RegExp(_value).test(_path);
            case 'notequals':
            case 'notstartswith':
            case 'notendswith':
                return !_matchesPageRule({
                    _type: _type.slice(3),
                    _value: _value
                });
            case 'contains':
                return _path.includes(_value.toLowerCase());
            case 'notcontains':
                return !_path.includes(_value.toLowerCase());
            default:
                return true;
        }
    }

    this._matchesPage = _matchesPage;
    this._matchesPageRule = _matchesPageRule;
}
/******************************************************************************************
Mouseflow recording script, config module
-------------------------------------------------------------------------------------------
Copyright (c) 2018 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _Config(_window, _localStorage, _gdprDefault, _honorDoNotTrack) {
    var _location = _window.location;

    function _parseUrl(_url) {
        var _matches = (_url || '').match(/^(([^:]+:)?\/?\/?(([^:\/\?#]+)?:?(\d+)?))(\/.*?)?(\?.*?)?(#.*)?$/);
        return {
            href: _matches[0] || '',
            origin: _matches[1] || '',
            protocol: _matches[2] || '',
            host: _matches[3] || '',
            hostname: _matches[4] || '',
            port: _matches[5] || '',
            pathname: _matches[6] || '',
            search: _matches[7] || '',
            hash: _matches[8] || ''
        };
    }

    this.debug = _window.mouseflowDebug || _location.search.indexOf('mf_debug=1') !== -1;
    this.includeDebugTime = false;
    this.forceStart = _location.search.indexOf('mf_force=1') !== -1;
    this.autoStart = _window.mouseflowAutoStart !== false && _location.search.indexOf('mf_autostart=0') === -1;
    this.enableBots = false;
    this.touchEvents = !_window.mouseflowDisableTouch;
    this.htmlDelay = _window.mouseflowHtmlDelay || 1000;
    this.newPageViewHtmlDelay = _window.mouseflowNewPageViewHtmlDelay || 500;
    this.compress = _window.mouseflowCompress !== false && _location.search.indexOf('mf_compress=0') === -1;
    this.compressFunction = null;
    this.autoTagging = _window.mouseflowAutoTagging !== false;
    this.path = _window.mouseflowPath;
    this.crossDomainSupport = !!_window.mouseflowCrossDomainSupport;
    this.location = _parseUrl(_window.mouseflowHref || _location.href);
    this.htmlFetchMode = _window.mouseflowHtmlFetchMode || 'post';
    this.sessionId = _window.mouseflowSessionId;
    this.honorDoNotTrack = _window.mouseflowHonorDoNotTrack || _honorDoNotTrack;
    this.gdprEnabled = _window.mouseflowForceGdpr || _gdprDefault;
    this.keyLogging = !_window.mouseflowDisableKeyLogging && !this.gdprEnabled;
    this.domReuse = !_window.mouseflowDisableDomReuse;
    this.domDeduplicator = !_window.mouseflowDisableDomDeduplicator;
    this.includeSubDomains = !_window.mouseflowExcludeSubDomains;
    this.registerSubmitTimeout = _window.mouseflowRegisterSubmitTimeout || 2000;
    this.useUnload = !!_window.mouseflowUseUnload;
    this.replaceLastFormValues = _window.mouseflowReplaceLastFormValues || !this.keyLogging || this.gdprEnabled;
    this.useAllHoverSelectors = !!_window.mouseflowUseAllHoverSelectors;
    this.enableCssRecording = !!_window.mouseflowEnableCssRecording;
    this.secureCookie = !!_window.mouseflowSecureCookie;
    this.enableSpa = true;
    this.includeHashInPath = false;
    this.includeQueryStringInPath = false;
    this.autoTagPayments = true;
    this.preferStorageApi = !!_window.mouseflowPreferStorageApi;
    this.domMutationDetectorEnable = _window.domMutationDetectorEnable !== undefined ? _window.domMutationDetectorEnable : false; // toggle dom mutation detector
    this.domMutationUseParentNode = _window.domMutationUseParentNode !== undefined ? _window.domMutationUseParentNode : true; // i.e. use the parent node id when constructing the mutation key
    this.domMutationUsePreviousSibling = _window.domMutationUsePreviousSibling !== undefined ? _window.domMutationUsePreviousSibling : false; // i.e. use the previous sibling id when constructing the mutation key
    this.domMutationCountThreshold = _window.domMutationCountThreshold !== undefined ? _window.domMutationCountThreshold : 20; // i.e. only add every 20th mutation
    this.domMutationTimeThresholdInSeconds = _window.domMutationTimeThresholdInSeconds !== undefined ? _window.domMutationTimeThresholdInSeconds : 10; // add the mutation if it hasn't occured in 10 seconds
    this.liveHeatmapsEnabled = false;
    this.privacyToolEnabled = false;
    this.taggerToolEnabled = false;
    this.useIdSelectors = _window.mouseflowUseIdSelectors !== undefined ? _window.mouseflowUseIdSelectors : true;
    this.proxyAttachShadow = true;
    this.scrollSelector = _window.mouseflowScrollSelector;
    this.autoScrollSelector = _window.mouseflowAutoScrollSelector || false;
    this.freezeElementIds = [];
    this.proxyValueSetter = false;
    this.decodePathName = false;
    this.forms = _window.mouseflowFormsConfiguration || null;

    this._init = function() {
        if (!!_window.opener && _location.search.indexOf('mf_liveHeatmaps') !== -1){
            this.liveHeatmapsEnabled = true;
            this.taggerToolEnabled = true;
            return;
        }

        if (_location.search.indexOf('mf_inspect') !== -1) {
            this.privacyToolEnabled = true;
            return;
        }

        if (!!_window.opener && (typeof _window.name === 'string' && _window.name.indexOf('mf_liveHeatmaps') === 0)) {
            this.liveHeatmapsEnabled = true;
            this.taggerToolEnabled = true;
            return;
        }

        if (_window.name === 'mf_privacyTool'){
            this.privacyToolEnabled = true;
            return;
        }

        if (_window.name.indexOf('mf_tagger_tool') > -1) {
            this.taggerToolEnabled = true;
            return;
        }

        if (!_localStorage._hasBrowserSupport())
            return;

        if (_window.opener) {
            if (_localStorage._get('mf_privacyTool'))
                this.privacyToolEnabled = true;
            else if (_localStorage._get('mf_liveHeatmaps')) {
                this.liveHeatmapsEnabled = true;
                this.taggerToolEnabled = true;
            }
        }
    };

    this._resetLocation = function(_path, _location) {
        this._setConfig('href', window.location.href);
        this.path = undefined;

        if (_path)
            this.path = _path.toString();

        if (_location)
            this.location = _location;
    };

    this._setConfig = function(_key, _value) {
        switch (_key) {
            case 'href':
                this.location = _parseUrl(_value);
                break;
            case 'keyLogging':
                this.keyLogging = this.keyLogging && _value;
                break;
            case 'gdprEnabled':
                this.gdprEnabled = this.gdprEnabled || _value;
                break;
            case 'freezeElementIds':
                this.freezeElementIds = Array.isArray(_value)
                    ? _value
                    : ['' + _value];
                break;
            case '_cssSelectorBlackList':
            case '_cssSelectorWhiteList':
            case '_cssSelectorTracked':
            case '_websiteId':
            case '_enforcePrivacy':
            case '_initialDomLimit':
                break;
            default:
                this[_key] = _value;
                break;
        }
    };
}
/******************************************************************************************
Mouseflow recording script, Root element
-------------------------------------------------------------------------------------------
Copyright (c) 2016 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _RootElement(_window) {
    var _document = _window.document,
        _htmlElement;

    function _createHtmlElement() {
        if (_document.body && !_htmlElement) {
            _htmlElement = _getHtmlElement();
            _document.body.appendChild(_htmlElement);
        }

        return _htmlElement;
    }

    function _removeHtmlElement() {
        if (_htmlElement) {
            _document.body.removeChild(_htmlElement);
            _htmlElement = undefined;
        }
    }

    function _getHtmlElement() {
        var _div = _document.createElement('div');
        _div.id = 'mouseflow';

        var _style = _document.createElement('style');
        _style.type = 'text/css';
        _style.innerHTML = _getCss();

        var _loadFont = _document.createElement('div');
        _loadFont.className = 'load-font';
        _loadFont.innerHTML = 'load font';

        _div.appendChild(_style);
        _div.appendChild(_loadFont);

        return _div;
    }

    function _getCss() {
        return (
            '@font-face {' +
                'font-family: "Droid Sans";' +
                'font-style: normal;' +
                'font-weight: 400;' +
                'src: local("Droid Sans Regular"), local("DroidSans-Regular"), url(https://cdn.mouseflow.com/fonts/gstatic_droidsans.woff2) format("woff2");' +
                'unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2212, U+2215;' +
            '}' +

            '#mouseflow :before, #mouseflow :after {' +
                'display: none;' +
            '}' +

            '#mouseflow,' +
            '#mouseflow * {' +
                'background: transparent;' +
                'border: 0;' +
                'border-image-outset: 0s;' +
                'border-image-repeat: stretch;' +
                'border-image-slice: 100%;' +
                'border-image-source: none;' +
                'border-image-width: 1;' +
                'border-color: #000;' +
                'border-radius: 0;' +
                'border-width: 0;' +
                'border-style: none;' +
                'box-sizing: border-box;' +
                'clip: auto;' +
                'float: none;' +
                'color: inherit;' +
                'font-family: inherit;' +
                'font-size: inherit;' +
                'font-style: inherit;' +
                'font-weight: inherit;' +
                'width: auto;' +
                'height: auto;' +
                'min-width: auto;' +
                'min-height: auto;' +
                'max-width: auto;' +
                'max-height: auto;' +
                'letter-spacing: normal;' +
                'line-height: normal;' +
                'margin: 0;' +
                'padding: 0;' +
                'text-decoration: none;' +
                'text-indent: 0;' +
                'text-transform: none;' +
                'vertical-align: baseline;' +
                'text-align: left;' +
                'overflow: visible;' +
                'top: auto;' +
                'right: auto;' +
                'bottom: auto;' +
                'left: auto;' +
                '-webkit-transition: none;' +
                'transition: none;' +
            '}' +

            '#mouseflow {' +
                'font: 400 14px/1.4 "Droid Sans", Helvetica, Arial, sans-serif;' +
                'color: #666;' +
            '}' +

            '#mouseflow .load-font {' +
                'position: absolute;' +
                'visibility: hidden;' +
                'width: 0px;' +
                'height: 0px;' +
                'overflow: hidden;' +
            '}');
    }

    this._createHtmlElement = _createHtmlElement;
    this._removeHtmlElement = _removeHtmlElement;
}
/******************************************************************************************
Mouseflow recording script, timer module
-------------------------------------------------------------------------------------------
Copyright (c) 2020 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
Examples
-------------------------------------------------------------------------------------------
Set a timer which executes a function once the timer expires:
_timer._setTimeout(function() {
    // Do something
}, 100);

Repeatedly calls a function with a fixed time delay between each call:
_timer._setInterval(function() {
    // Do something
}, 100);

Get a unique ID for the timeout/interval, which can be used to remove them:
var _timeoutId = _timer._setTimeout(function() { }, 100);
var _intervalId = _timer._setInterval(function() { }, 100);

Cancel a timeout previously established by calling setTimeout:
_timer._clearTimeout(_timeoutId);

Cancel a timed, repeating action which was previously established by a call to setInterval:
_timer._clearInterval(_intervalId);

******************************************************************************************/
// ReSharper disable InconsistentNaming
function _Timer(_window) {
    this._setTimeout = function() {
        return _getZoneFreeFunction('setTimeout').apply(_window, arguments);
    };

    this._setInterval = function() {
        return _getZoneFreeFunction('setInterval').apply(_window, arguments);
    };

    this._clearTimeout = function() {
        _getZoneFreeFunction('clearTimeout').apply(_window, arguments);
    };

    this._clearInterval = function() {
        _getZoneFreeFunction('clearInterval').apply(_window, arguments);
    };

    function _getZoneFreeFunction(_name) {
        var _function;
        if (_window.Zone && _window.Zone.__symbol__)
            _function = _window[_window.Zone.__symbol__(_name)];

        return _function || _window[_name];
    }
}
/******************************************************************************************
Mouseflow recording script, helper module
-------------------------------------------------------------------------------------------
Copyright (c) 2018 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _Helper(_window, _math, _json, _native) {
    var _document = _window.document;

    function _hasClass(_element, _class) {
        var _classList = _element.classList;
        if (_classList && _class)
            return _classList.contains(_class);

        var _classes = _getClassList(_element);
        return _classes.indexOf(_class) !== -1;
    }

    function _addClass(_element, _class) {
        var _classList = _element.classList;
        if (_classList && _class) {
            _element.classList.add(_class);
            return;
        }

        var _classes = _getClassList(_element);

        if (_classes.indexOf(_class) === -1)
            _classes.push(_class);

        _element.className = _classes.join(' ');
    }

    function _removeClass(_element, _class) {
        var _classList = _element.classList;
        if (_classList && _class) {
            _element.classList.remove(_class);
            return;
        }

        var _classes = _getClassList(_element);

        var _index = _classes.indexOf(_class);
        if (_index !== -1)
            _classes.splice(_index, 1);

        _element.className = _classes.join(' ');
    }

    function _toggleClass(_element, _class, _state) {
        if (_state === undefined)
            _state = !_hasClass(_element, _class);

        if (_state) {
            _addClass(_element, _class);
        } else {
            _removeClass(_element, _class);
        }
    }

    function _getClassList(_element) {
        var _className = typeof _element.className === 'string' ? _element.className.replace(/\s+/g, ' ').trim() : '';
        return _className !== '' ? _className.split(' ') : [];
    }

    function _getDocumentHeight() {
        return _math.max(
            (_document.body || {}).scrollHeight || 0,
            (_document.body || {}).offsetHeight || 0,
            _document.documentElement.scrollHeight || 0,
            _document.documentElement.offsetHeight || 0,
            _document.documentElement.clientHeight || 0);
    }

    function _filter(_values, _filterFunction) {
        var _result = [];
        if (!_values) return _result;

        for (var _i = 0; _i < _values.length; _i++) {
            if (_filterFunction(_values[_i], _i))
                _result.push(_values[_i]);
        }

        return _result;
    }

    function _humanBytes(_size) {
        var _i = Math.floor(Math.log(_size) / Math.log(1024));
        return (_size / Math.pow(1024, _i)).toFixed(2) * 1 + ' ' + ['B', 'KB', 'MB', 'GB', 'TB'][_i];
    }

    // Fisher-Yates Shuffle aka Knuth Shuffle: https://bost.ocks.org/mike/shuffle/
    function _shuffle(_array) {
        var _m = _array.length;
        while (_m) {
            var _i = _math.floor(_math.random() * _m--);
            var _t = _array[_m];
            _array[_m] = _array[_i];
            _array[_i] = _t;
        }
    }

    function _htmlEscape(_input) {
        if (!_input)
            return _input;

        return _input
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }

    function _htmlUnescape(_input) {
        if (!_input)
            return _input;

        return _input
            .replace(/&amp;/g, '&')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>');
    }

    function _validateUrl(url) {
        return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/
            .test(url.trim());
    }

    function _convertMarkdownLinks(_input) {
        return _input.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, function(_match, _text, _url) {
            _url = _htmlUnescape(_url);

            return _validateUrl(_url)
                ? '<a href="' + _url + '" target="_blank">' + _text + '</a>'
                : _match;
        });
    }

    function _cssEscape(_value) {
        if (!_value)
            return _value;

        return _value
            .replace(/([^a-zA-Z\d-_])/g, '\\$1')
            .replace(/^(-)?(\d)/, '$1\\3$2 ');
    }

    function _jsonParse(_value) {
        return _value
            ? _json.parse(_value)
            : undefined;
    }

    function _jsonStringify(_value) {
        var _result;
        if (Array.prototype.toJSON) {
            var _array_tojson = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
            _result = _json.stringify(_value);
            Array.prototype.toJSON = _array_tojson;
        } else if (_value) {
            _result = _json.stringify(_value);
        }
        return _result;
    }

    function _isVersionAboveOrEqual(_runningVersion, _currentVersion) {
        var _actual = _normalizeVersionNumber(_runningVersion);
        var _input = _normalizeVersionNumber(_currentVersion);
        var _length = _math.max(_actual.length, _input.length);

        if (_input == 'NaN' || _actual == 'NaN') {
            return false;
        }

        for (var _i = 0; _i < _length; _i++) {
            _actual[_i] = _actual[_i] || 0;
            _input[_i] = _input[_i] || 0;
            if (_actual[_i] == _input[_i]) {
                continue;
            }
            return _actual[_i] > _input[_i];
        }
        return true;
    }

    function _normalizeVersionNumber(_versionNumber) {
        var _versionNumberArray = _versionNumber.split('.');
        var _resultNumberArray = [];

        for (var _i = 0; _i < _versionNumberArray.length; _i++) {
            _resultNumberArray.push(parseInt(_versionNumberArray[_i]));
        }
        return _resultNumberArray;
    }

    function _trimRight(_input, _trimCharacter) {
        var _result = _input;
        while (_result[_result.length - 1] === (_trimCharacter || ' '))
            _result = _result.slice(0, -1);
        return _result;
    }

    function _getVarsFromQueryString(_queryString) {
        var _match;
        var _search = /([^?&=]+)(?:=([^&]*))?/g;

        var _filters = {};
        while (_match = _search.exec(_queryString)) {
            var _key = _match[1];
            var _value = !!_match[2] ? window.decodeURIComponent(_match[2].replace(/\+/g, ' ')) : null;

            _filters[_key] = _value;
        }

        return _filters;
    }

    /**
     * Borrowed from ua-parser-js: https://github.com/faisalman/ua-parser-js
     * 
     * Note that order of regexes matters!
     */
    const platformRegexes = [
        { family: 'windows', regex: [/microsoft (windows) (vista|xp)/i, /(windows) nt 6\.2; (arm)/i, /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i, /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i] },
        { family: 'ios', regex: [/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i, /cfnetwork\/.+darwin/i] },
        { family: 'macos', regex: [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i] },
        { family: 'android', regex: [/droid ([\w\.]+)\b.+android[- ]x86/i, /(android)[-\/ ]?([\w\.]*)/i] },
        { family: 'linux', regex: [/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, /(mint)[\/\(\) ]?(\w*)/i, /(mageia|vectorlinux)[; ]/i, /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i, /(hurd|linux) ?([\w\.]*)/i, /(gnu) ?([\w\.]*)/i, /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku) (\w+)/i] }
    ];
    const browserRegexes = [
        { browser: 'chrome', regex: [/\b(?:crmo|crios)\/([\w\.]+)/i] },
        { browser: 'edge', regex: [/edg(?:e|ios|a)?\/([\w\.]+)/i] },
        { browser: 'opera', regex: [/(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i, /opios[\/ ]+([\w\.]+)/i, /\bopr\/([\w\.]+)/i] },
        { browser: 'ie', regex: [/(?:ms|\()(ie) ([\w\.]+)/i, /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i] },
        { browser: 'firefox', regex: [/\bfocus\/([\w\.]+)/i, /fxios\/([\w\.-]+)/i, /(?:mobile|tablet);.*(firefox)\/([\w\.-]+)/i, /mobile vr; rv:([\w\.]+)\).+firefox/i, /(firefox)\/([\w\.]+)/i] },
        { browser: 'opera', regex: [/\bopt\/([\w\.]+)/i, /coast\/([\w\.]+)/i] },
        { browser: 'samsung', regex: [/(samsung)browser\/([\w\.]+)/i] },
        { browser: 'chrome', regex: [/ wv\).+(chrome)\/([\w\.]+)/i, /chrome\/([\w\.]+) mobile/i, /(chrome)\/v?([\w\.]+)/i] },
        { browser: 'android', regex: [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i] },
        { browser: 'safari', regex: [/version\/([\w\.\,]+) .*mobile(?:\/\w+ | ?)safari/i, /iphone .*mobile(?:\/\w+ | ?)safari/i, /version\/([\w\.\,]+) .*(safari)/i, /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i] }
    ];

    function _parseUserAgent(_ua) {
        var _browser;
        var _os;
        for (var _i = 0; _i < platformRegexes.length; _i++) {
            var _platform = platformRegexes[_i];
            var _match = _platform.regex.find(function (_r) { return _r.test(_ua); });
            if (_match) {
                _os = _platform.family;
                break;
            }
        }
        for (var _i = 0; _i < browserRegexes.length; _i++) {
            var _browserInfo = browserRegexes[_i];
            var _match = _browserInfo.regex.find(function (_r) { return _r.test(_ua); });
            if (_match) {
                _browser = _browserInfo.browser;
                break;
            }
        }
        return {
            browser: _browser,
            os: _os
        };
    }

    /**
     * @param {Node} _element
     * @param {string} _selector
     * @returns {boolean} true if the element would be selected by the selector string
     */
    function _matches(_element, _selector) {
        if (_element.nodeType !== 1)
            return false;

        if (_element.msMatchesSelector)
            return _element.msMatchesSelector(_selector);

        if (_element.matches)
            return _element.matches(_selector);

        return false;
    }

    function _parentHasAttribute(_el, _attributeName) {
        var _parent = _native._getParent(_el);
        return _parent && _parent.hasAttribute && _parent.hasAttribute(_attributeName);
    }

    this._hasClass = _hasClass;
    this._addClass = _addClass;
    this._removeClass = _removeClass;
    this._toggleClass = _toggleClass;
    this._getClassList = _getClassList;
    this._getDocumentHeight = _getDocumentHeight;
    this._filter = _filter;
    this._humanBytes = _humanBytes;
    this._shuffle = _shuffle;
    this._htmlEscape = _htmlEscape;
    this._htmlUnescape = _htmlUnescape;
    this._validateUrl = _validateUrl;
    this._convertMarkdownLinks = _convertMarkdownLinks;
    this._cssEscape = _cssEscape;
    this._jsonParse = _jsonParse;
    this._jsonStringify = _jsonStringify;
    this._isVersionAboveOrEqual = _isVersionAboveOrEqual;
    this._normalizeVersionNumber = _normalizeVersionNumber;
    this._trimRight = _trimRight;
    this._matches = _matches;
    this._parentHasAttribute = _parentHasAttribute;
    this._getVarsFromQueryString = _getVarsFromQueryString;
    this._parseUserAgent = _parseUserAgent;
}
/******************************************************************************************
Mouseflow recording script, native code module
-------------------------------------------------------------------------------------------
Copyright (c) 2023 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _NativeCode(_window) {
    var _Object = _window.Object;
    var _Node = _window.Node;
    var _ShadowRoot;

    var _parentNode = _Object.getOwnPropertyDescriptor(_Node.prototype, 'parentNode');
    var _nextSibling = _Object.getOwnPropertyDescriptor(_Node.prototype, 'nextSibling');
    var _firstChild = _Object.getOwnPropertyDescriptor(_Node.prototype, 'firstChild');

    this._getParent = function(_element) {
        return _element
            ? _parentNode.get.apply(_element)
            : null;
    };

    this._getNextSibling = function(_element) {
        return _element
            ? _nextSibling.get.apply(_element)
            : null;
    };

    this._getFirstChild = function(_element) {
        return _element
            ? _firstChild.get.apply(_element)
            : null;
    };

    this._isShadowRoot = function(_element) {
        if (!_element)
            return false;

        if (_ShadowRoot === undefined) {
            try {
                // Avoid polyfills that tamper with the ShadowRoot constructor
                _ShadowRoot = _window.document
                    .createElement('div')
                    .attachShadow({ mode: 'open' })
                    .constructor;
            } catch (e) {
                _ShadowRoot = _window.ShadowRoot;
            }
        }

        var _prototype = _element;
        while (true) {
            _prototype = _Object.getPrototypeOf(_prototype);
            if (!_prototype || _prototype.constructor === _window.DocumentFragment)
                return false;
            if (_prototype.constructor === _ShadowRoot)
                return true;
        }
    };
}
function _Spa(_window) {
    var _oldPushState;

    this.proxyPushState = function (callback) {
        var _history = _window.history;

        _oldPushState = _history.pushState;
        _history.pushState = function() {
            _window.setTimeout(callback, 100);

            return _oldPushState.apply(_history, arguments);
        };

        _window.addEventListener('popstate', function() {
            _window.setTimeout(callback, 100);
        });
    }
}
/******************************************************************************************
Mouseflow recording script, feedback widget
-------------------------------------------------------------------------------------------
Copyright (c) 2016 Mouseflow                                           <info@mouseflow.com>
Website                                                            http://www.mouseflow.com
-------------------------------------------------------------------------------------------
******************************************************************************************/
// ReSharper disable InconsistentNaming
function _FeedbackWidget(_window, _config, _rootElement, _timer, _helper, _pageMatcher, _eventListener, _sessionStorage, _log) {
    var _feedbackCampaigns = [
        {_campaignId:"Yj8FHoGW5EOOktYbE6aveQ",_name:"Design Resources Survey",_enabled:true,_showBranding:false,_triggerType:"delay",_triggerValue:7000,_screenPosition:"bottomRight",_backgroundColor:"#1C355E",_foregroundColor:"#FFFFFF",_scope:"user",_startMinimized:false,_canBeDiscarded:true,_pageRules:[{_type:"contains",_value:"/designresources/home"}],_segments:[],_steps:[{_stepId:"ozzx",_type:"rating",_text:"How would you rate the usefulness of the resources shown on this page?",_minimumValue:1,_maximumValue:5,_minimumValueText:"Not useful",_maximumValueText:"Very Useful",_isRequired:true,_randomizeExceptLast:false},{_stepId:"th72",_type:"textarea",_text:"Tell us about your experience. What did you like? What can we do better?",_buttonText:null,_consentText:"",_isRequired:true,_randomizeExceptLast:false},{_stepId:"vhoa",_type:"rating",_text:"How likely are you to return to this page in the future",_minimumValue:1,_maximumValue:5,_minimumValueText:"Very unlikely",_maximumValueText:"Very likely",_isRequired:true,_randomizeExceptLast:false},{_stepId:"slbg",_type:"text",_text:"If you would like us to follow up on your feedback, please provide your email address. (Optional)",_buttonText:null,_consentText:null,_isRequired:false,_randomizeExceptLast:false},{_stepId:"nzbb",_type:"success",_text:"Thank you for your feedback! ",_buttonText:"Close",_isRequired:false,_randomizeExceptLast:false}],_created:"2024-03-27T17:50:16.393",_minimizedText:"",_buttonText:"Next",_defaultLanguage:"en",_matchWithBrowserLanguage:true}
    ];
    var _document = _window.document,
        _navigator = _window.navigator,
        _screen = _window.screen,
        _location = _window.location,
        _rootHtmlElement,
        _feedbackHtmlElement,
        _activeCampaign,
        _triggers = { _delayTimeouts: [] },
        _userInfo,
        _recordingData,
        _transmitData;

    function _start(_userInfoInput, _recordingDataInput, _transmitDataInput) {
        _userInfo = _userInfoInput;
        _recordingData = _recordingDataInput;
        _transmitData = _transmitDataInput;

        _rootHtmlElement = _rootElement._createHtmlElement();
        if (!_rootHtmlElement) {
            _log('Feedback widget not initiated - could not create root HTML element');
            return;
        }

        _timer._setTimeout(function() {
            var _match = _config.location.search.match(/mf_feedback=([^&]+)/);
            if (_match) {
                var _campaignId = _match[1];
                var _campaign = _feedbackCampaigns.filter(function(_campaign) {
                    return _campaign._campaignId === _campaignId;
                })[0];
                if (_campaign) {
                    _showCampaign(_campaign, true);
                    return;
                } else {
                    _log('Feedback campaign not started - campaign (' + _campaignId + ') was not found');
                }
            }
            _setupTriggers();
        }, 1000); // Wait to ensure font is loaded
    }

    function _stop() {
        _removeTriggers();
        _stopActiveCampaign();
        _rootElement._removeHtmlElement();
    }

    function _activateFeedback(_campaignIdOrName) {
        var _campaign = _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._campaignId === _campaignIdOrName || _campaign._name === _campaignIdOrName;
        })[0];
        if (_campaign) {
            _showCampaign(_campaign);
        } else {
            _log('Feedback campaign not started - campaign (' + _campaignIdOrName + ') was not found');
        }
    }

    function _triggerEvent(_eventType) {
        if (!/clickError|clickRage/.test(_eventType))
            return;

        _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === _eventType;
        }).forEach(function(_campaign) {
            _showCampaign(_campaign);
        });
    }

    function _getPreview() {
        var _campaign = _feedbackCampaigns[0];
        if (!_campaign)
            throw Error('Feedback preview not initiated - could not find feedback campaign');

        _campaign._isPreview = true;

        _start({
            _completedFeedbackIds: []
        }, {
            _completedFeedbackIds: []
        }, function() { });

        _showCampaign(_campaign, true);

        return _rootHtmlElement;
    }

    function _matchesSegment(_campaign) {
        if (!_campaign._segments || !_campaign._segments.length)
            return true;

        var _matches = {};
        _campaign._segments.forEach(function(_segment) {
            if (_segment && !_matches[_segment._type]) {
                _matches[_segment._type] = _matchesSegmentType(_segment);
            }
        });

        for (var _type in _matches) {
            if (_matches.hasOwnProperty(_type)) {
                if (!_matches[_type])
                    return false;
            }
        }

        return true;
    }

    function _matchesSegmentType(_segment) {
        const { browser, os } = _helper._parseUserAgent(_navigator.userAgent);
        switch (_segment._type) {
            case 'language':
                return _navigator.language.indexOf(_segment._value) === 0;
            case 'hasViewedPage':
                return true;
            case 'notViewedPage':
                return true;
            case 'visitorType':
                return (_segment._value === 'returning') === _userInfo._returning;
            case 'device':
                return _segment._value === _getDevice();
            case 'browserType':
                return _segment._value === browser;
            case 'operatingSystem':
                return _segment._value === os;
            case 'utm_campaign':
            case 'utm_source':
            case 'utm_medium':
            case 'utm_term':
            case 'utm_content':
                return _segment._value === _getUTMVar(_segment._type);
            default:
                return true;
        }
    }

    function _getUTMVar(_utmType) {
        var _qVars = _helper._getVarsFromQueryString(_location.search);
        return _qVars[_utmType] ?? '';
    }

    function _getDevice() {
        var _device = 'desktop';

        if (_userInfo._hasTouch) {
            if (_screen.availWidth < 768) {
                _device = 'phone';
            } else if (_screen.availWidth < 1280) {
                _device = 'tablet';
            }
        }

        return _device;
    }

    function _setupTriggers() {
        _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === 'pageLoad';
        }).forEach(function(_campaign) {
            _showCampaign(_campaign);
        });

        _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === 'delay';
        }).forEach(function(_campaign) {
            _triggers._delayTimeouts.push(_timer._setTimeout(function() {
                _showCampaign(_campaign);
            }, _campaign._triggerValue));
        });

        var _scrollTriggerCampaigns = _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === 'scroll';
        });

        if (_scrollTriggerCampaigns.length) {
            _eventListener._on(_document, 'scroll', function() {
                var _documentHeight = _helper._getDocumentHeight();
                if (_window.innerHeight === _documentHeight)
                    return;

                var _maxScrollPosition = _documentHeight - _window.innerHeight;
                _scrollTriggerCampaigns.filter(function(_campaign) {
                    var _scrollTriggerPercentage = _campaign._triggerValue / 100;
                    return _window.pageYOffset >= _maxScrollPosition * _scrollTriggerPercentage;
                }).forEach(function(_campaign) {
                    _showCampaign(_campaign);
                });
            }, { _capture: true, _exactMatch: true });
        }

        var _mouseLeaveCampaigns = _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === 'mouseleave';
        });

        if (_mouseLeaveCampaigns.length) {
            _eventListener._on(_document.documentElement, 'mouseleave', function(_e) {
                if (_isEventPositionOutsideWindow(_e)) {
                    _mouseLeaveCampaigns.forEach(function(_campaign) {
                        _showCampaign(_campaign);
                    });
                }
            }, { _capture: true, _exactMatch: true });
        }

        var _inactivityCampaigns = _feedbackCampaigns.filter(function(_campaign) {
            return _campaign._triggerType === 'inactivity';
        });

        if (_inactivityCampaigns.length) {
            _triggers._inactivityInterval = _timer._setInterval(function() {
                var _inactiveTime = new Date() - _recordingData._startTime - _recordingData._lastUserInteraction;
                _inactivityCampaigns.filter(function(_campaign) {
                    return _inactiveTime > _campaign._triggerValue;
                }).forEach(function(_campaign) {
                    _showCampaign(_campaign);
                });
            }, 1000);
        }
    }

    function _removeTriggers() {
        _triggers._delayTimeouts.forEach(_timer._clearTimeout);
        _timer._clearInterval(_triggers._inactivityInterval);
        _eventListener._removeAll();
    }

    function _isEventPositionOutsideWindow(_e) {
        var _margin = 20;
        var _top = _window.pageYOffset;
        var _left = _window.pageXOffset;
        var _bottom = _top + _window.innerHeight;
        var _right = _left + _window.innerWidth;

        return _e.pageY < _top + _margin ||
            _e.pageX < _left + _margin ||
            _e.pageY > _bottom - _margin ||
            _e.pageX > _right - _margin;
    }

    function _showCampaign(_campaign, _force) {
        if (!_campaign) return;

        if (_activeCampaign) {
            _log('Feedback campaign not started - "' + _campaign._name + '" (' + _campaign._campaignId + ') cannot override active campaign');
            return;
        }

        if (!_force) {
            if (_userInfo._completedFeedbackIds.indexOf(_campaign._campaignId) !== -1 ||
                _recordingData._completedFeedbackIds.indexOf(_campaign._campaignId) !== -1) {
                _log('Feedback campaign not started - "' + _campaign._name + '" (' + _campaign._campaignId + ') already completed');
                return;
            }

            if (!_pageMatcher._matchesPage(_campaign._pageRules)) {
                _log('Feedback campaign not started - "' + _campaign._name + '" (' + _campaign._campaignId + ') does not match page rules');
                return;
            }

            if (!_matchesSegment(_campaign)) {
                _log('Feedback campaign not started - "' + _campaign._name + '" (' + _campaign._campaignId + ') does not match segments');
                return;
            }
        }

        _activeCampaign = _campaign;
        _activeCampaign._isMinimized = _campaign._startMinimized;
        _activeCampaign._stepIndex = 0;
        _loadActiveFeedbackState();
        _transmitActiveCampaign();
        _log('Starting feedback campaign "' + _campaign._name + '" (' + _campaign._campaignId + ')');

        _feedbackHtmlElement = _getHtmlElementForCampaign(_campaign);
        _addEventHandlers(_feedbackHtmlElement);
        // Fix for feedback campaign dom event if trigger delay is high. Look in _startDomObserver()
        _recordingData._lastUserInteraction = +new Date() - _recordingData._startTime;
        _rootHtmlElement.appendChild(_feedbackHtmlElement);

        _showActiveStep();
    }

    function _addEventHandlers(_feedbackHtmlElement) {
        _eventListener._on(_feedbackHtmlElement, 'click', '.mf-feedback-toggle', function() {
            _toggleMinimize();
            _saveActiveFeedbackState();
        }, { _preventDefault: true });

        _eventListener._on(_feedbackHtmlElement, 'click', '.mf-feedback-close', function() {
            _completeActiveCampaign();
            _hideActiveStep();
            _timer._setTimeout(_stopActiveCampaign, 1000);
        }, { _preventDefault: true });

        _eventListener._on(_feedbackHtmlElement, 'focusin', 'input,button:not(.mf-feedback-toggle)', function() {
            if (_activeCampaign._isMinimized) {
                _toggleMinimize();
                _saveActiveFeedbackState();
            }
        });

        _eventListener._on(_feedbackHtmlElement, 'click', '.mf-action', function(e) {
            var _activeStep = _getActiveStep();
            var _radioTypes = ['radio', 'nps', 'rating'];
            var _input = e.delegatedTarget.querySelector('input');

            if (!_activeStep || !_radioTypes.includes(_activeStep._type))
                return;

            var _nodes = _feedbackHtmlElement.querySelectorAll('[name=' + _activeStep._stepId + ']');
            for (var i = 0; i < _nodes.length; i++) {
                if (_nodes[i] !== _input)
                    _nodes[i].checked = false;
            }
        });

        function _submitButtonValidation() {
            var _activeStep = _getActiveStep();

            if (_activeStep) {
                var _emptyInput = !_getFormValues(_activeStep._stepId).length;
                var _nextButton = _feedbackHtmlElement.querySelectorAll('.mf-btn-widget')[_activeCampaign._stepIndex];

                _nextButton.disabled = _emptyInput && _activeStep._isRequired;
            }
        };

        _eventListener._on(_feedbackHtmlElement, 'change', 'input:not([type="text"])', _submitButtonValidation);
        _eventListener._on(_feedbackHtmlElement, 'input', 'input[type=text], textarea', _submitButtonValidation);

        _eventListener._on(_feedbackHtmlElement, 'submit', function() {
            if (_validateStep()) {
                _transmitActiveStep();
                _showNextStep();
            }
        }, { _preventDefault: true, _stopPropagation: true });
    }

    function _toggleMinimize() {
        _activeCampaign._isMinimized = !_activeCampaign._isMinimized;
        _helper._toggleClass(_feedbackHtmlElement, 'mf-widget-closed', _activeCampaign._isMinimized);
    }

    function _stopActiveCampaign() {
        if (_feedbackHtmlElement) {
            _rootHtmlElement.removeChild(_feedbackHtmlElement);
            _feedbackHtmlElement = null;
        }
        if (_activeCampaign) {
            _activeCampaign._stepIndex = undefined;
            _activeCampaign = null;
        }
    }

    function _showNextStep() {
        var _activeStep = _getActiveStep();
        var _stepIndex = _activeCampaign._stepIndex + 1;

        if (_activeStep) {
            if (_activeStep._type === 'success') {
                _hideActiveStep(true);
                _timer._setTimeout(_stopActiveCampaign, 1000);
                return;
            }

            if (_activeStep._skipLogic) {
                var _answers = _getFormValues(_activeStep._stepId);
                var _skipLogic = _activeStep._skipLogic.filter(function(_skipLogic) {
                    return !_skipLogic._answer || _answers.indexOf(_skipLogic._answer) > -1;
                })[0];

                if (_skipLogic) {
                    for (var _i = 0; _i < _activeCampaign._steps.length; _i++) {
                        var _step = _activeCampaign._steps[_i];
                        if (_step._stepId === _skipLogic._skipTo) {
                            _stepIndex = _i;
                            break;
                        }
                    }
                }
            }
        }

        _showStep(_stepIndex);
    }

    function _showStep(_stepIndex) {
        if (!_activeCampaign)
            return;

        if (_stepIndex < 0)
            _stepIndex = 0;
        else if (_stepIndex >= _activeCampaign._steps.length)
            _stepIndex = _activeCampaign._steps.length - 1;

        _hideActiveStep();
        _activeCampaign._stepIndex = _stepIndex;

        _saveActiveFeedbackState();
        _showActiveStep();
    }

    function _hideActiveStep(_isLastStep) {
        var _stepElements = _feedbackHtmlElement.getElementsByClassName('mf-step');
        var _activeElement = _stepElements[_activeCampaign._stepIndex];

        if (_isLastStep) {
            _helper._addClass(_activeElement, 'mf-fade-out');
        }
        _helper._removeClass(_activeElement, 'mf-visible');

        if (_activeElement.classList.contains('mf-fade-in')) {
            _helper._removeClass(_activeElement, 'mf-fade-in');
        }
    }

    function _showActiveStep() {
        var _stepElements = _feedbackHtmlElement.getElementsByClassName('mf-step');
        var _activeStep = _getActiveStep();
        if (!_activeStep) return;

        var _activeElement = _stepElements[_activeCampaign._stepIndex];

        if (_activeElement) {
            if (_activeCampaign._stepIndex === 0) {
                _helper._addClass(_activeElement, 'mf-fade-in');
            } else {
                _helper._addClass(_activeElement, 'mf-visible');
            }
        }

        if (_activeStep._type === 'success') {
            _completeActiveCampaign();
            _mfq('formSubmitAttempt', '#mf_feedback_' + _activeCampaign._campaignId);
            _mfq('formSubmitSuccess', '#mf_feedback_' + _activeCampaign._campaignId);
        }
    }

    function _completeActiveCampaign() {
        if (_activeCampaign._scope === 'session') {
            _recordingData._completedFeedbackIds.push(_activeCampaign._campaignId);
        } else {
            _userInfo._completedFeedbackIds.push(_activeCampaign._campaignId);
        }
    }

    function _validateStep() {
        var _activeStep = _getActiveStep();
        var _form = _getForm();
        var _fields = _form[_activeStep._stepId];

        if (!_fields) _fields = [];
        if (!_fields.length) _fields = [_fields];

        var _emptyInput = !_fields.length || !_fields[0].value;

        if (_activeStep._isRequired) {
            _fields.forEach(function(_field) {
                _helper._removeClass(_field, 'error');
            });

            if (_emptyInput) {
                _fields.forEach(function(_field) {
                    _helper._addClass(_field, 'error');
                });
                return false;
            }
        }

        if (!_emptyInput && _activeStep._consentText) {
            var _hiddenCheckBox = _helper._filter(_feedbackHtmlElement.getElementsByClassName('mf-consent-switch'), function(_element) {
                return _element.name === _activeStep._stepId + '_checkbox';
            })[0];

            _helper._removeClass(_hiddenCheckBox, 'error');

            if (_hiddenCheckBox && !_hiddenCheckBox.checked) {
                _helper._addClass(_hiddenCheckBox, 'error');
                return false;
            }
        }

        return true;
    }

    function _transmitActiveCampaign() {
        _transmitData('feedback', {
            campaignId: _activeCampaign._campaignId
        });
    }

    function _transmitActiveStep() {
        var _activeStep = _getActiveStep();
        if (!_activeStep || _activeStep._type === 'welcome' || _activeStep._type === 'success')
            return;

        _transmitData('feedback', {
            campaignId: _activeCampaign._campaignId,
            stepId: _activeStep._stepId,
            answerValues: _getFormValues(_activeStep._stepId)
        });

        _mfq('tag', 'feedback');
    }

    function _loadActiveFeedbackState() {
        var _feedbackStates = _getFeedbackStatesFromSessionStorage();

        var _activeState = _feedbackStates.filter(function(_feedbackState) {
            return _feedbackState._sessionId === _userInfo._sessionId &&
                _feedbackState._campaignId === _activeCampaign._campaignId;
        })[0];

        if (_activeState) {
            for (var _key in _activeState) {
                if (_activeState.hasOwnProperty(_key)) {
                    _activeCampaign[_key] = _activeState[_key];
                }
            }
        }
    }

    function _saveActiveFeedbackState() {
        var _feedbackStates = _getFeedbackStatesFromSessionStorage();

        _feedbackStates = _feedbackStates.filter(function(_feedbackState) {
            return _feedbackState._sessionId === _userInfo._sessionId &&
                _feedbackState._campaignId !== _activeCampaign._campaignId;
        });

        if (_activeCampaign._stepIndex < _activeCampaign._steps.length - 1) {
            _feedbackStates.push({
                _sessionId: _userInfo._sessionId,
                _campaignId: _activeCampaign._campaignId,
                _stepIndex: _activeCampaign._stepIndex,
                _isMinimized: _activeCampaign._isMinimized
            });
        }

        _setFeedbackStatesInSessionStorage(_feedbackStates);
    }

    function _getFeedbackStatesFromSessionStorage() {
        return _sessionStorage._getJson('mf_feedback') || [];
    }

    function _setFeedbackStatesInSessionStorage(_feedbackStates) {
        _sessionStorage._setJson('mf_feedback', _feedbackStates);
    }

    function _getActiveStep() {
        return _activeCampaign._steps[_activeCampaign._stepIndex];
    }

    function _getFormValues(_name) {
        var _form = _getForm();
        var _field = _form[_name];
        var _values = [];

        if (_field.length) {
            for (var _i = 0; _i < _field.length; _i++) {
                if (_field[_i].checked)
                    _values.push(_field[_i].value);
            }
        } else if (_field.value) {
            _values.push(_field.value);
        }

        return _values;
    }

    function _getForm() {
        return _feedbackHtmlElement.getElementsByTagName('form')[0];
    }

    function _getRange(_minimumValue, _maximumValue) {
        var _range = [];
        for (var _i = _minimumValue; _i <= _maximumValue; _i++) {
            _range.push(_i);
        }
        return _range;
    }

    function _mfq() {
        if (!_window._mfq)
            return;

        _window._mfq.push(Array.from(arguments));
    }

    function _getHtmlElementForCampaign(_campaign) {
        if (!_campaign) return null;

        var _div = _document.createElement('div');
        _div.className = 'mf-feedback ' + _campaign._screenPosition;
        _div.innerHTML = _getHtmlForCampaign(_campaign);
        if (_campaign._isMinimized)
            _div.className += ' mf-widget-closed';
        if (_campaign._canBeDiscarded)
            _div.className += ' mf-widget-discard';
        if (_campaign._isPreview)
            _div.className += ' preview';

        var _style = _document.createElement('style');
        _style.type = 'text/css';
        _style.innerHTML = _getFeedbackCss() + _getCssColorSchemeForCampaign(_campaign);
        _div.appendChild(_style);

        return _div;
    }

    function _getHtmlForCampaign(_campaign) {
        return (
            '<form action="#" id="mf_feedback_' + _campaign._campaignId + '">' +
                _campaign._steps.map(function(_step) {
                    return _getHtmlForStep(_campaign, _step);
                }).join('') +
            '</form>'
        );
    }

    function _getHtmlForStep(_campaign, _step) {
        return _step._type === 'success'
            ? _getHtmlForSuccessStep(_campaign, _step)
            : _getHtmlForBlockStep(_campaign, _step);
    }

    function _getHtmlForSuccessStep(_campaign, _step) {
        return (
            '<div class="mf-step mf-step-thanks">' +
                '<div class="mf-thanks-holder">' +
                    '<svg class="mf-icon-checked" viewBox="0 0 32 32">' +
                        '<path d="M18.272 0h-4.544c-10.304 0-13.728 3.424-13.728 13.728v4.576c0 10.272 3.424 13.696 13.728 13.696h4.576c10.304 0 13.728-3.424 13.728-13.728v-4.544c-0.032-10.304-3.456-13.728-13.76-13.728zM30.848 18.112c0 9.536-3.2 12.736-12.736 12.736h-4.224c-9.536 0-12.736-3.2-12.736-12.736v-4.224c0-9.536 3.2-12.736 12.736-12.736h4.256c9.536 0 12.736 3.2 12.736 12.736v4.224zM23.424 10.848c-0.16 0-0.288 0.064-0.384 0.16l-8.768 8.768-5.312-5.312c-0.096-0.096-0.224-0.16-0.384-0.16-0.32 0-0.576 0.256-0.576 0.576 0 0.16 0.064 0.288 0.16 0.416l5.696 5.696c0.096 0.096 0.256 0.16 0.416 0.16s0.32-0.064 0.416-0.16l9.152-9.152c0.096-0.096 0.16-0.256 0.16-0.416 0-0.32-0.256-0.576-0.576-0.576z"></path>' +
                    '</svg>' +
                    '<div class="mf-widget-content">' +
                        _helper._convertMarkdownLinks(_helper._htmlEscape(_step._text)) +
                    '</div>' +
                    _getHtmlForSubmit(_campaign, _step) +
                    _getHtmlForPoweredBy(_campaign, _step) +
                '</div>' +
            '</div>'
        );
    }

    function _getHtmlForBlockStep(_campaign, _step) {
        var _isWelcomeStep = _step._type === 'welcome';
        var _stepText = _step._text + (_step._isRequired ? '*' : '');

        return (
            '<div class="mf-step mf-step-block' + (_isWelcomeStep ? ' mf-step--welcome' : '') + '">' +
                '<div class="mf-widget-header">' +
                    '<label class="mf-widget-text">' +
                        '<span class="mf-widget-text--open">' +
                            _helper._htmlEscape(_stepText) +
                        '</span>' +
                        '<span class="mf-widget-text--closed">' +
                            _helper._htmlEscape(_campaign._minimizedText || _stepText) +
                        '</span>' +
                    '</label>' +
                    '<div class="mf-widget-toggle">' +
                        '<button type="button" class="mf-btn-cross mf-feedback-close" aria-label="Close feedback widget"></button>' +
                        '<button type="button" class="mf-btn-arrow mf-feedback-toggle" aria-label="Hide/show feedback widget"></button>' +
                    '</div>' +
                '</div>' +
                '<div class="mf-widget-container">' +
                    _getHtmlForStepContent(_step) +
                '</div>' +
                _getHtmlForSubmit(_campaign, _step) +
                _getHtmlForPoweredBy(_campaign, _step) +
            '</div>'
        );
    }

    function _getHtmlForSubmit(_campaign, _step) {
        return (
            '<div class="mf-widget-footer">' +
                '<button type="submit" class="mf-btn-widget"' + (_step._isRequired ? ' disabled' : '') + '>' +
                    _helper._htmlEscape(_step._buttonText || _campaign._buttonText) +
                '</button>' +
            '</div>'
        );
    }

    function _getHtmlForPoweredBy(_campaign, _step) {
        var _isFirstStep = _campaign._steps[0] === _step;

        var _translations = _getTranslations(_campaign);

        return _campaign._showBranding || _isFirstStep ?
            ('<div class="mf-widget-powered">' +
                (_campaign._showBranding ?
                    '<p class="mf-widget-powered__title">' +
                    _translations._footerPoweredBy + ' <a href="https://mouseflow.com/?utm_source=' + _window.encodeURIComponent(_config.location.hostname) + '&utm_medium=feedback" target="_blank" class="mf-link-powered--no-underline">Mouseflow</a>' +
                    '</p>' :
                    ''
                ) + (_isFirstStep ?
                    '<p class="mf-widget-powered__notice">' +
                    _translations._footerPrivacyPolicy.replace('{0}', '<a href="https://mouseflow.com/?utm_source=' + _window.encodeURIComponent(_config.location.hostname) + '&utm_medium=feedback" target="_blank" class="mf-link-powered">Mouseflow</a>') +
                    '</p>' :
                    ''
                ) +
            '</div>') :
            '';
    }

    function _getHtmlForStepContent(_step) {
        switch (_step._type) {
            case 'welcome':
                return _getHtmlForWelcome(_step);
            case 'radio':
                return _getHtmlForRadio(_step);
            case 'checkbox':
                return _getHtmlForCheckbox(_step);
            case 'text':
                return _getHtmlForText(_step);
            case 'textarea':
                return _getHtmlForTextArea(_step);
            case 'nps':
                return _getHtmlForNps(_step);
            case 'rating':
                return _getHtmlForRating(_step);
        }
        return '';
    }

    function _getHtmlForWelcome(_step) {
        return (
            '<div class="mf-widget-content">' +
                (_step._content ? _helper._convertMarkdownLinks(_helper._htmlEscape(_step._content)) : '') +
            '</div>'
        );
    }

    function _getHtmlForRadio(_step) {
        if (_step._randomize) { 
            if (_step._randomizeExceptLast) {
                var lastRadioAnswer = _step._answers.pop();
                _helper._shuffle(_step._answers);
                _step._answers.push(lastRadioAnswer);
            } else {
                _helper._shuffle(_step._answers);
            }
        }
        return (
            '<div class="mf-widget-content">' +
                '<ul class="mf-radio-list" role="radiogroup" aria-label="' + _helper._htmlEscape(_step._text) + '">' +
                    _step._answers.map(function(_answer) {
                        return _getHtmlForRadioItem(_step, _answer);
                    }).join('') +
                '</ul>' +
            '</div>'
        );
    }

    function _getHtmlForRadioItem(_step, _answer) {
        return (
            '<li>' +
                '<label class="mf-radio mf-action">' +
                    '<input name="' + _step._stepId + '" value="' + _answer._answerId + '" type="checkbox">' +
                    '<span class="mf-fake-input"></span>' +
                    '<span class="mf-fake-label">' + _helper._htmlEscape(_answer._value) + '</span>' +
                '</label>' +
            '</li>'
        );
    }

    function _getHtmlForCheckbox(_step) {
        if (_step._randomize) {
            if (_step._randomizeExceptLast) {
                var lastCheckboxAnswer = _step._answers.pop();
                _helper._shuffle(_step._answers);
                _step._answers.push(lastCheckboxAnswer);
            } else {
                _helper._shuffle(_step._answers);
            }
        }
        return (
            '<div class="mf-widget-content">' +
                '<ul class="mf-checkbox-list" aria-label="' + _helper._htmlEscape(_step._text) + '">' +
                    _step._answers.map(function(_answer) {
                        return _getHtmlForCheckboxItem(_step, _answer);
                    }).join('') +
                '</ul>' +
            '</div>'
        );
    }

    function _getHtmlForCheckboxItem(_step, _answer) {
        return (
            '<li>' +
                '<label class="mf-checkbox mf-action">' +
                    '<input name="' + _step._stepId + '" value="' + _answer._answerId + '" type="checkbox">' +
                    '<span class="mf-fake-input"></span>' +
                    '<span class="mf-fake-label">' + _helper._htmlEscape(_answer._value) + '</span>' +
                '</label>' +
            '</li>'
        );
    }

    function _getHtmlForText(_step) {
        return (
            '<div class="mf-widget-content">' +
                '<div class="mf-area-block">' +
                    '<input type="text" name="' + _step._stepId + '" aria-label="' + _helper._htmlEscape(_step._text) + '">' +
                '</div>' +
                _getHtmlForConsentRequired(_step) +
            '</div>'
        );
    }

    function _getHtmlForTextArea(_step) {
        return (
            '<div class="mf-widget-content">' +
                '<div class="mf-area-block">' +
                    '<textarea name="' + _step._stepId + '" aria-label="' + _helper._htmlEscape(_step._text) + '" cols="30" rows="10"></textarea>' +
                '</div>' +
                _getHtmlForConsentRequired(_step) +
            '</div>'
        );
    }

    function _getHtmlForConsentRequired(_step) {
        return _step._consentText ? (
            '<label class="mf-checkbox mf-consent-block">' +
                '<input type="checkbox" name="' + _step._stepId + '_checkbox" class="mf-consent-switch">' +
                '<span class="mf-fake-input"></span>' +
                '<span class="mf-fake-label">' +
                    _helper._convertMarkdownLinks(_helper._htmlEscape(_step._consentText)) +
                '</span>' +
            '</label>'
        ) : '';
    }

    function _getHtmlForNps(_step) {
        return (
            '<div class="mf-widget-content">' +
                '<div class="mf-area-block' + (_step._npsSmileys ? ' mf-nps-list' : ' mf-nps-numeric') + '" role="radiogroup" aria-label="' + _helper._htmlEscape(_step._text) + '">' +
                    _getRange(_step._minimumValue, _step._maximumValue).map(function(_value) {
                        return _getHtmlForNpsValue(_step, _value);
                    }).join('') +
                '</div>' +
                '<div class="mf-desc-block">' +
                    '<span class="mf-desc-label">' + _helper._htmlEscape(_step._minimumValueText) + '</span>' +
                    '<span class="mf-desc-label mf-desc-label--right">' + _helper._htmlEscape(_step._maximumValueText) + '</span> ' +
                '</div>' +
            '</div>'
        );
    }

    function _getHtmlForNpsValue(_step, _value) {
        return (
            '<label class="mf-action">' +
                '<input name="' + _step._stepId + '" value="' + _value + '" type="checkbox">' +
            (_step._npsSmileys ?
                '<div class="mf-fake-label"><svg viewBox="0 0 500 500" height="16pt">' + svgData[parseInt(_value)] + '</svg></div>' :
                '<span class="mf-fake-label">' + _value + '</span>') +
            '</label>'
        );
    }

    function _getHtmlForRating(_step) {
        return (
            '<div class="mf-widget-content">' +
                '<div class="mf-area-block mf-rating-numeric" role="radiogroup" aria-label="' + _helper._htmlEscape(_step._text) + '">' +
                    _getRange(_step._minimumValue, _step._maximumValue).map(function(_value) {
                        return _getHtmlForRatingValue(_step, _value);
                    }).join('') +
                '</div>' +
                '<div class="mf-desc-block">' +
                    '<span class="mf-desc-label">' + _helper._htmlEscape(_step._minimumValueText) + '</span>' +
                    '<span class="mf-desc-label mf-desc-label--right">' + _helper._htmlEscape(_step._maximumValueText) + '</span> ' +
                '</div>' +
            '</div>'
        );
    }

    function _getHtmlForRatingValue(_step, _value) {
        return (
            '<label class="mf-action">' +
                '<input name="' + _step._stepId + '" value="' + _value + '" type="checkbox">' +
                '<span class="mf-fake-label">' + _value + '</span>' +
            '</label>'
        );
    }

    function _getContrastingColor(_campaign) {
        return _campaign._foregroundColor === '#000000' ?
            _campaign._foregroundColor :
            _campaign._backgroundColor;
    }

    function _getCssColorSchemeForCampaign(_campaign) {
        return (
            '#mouseflow .mf-widget-header,' +
            '#mouseflow input[type="checkbox"] + .mf-fake-input:before,' +
            '#mouseflow .mf-btn-widget,' +
            '#mouseflow .mf-area-block > label > input[type="checkbox"]:checked + .mf-fake-label,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-step--welcome .mf-widget-header {' +
                'background: ' + _campaign._backgroundColor + ';' +
            '}' +

            '#mouseflow .mf-radio input[type="checkbox"] + .mf-fake-input:before,' +
            '#mouseflow .mf-area-block.mf-nps-list > label > input[type="checkbox"]:checked + .mf-fake-label {' +
                'background: ' + _getContrastingColor(_campaign) + ';' +
            '}' +

            '#mouseflow .mf-widget-text,' +
            '#mouseflow .mf-btn-widget,' +
            '#mouseflow .mf-btn-arrow,' +
            '#mouseflow .mf-btn-cross,' +
            '#mouseflow .mf-area-block > label > input[type="checkbox"]:checked + .mf-fake-label,' +
            '#mouseflow input[type="checkbox"] + .mf-fake-input:after,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-step--welcome .mf-widget-text,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-step--welcome .mf-btn-arrow,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-step--welcome .mf-btn-cross {' +
                'color: ' + _campaign._foregroundColor + ';' +
            '}' +

            '@media (hover: hover) {' +
                '#mouseflow .mf-area-block.mf-nps-list > label > .mf-fake-label:hover {' +
                    'background: ' + _getContrastingColor(_campaign) + ';' +
                '}' +

                '#mouseflow .mf-area-block > label > .mf-fake-label:hover {' +
                    'color: ' + _campaign._foregroundColor + ';' +
                    'background: ' + _campaign._backgroundColor + ';' +
                '}' +
            '}' +

            '#mouseflow .mf-btn-widget:not([disabled]) {' +
                (_campaign._foregroundColor === '#000000' ? 'border: 1px solid #E6E6E6;' : '') +
            '}' +

            '#mouseflow .mf-icon-checked {' +
                'fill: ' + _getContrastingColor(_campaign) + ';' +
            '}' +

            '#mouseflow .mf-step--welcome .mf-btn-arrow,' +
            '#mouseflow .mf-step--welcome .mf-btn-cross {' +
                'color: #08163C;' +
            '}' +

            '#mouseflow .mf-step--welcome .mf-widget-header {' +
                'background: #FFFFFF;' +
            '}' +

            '#mouseflow .mf-step--welcome .mf-widget-text {' +
                'color: #000000;' +
                'font-weight: 400;' +
            '}'
        );
    }

    function _getTranslations(_campaign) {
        var _preferredBrowserLanguage = navigator.language?.substring(0,2);
        return _campaign._matchWithBrowserLanguage && _i18n[_preferredBrowserLanguage] ? _i18n[_preferredBrowserLanguage] : _i18n[_campaign._defaultLanguage] || _i18n['en'];
    }

    var svgData = [
         '<path d="m27.216 250.005c0 123.04 99.745 222.78 222.786 222.78s222.781-99.74 222.781-222.78-99.74-222.79-222.781-222.79-222.786 99.75-222.786 222.79z" fill="#e3344a"/><path d="m250.002 35.315c118.381 0 214.691 96.31 214.691 214.69s-96.31 214.68-214.691 214.68c-118.379 0-214.687-96.3-214.687-214.68s96.308-214.69 214.687-214.69zm0 445.57c127.311 0 230.881-103.57 230.881-230.88s-103.57-230.89-230.881-230.89-230.885 103.58-230.885 230.89 103.574 230.88 230.885 230.88z"/><path d="m307.963 194.305c0 15.78 12.79 28.58 28.57 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.035 194.305c0 15.78 12.793 28.58 28.575 28.58 15.781 0 28.575-12.8 28.575-28.58s-12.794-28.57-28.575-28.57c-15.782 0-28.575 12.79-28.575 28.57z"/><path d="m249.074 275.665c48.639 0 91.439 29.31 109.049 74.68 1.67 4.3-.47 9.14-4.77 10.81-4.3 1.66-9.14-.47-10.81-4.77-15.09-38.88-51.78-64.01-93.469-64.01-41.691 0-78.381 25.13-93.471 64.01-1.669 4.3-6.507 6.43-10.81 4.77-4.301-1.67-6.436-6.51-4.766-10.81 17.603-45.37 60.406-74.68 109.047-74.68z"/><path d="m220.015 166.345c-2.077 0-4.155-.79-5.741-2.38l-33.56-33.56c-3.171-3.17-3.171-8.31 0-11.48s8.312-3.17 11.483 0l33.56 33.56c3.171 3.17 3.171 8.31 0 11.48-1.586 1.59-3.663 2.38-5.742 2.38z"/><path d="m291.463 166.345c-2.07 0-4.15-.79-5.74-2.38-3.17-3.17-3.17-8.31 0-11.48l33.56-33.56c3.17-3.17 8.31-3.17 11.48 0 3.18 3.17 3.18 8.31 0 11.48l-33.56 33.56c-1.58 1.59-3.66 2.38-5.74 2.38z"/>'
        ,'<path d="m27.216 250.005c0 123.04 99.745 222.78 222.786 222.78s222.781-99.74 222.781-222.78-99.74-222.79-222.781-222.79-222.786 99.75-222.786 222.79z" fill="#e0344a"/><path d="m250.002 35.315c118.381 0 214.691 96.31 214.691 214.69s-96.31 214.68-214.691 214.68c-118.379 0-214.687-96.3-214.687-214.68s96.308-214.69 214.687-214.69zm0 445.57c127.311 0 230.881-103.57 230.881-230.88s-103.57-230.89-230.881-230.89-230.885 103.58-230.885 230.89 103.574 230.88 230.885 230.88z"/><path d="m307.963 194.305c0 15.78 12.79 28.58 28.57 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.035 194.305c0 15.78 12.793 28.58 28.575 28.58 15.781 0 28.575-12.8 28.575-28.58s-12.794-28.57-28.575-28.57c-15.782 0-28.575 12.79-28.575 28.57z"/><path d="m249.074 275.665c48.639 0 91.439 29.31 109.049 74.68 1.67 4.3-.47 9.14-4.77 10.81-4.3 1.66-9.14-.47-10.81-4.77-15.09-38.88-51.78-64.01-93.469-64.01-41.691 0-78.381 25.13-93.471 64.01-1.669 4.3-6.507 6.43-10.81 4.77-4.301-1.67-6.436-6.51-4.766-10.81 17.603-45.37 60.406-74.68 109.047-74.68z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78 123.05 0 222.79-99.74 222.79-222.78s-99.74-222.79-222.79-222.79c-123.04 0-222.78 99.75-222.78 222.79z" fill="#ec6648"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68c-118.37 0-214.68-96.3-214.68-214.68s96.31-214.69 214.68-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.58 28.58 15.78 0 28.57-12.8 28.57-28.58s-12.79-28.57-28.57-28.57c-15.79 0-28.58 12.79-28.58 28.57z"/><path d="m146.035 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m249.075 275.665c48.64 0 91.44 29.31 109.04 74.68 1.67 4.3-.46 9.14-4.76 10.81-4.3 1.66-9.14-.47-10.81-4.77-15.09-38.88-51.78-64.01-93.47-64.01s-78.38 25.13-93.47 64.01c-1.67 4.3-6.51 6.43-10.81 4.77-4.31-1.67-6.44-6.51-4.77-10.81 17.6-45.37 60.41-74.68 109.05-74.68z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.75 222.78 222.79 222.78s222.78-99.74 222.78-222.78-99.74-222.79-222.78-222.79-222.79 99.75-222.79 222.79z" fill="#f59049"/><path d="m250.005 35.315c118.38 0 214.68 96.31 214.68 214.69s-96.3 214.68-214.68 214.68-214.69-96.3-214.69-214.68 96.31-214.69 214.69-214.69zm0 445.57c127.31 0 230.88-103.57 230.88-230.88s-103.57-230.89-230.88-230.89-230.89 103.58-230.89 230.89 103.58 230.88 230.89 230.88z"/><path d="m307.955 194.305c0 15.78 12.8 28.58 28.58 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.58 12.79-28.58 28.57z"/><path d="m146.035 194.305c0 15.78 12.79 28.58 28.58 28.58 15.78 0 28.57-12.8 28.57-28.58s-12.79-28.57-28.57-28.57c-15.79 0-28.58 12.79-28.58 28.57z"/><path d="m248.475 295.495c33.65 0 65.75 12.66 90.37 35.66 3.37 3.15 3.55 8.43.4 11.81-3.15 3.36-8.44 3.55-11.81.4-21.51-20.1-49.56-31.16-78.96-31.16-29.41 0-57.46 11.06-78.97 31.16-3.37 3.15-8.66 2.96-11.81-.4-3.15-3.38-2.97-8.66.4-11.81 24.62-23 56.72-35.66 90.38-35.66z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78s222.79-99.74 222.79-222.78-99.75-222.79-222.79-222.79-222.78 99.75-222.78 222.79z" fill="#faaf45"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68-214.69-96.3-214.69-214.68 96.31-214.69 214.69-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.025 194.305c0 15.78 12.8 28.58 28.58 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.58 12.79-28.58 28.57z"/><path d="m313.485 335.195c-1.43 0-2.88-.38-4.19-1.17-18.01-10.9-38.72-16.66-59.88-16.66-20.45 0-40.55 5.4-58.12 15.62-3.88 2.25-8.85.93-11.1-2.94-2.26-3.88-.94-8.85 2.94-11.1 20.04-11.66 42.96-17.82 66.28-17.82 24.13 0 47.74 6.57 68.29 19.01 3.83 2.32 5.06 7.31 2.74 11.15-1.53 2.52-4.21 3.91-6.96 3.91z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78s222.79-99.74 222.79-222.78-99.75-222.79-222.79-222.79-222.78 99.75-222.78 222.79z" fill="#fec93d"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68-214.68-96.3-214.68-214.68 96.3-214.69 214.68-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.035 194.305c0 15.78 12.79 28.58 28.57 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.57 12.79-28.57 28.57z"/><path d="m178.055 328.905h142.03c4.61 0 8.35-3.74 8.35-8.35 0-4.62-3.74-8.36-8.35-8.36h-142.03c-4.61 0-8.35 3.74-8.35 8.36 0 4.61 3.74 8.35 8.35 8.35z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.75 222.78 222.79 222.78s222.78-99.74 222.78-222.78-99.74-222.79-222.78-222.79-222.79 99.75-222.79 222.79z" fill="#f7de34"/><path d="m250.005 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68-214.69-96.3-214.69-214.68 96.31-214.69 214.69-214.69zm0 445.57c127.31 0 230.88-103.57 230.88-230.88s-103.57-230.89-230.88-230.89-230.89 103.58-230.89 230.89 103.58 230.88 230.89 230.88z"/><path d="m307.965 194.305c0 15.78 12.79 28.58 28.57 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.035 194.305c0 15.78 12.8 28.58 28.58 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.58 12.79-28.58 28.57z"/><path d="m313.495 301.125c-1.43 0-2.88.38-4.19 1.18-18.01 10.89-38.72 16.65-59.88 16.65-20.46 0-40.55-5.4-58.13-15.61-3.88-2.25-8.84-.94-11.1 2.94-2.25 3.88-.93 8.85 2.94 11.1 20.05 11.65 42.97 17.81 66.29 17.81 24.13 0 47.74-6.57 68.28-19 3.84-2.32 5.07-7.31 2.75-11.15-1.53-2.52-4.21-3.92-6.96-3.92z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78s222.79-99.74 222.79-222.78-99.75-222.79-222.79-222.79-222.78 99.75-222.78 222.79z" fill="#d5d749"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68-214.69-96.3-214.69-214.68 96.31-214.69 214.69-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.025 194.305c0 15.78 12.8 28.58 28.58 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.58 12.79-28.58 28.57z"/><path d="m248.465 347.465c33.66 0 65.75-12.66 90.37-35.66 3.37-3.15 3.55-8.43.4-11.81-3.14-3.37-8.43-3.55-11.8-.4-21.52 20.1-49.56 31.16-78.97 31.16s-57.46-11.06-78.97-31.16c-3.37-3.15-8.66-2.97-11.81.4-3.15 3.38-2.97 8.66.4 11.81 24.62 23 56.72 35.66 90.38 35.66z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78s222.79-99.74 222.79-222.78-99.75-222.79-222.79-222.79-222.78 99.75-222.78 222.79z" fill="#b2d262"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68-214.68-96.3-214.68-214.68 96.3-214.69 214.68-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m146.025 194.305c0 15.78 12.8 28.58 28.58 28.58s28.57-12.8 28.57-28.58-12.79-28.57-28.57-28.57-28.58 12.79-28.58 28.57z"/><path d="m249.065 367.285c48.64 0 91.45-29.31 109.05-74.67 1.67-4.3-.46-9.14-4.77-10.81-4.29-1.67-9.14.46-10.81 4.77-15.09 38.88-51.78 64.01-93.47 64.01s-78.38-25.13-93.47-64.01c-1.67-4.31-6.5-6.44-10.81-4.77-4.3 1.67-6.43 6.51-4.76 10.81 17.6 45.36 60.4 74.67 109.04 74.67z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.78 222.78 123.05 0 222.79-99.74 222.79-222.78s-99.74-222.79-222.79-222.79c-123.04 0-222.78 99.75-222.78 222.79z" fill="#8ec97a"/><path d="m249.995 35.315c118.38 0 214.69 96.31 214.69 214.69s-96.31 214.68-214.69 214.68c-118.37 0-214.68-96.3-214.68-214.68s96.31-214.69 214.68-214.69zm0 445.57c127.31 0 230.89-103.57 230.89-230.88s-103.58-230.89-230.89-230.89-230.88 103.58-230.88 230.89 103.57 230.88 230.88 230.88z"/><path d="m307.955 194.305c0 15.78 12.79 28.58 28.58 28.58 15.78 0 28.57-12.8 28.57-28.58s-12.79-28.57-28.57-28.57c-15.79 0-28.58 12.79-28.58 28.57z"/><path d="m146.035 194.305c0 15.78 12.79 28.58 28.57 28.58s28.58-12.8 28.58-28.58-12.8-28.57-28.58-28.57-28.57 12.79-28.57 28.57z"/><path d="m353.355 281.805h-208.56c-4.31 1.67-6.44 6.51-4.77 10.81 17.6 45.36 60.41 74.67 109.05 74.67s91.44-29.31 109.04-74.67c1.67-4.3-.46-9.14-4.76-10.81z"/>'
        ,'<path d="m27.215 250.005c0 123.04 99.74 222.78 222.79 222.78 123.04 0 222.78-99.74 222.78-222.78s-99.74-222.79-222.78-222.79c-123.05 0-222.79 99.75-222.79 222.79z" fill="#65c08e"/><path d="m250.005 35.315c118.37 0 214.68 96.31 214.68 214.69s-96.31 214.68-214.68 214.68c-118.38 0-214.69-96.3-214.69-214.68s96.31-214.69 214.69-214.69zm0 445.57c127.31 0 230.88-103.57 230.88-230.88s-103.57-230.89-230.88-230.89c-127.32 0-230.89 103.58-230.89 230.89s103.57 230.88 230.89 230.88z"/><path d="m353.355 281.805h-208.56c-4.31 1.67-6.44 6.51-4.77 10.81 17.6 45.36 60.41 74.67 109.05 74.67s91.44-29.31 109.04-74.67c1.67-4.3-.46-9.14-4.76-10.81z"/><path d="m177.255 231.505-32.32-32.32c-7.76-7.76-7.76-20.34 0-28.1s20.34-7.76 28.1 0l4.22 4.22 4.21-4.22c7.76-7.76 20.34-7.76 28.11 0 7.76 7.76 7.76 20.34 0 28.1z"/><path d="m320.155 231.505-32.32-32.32c-7.76-7.76-7.76-20.34 0-28.1s20.34-7.76 28.1 0l4.22 4.22 4.21-4.22c7.76-7.76 20.35-7.76 28.11 0s7.76 20.34 0 28.1z"/>'
    ];

    function _getFeedbackCss() {
        return (
            '#mouseflow .mf-step {' +
                'display: flex;' +
                'flex-direction: column;' +
                'visibility: hidden;' +
                'opacity: 0;' +
                'position: fixed;' +
                'bottom: 30px;' +
                'right: 30px;' +
                'z-index: 2147483647;' +
                'width: 300px;' +
                'max-height: 724px;' +
                'border-radius: 10px;' +
                'box-shadow: 0 0 15px rgba(0, 0, 0, .35);' +
                'overflow: hidden;' +
                'word-break: break-word;' +
                'transition-property: box-shadow, overflow;' +
                'transition-duration: .2s;' +
                'transition-timing-function: ease-in-out;' +
            '}' +

            '#mouseflow .mf-step button:focus { outline:0; }' +

            '#mouseflow .mf-feedback.preview .mf-step {' +
                'position: absolute;' +
                'top: auto !important;' +
                'left: auto !important;' +
                'bottom: auto !important;' +
                'right: auto !important;' +
                'z-index: auto;' +
            '}' +

            '#mouseflow .mf-feedback.bottomRight .mf-step {' +
                'top: auto;' +
                'left: auto;' +
                'bottom: 30px;' +
                'right: 30px;' +
            '}' +

            '#mouseflow .mf-feedback.bottomLeft .mf-step {' +
                'top: auto;' +
                'left: 30px;' +
                'bottom: 30px;' +
                'right: auto;' +
            '}' +

            '#mouseflow .mf-feedback.topRight .mf-step {' +
                'top: 30px;' +
                'left: auto;' +
                'bottom: auto;' +
                'right: 30px;' +
            '}' +

            '#mouseflow .mf-feedback.topLeft .mf-step {' +
                'top: 30px;' +
                'left: 30px;' +
                'bottom: auto;' +
                'right: auto;' +
            '}' +

            '@media (max-width: 767px) {' +
                '#mouseflow .mf-feedback.bottomRight .mf-step,' +
                '#mouseflow .mf-feedback.topRight .mf-step,' +
                '#mouseflow .mf-feedback.topLeft .mf-step,' +
                '#mouseflow .mf-feedback.bottomLeft .mf-step {' +
                    'left: 0;' +
                    'right: 0;' +
                    'margin: 0 auto;' +
                '}' +
            '}' +

            '#mouseflow .mf-step.mf-visible {' +
                'visibility: visible;' +
                'opacity: 1;' +
            '}' +

            '#mouseflow .mf-step.mf-fade-in {' +
                'visibility: visible;' +
                'animation: fadeIn .4s linear forwards;' +
            '}' +

            '#mouseflow .mf-step.mf-fade-out {' +
                'animation: fadeOut .4s linear;' +
            '}' +

            '#mouseflow a:hover {' +
                'text-decoration: underline;' +
            '}' +

            '#mouseflow .mf-widget-header {' +
                'color: #fff;' +
                'padding: 12px 15px;' +
                'display: flex;' +
                'justify-content: space-between;' +
                'align-items: flex-start;' +
                'max-height: 446px;' +
                'border-radius: 10px 10px 0 0;' +
                'transition: all .2s ease-in-out;' +
                'bottom: 100%;' +
                'width: 100%;' +
            '}' +

            '#mouseflow .mf-widget-text {' +
                'font-size: 16px;' +
                'line-height: 20px;' +
                'width: 100%;' +
            '}' +

            '#mouseflow .mf-feedback:not(.mf-widget-closed) .mf-widget-text--closed,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-text--open {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-widget-toggle {' +
                'width: 20px;' +
                'margin-left: 5px;' +
            '}' +

            '#mouseflow .mf-btn-arrow,' +
            '#mouseflow .mf-btn-cross {' +
                'z-index: 10;' +
                'font-size: 25px;' +
                'line-height: .5;' +
                'color: #fff;' +
                'display: block;' +
                'width: 100%;' +
            '}' +

            '#mouseflow .mf-btn-arrow {' +
                'transform: rotate(-90deg) scale(1.5) translateX(20%);' +
            '}' +

            '#mouseflow .mf-btn-arrow:after {' +
                'content: "\\203a";' +
                'display: block;' +
                'width: 100%;' +
            '}' +

            '#mouseflow .mf-btn-cross:after {' +
                'content: "\\00d7";' +
                'display: block;' +
                'width: 100%;' +
            '}' +

            '#mouseflow .mf-btn-cross {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-discard .mf-btn-cross {' +
                'display: block;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-discard .mf-btn-arrow {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-radio-list,' +
            '#mouseflow .mf-checkbox-list {' +
                'margin: 0;' +
                'padding: 0;' +
                'list-style: none;' +
            '}' +

            '#mouseflow .mf-radio-list li,' +
            '#mouseflow .mf-checkbox-list li {' +
                'padding: 12px 10px;' +
                'border-bottom: 1px solid #e6e6e6;' +
            '}' +

            '#mouseflow .mf-radio:hover .mf-fake-input,' +
            '#mouseflow .mf-checkbox:hover .mf-fake-input {' +
                'border-color: #ddd;' +
            '}' +

            '#mouseflow label.mf-radio,' +
            '#mouseflow label.mf-checkbox {' +
                'cursor: pointer;' +
                'display: block;' +
            '}' +

            '#mouseflow input[type="radio"],' +
            '#mouseflow input[type="checkbox"] {' +
                'position: fixed;' +
                'left: 0;' +
                'top: 0;' +
                'opacity: 0;' +
                'z-index: -1;' +
            '}' +

            '#mouseflow .mf-radio .mf-fake-input,' +
            '#mouseflow .mf-radio .mf-fake-label,' +
            '#mouseflow .mf-checkbox .mf-fake-input,' +
            '#mouseflow .mf-checkbox .mf-fake-label {' +
                'display: inline-block;' +
                'vertical-align: middle;' +
            '}' +

            '#mouseflow .mf-radio .mf-fake-label,' +
            '#mouseflow .mf-checkbox .mf-fake-label {' +
                'width: calc(100% - 35px);' +
                'line-height: 17px;' +
            '}' +

            '#mouseflow .mf-radio .mf-fake-input {' +
                'width: 22px;' +
                'height: 22px;' +
                'border: 2px solid #e6e6e6;' +
                'background: #f8f8f8;' +
                'position: relative;' +
                'margin-right: 9px;' +
                'border-radius: 50%;' +
            '}' +

            '#mouseflow .mf-checkbox .mf-fake-input {' +
                'width: 21px;' +
                'height: 21px;' +
                'border: 2px solid #e6e6e6;' +
                'background: #f8f8f8;' +
                'position: relative;' +
                'margin-right: 9px;' +
                'border-radius:5px;' +
            '}' +

            '#mouseflow .mf-radio .mf-fake-input:before {' +
                'top: 3px;' +
                'right: 3px;' +
                'bottom: 3px;' +
                'left: 3px;' +
                'border-radius: 100%;' +
            '}' +

            '#mouseflow .mf-checkbox .mf-fake-input:before {' +
                'top: 1px;' +
                'right: 1px;' +
                'bottom: 1px;' +
                'left: 1px;' +
                'border-radius: 4px;' +
            '}' +

            '#mouseflow .mf-checkbox input[type="checkbox"] + .mf-fake-input:after {' +
                'content: "\\2714";' +
                'display: inline;' +
                'position: absolute;' +
                'bottom: 0;' +
                'left: 3px;' +
                'opacity: 0;' +
            '}' +

            '#mouseflow .mf-radio input[type="checkbox"] + .mf-fake-input:before,' +
            '#mouseflow .mf-checkbox input[type="checkbox"] + .mf-fake-input:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'opacity: 0;' +
                'transition: opacity .3s linear;' +
            '}' +

            '#mouseflow .mf-radio input[type="checkbox"]:checked + .mf-fake-input:before,' +
            '#mouseflow .mf-checkbox input[type="checkbox"]:checked + .mf-fake-input:before,' +
            '#mouseflow .mf-checkbox input[type="checkbox"]:checked + .mf-fake-input:after {' +
                'opacity: 1;' +
            '}' +

            '#mouseflow .mf-checkbox input[type="checkbox"] + .mf-fake-input:hover {' +
                'border-color: #ddd;' +
            '}' +

            '#mouseflow textarea {' +
                'min-height: 155px;' +
                'height: 155px;' +
                'max-height: 280px;' +
                'line-height: 19.6px;' +
            '}' +

            '#mouseflow textarea,' +
            '#mouseflow input[type="text"] {' +
                '-webkit-appearance: none;' +
                'box-sizing: border-box;' +
                'width: 100%;' +
                'border: 1px solid #e6e6e6;' +
                'border-radius: 6px;' +
                'background: #fff;' +
                'resize: none;' +
                'padding: 6px 10px;' +
                'outline: none;' +
            '}' +

            '#mouseflow textarea.error,' +
            '#mouseflow input[type="text"].error,' +
            '#mouseflow input[type="checkbox"].error + .mf-fake-input {' +
                'border-color: #c66;' +
            '}' +

            '#mouseflow input[type="checkbox"].error + .mf-fake-input:hover {' +
                'border-color: #a66;' +
            '}' +

            '#mouseflow .mf-widget-footer {' +
                'padding: 8px 10px;' +
                'text-align: center;' +
                'color: #808080;' +
                'background: #fff;' +
                'position: relative;' +
                'transition: opacity .2s ease-in-out;' +
            '}' +

            '#mouseflow .mf-widget-welcome-start {' +
                'padding: 8px 10px;' +
                'text-align: center;' +
                'color: #808080;' +
                'background: #fff;' +
                'position: relative;' +
            '}' +

            '#mouseflow .mf-widget-powered {' +
                'padding: 4px 10px 0;' +
                'color: #999;' +
                'font-size: 12px;' +
                'background: #fff;' +
                'display: flex;' +
                'flex-direction: column;' +
                'justify-content: center;' +
                'align-items: center;' +
                'transition: opacity .2s ease-in-out;' +
            '}' +

            '#mouseflow .mf-widget-footer + .mf-widget-powered {' +
                'padding: 0 10px 4px;' +
            '}' +

            '#mouseflow .mf-widget-powered__title {' +
                'margin-bottom: 4px;' +
            '}' +

            '#mouseflow .mf-widget-powered__notice {' +
                'font-size: 10px;' +
                'text-align: center;' +
                'margin-bottom: 4px;' +
            '}' +

            '#mouseflow .mf-btn-widget {' +
                'width: 100%;' +
                'height: 38px;' +
                'color: #fff;' +
                'background: #4cb377;' +
                'border: none;' +
                'border-radius: 6px;' +
                'overflow: hidden;' +
                'position: relative;' +
                'z-index: 1;' +
                'cursor: pointer;' +
                'display: block;' +
                'padding: 10px;' +
                'font-family: inherit;' +
                'font-weight: bold;' +
                'text-align: center;' +
                'outline: none;' +
            '}' +

            '#mouseflow .mf-btn-widget:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: 0;' +
                'left: 0;' +
                'right: 0;' +
                'bottom: 0;' +
                'background: rgba(0, 0, 0, .3);' +
                'opacity: 0;' +
                'z-index: -1;' +
                'transition: all .3s linear;' +
            '}' +

            '#mouseflow .mf-btn-widget:hover {' +
                'text-decoration: none;' +
            '}' +

            '#mouseflow .mf-btn-widget:hover:before {' +
                'opacity: 1;' +
            '}' +

            '#mouseflow .mf-btn-widget:disabled:before {' +
                'background: rgba(255, 255, 255, .5);' +
                'opacity: 1;' +
            '}' +

            '#mouseflow .mf-thanks-holder {' +
                'text-align: center;' +
                'padding: 25px 10px 0;' +
                'background: #fff;' +
            '}' +

            '#mouseflow .mf-step--welcome .mf-widget-content {' +
                'padding: 0 10px 10px' +
            '}' +

            '#mouseflow .mf-step-thanks .mf-widget-content {' +
                'padding: 0 10px 27px;' +
                'text-align: center;' +
                'line-height: 17px;' +
                'max-height: 470px;' +
            '}' +

            '#mouseflow .mf-step-thanks .mf-widget-footer {' +
                'border: none;' +
                'padding: 0 0 10px;' +
            '}' +

            '#mouseflow .mf-widget-footer:before {' +
                'content: "";' +
                'position: absolute;' +
                'top: -1rem;' +
                'left: 0;' +
                'width: calc(100% - 5px);' +
                'height: 1rem;' +
                'background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%);' +
            '}' +

            '#mouseflow .mf-icon-checked {' +
                'display: inline-block;' +
                'width: 1em;' +
                'height: 1em;' +
                'font-size: 50px;' +
                'margin: 0 0 15px;' +
            '}' +

            '#mouseflow .mf-widget-container {' +
                'background: #fff;' +
                'transition: opacity .2s ease-in-out;' +
                'overflow: auto;' +
            '}' +

            '#mouseflow .mf-widget-container::-webkit-scrollbar {' +
                'width: 5px;' +
            '}' +

            '#mouseflow .mf-widget-container::-webkit-scrollbar-track {' +
                'background: #E4E9F2;' +
            '}' +

            '#mouseflow .mf-widget-container::-webkit-scrollbar-thumb {' +
                'background: #6B7494;' +
            '}' +

            '#mouseflow .mf-widget-container::-webkit-scrollbar-thumb:hover {' +
                'background: #46506E;' +
            '}' +

            '#mouseflow .mf-widget-content a {' +
                'text-decoration: underline;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-step {' +
                'box-shadow: none;' +
                'overflow: visible;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-header {' +
                'overflow: hidden;' +
                'position: relative;' +
                'z-index: 1;' +
                'border-radius: 10px;' +
                'box-shadow: 0 0 15px rgba(0, 0, 0, .35);' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-header:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: 0;' +
                'left: 0;' +
                'right: 0;' +
                'bottom: 0;' +
                'background: rgba(0, 0, 0, .3);' +
                'opacity: 0;' +
                'z-index: -1;' +
                'transition: opacity .3s linear;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-header:hover:before {' +
                'opacity: 1;' +
            '}' +

            '#mouseflow .bottomRight.mf-widget-closed .mf-widget-header,' +
            '#mouseflow .bottomLeft.mf-widget-closed .mf-widget-header {' +
                'bottom: 0;' +
                'position: absolute;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-btn-cross {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-btn-arrow {' +
                'display: block;' +
                'transform: rotate(90deg) scale(1.5) translate(40%, -2px);' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-btn-arrow:before {' +
                'content: "";' +
                'display: inline;' +
                'position: absolute;' +
                'top: -12px;' +
                'left: -20px;' +
                'right: -20px;' +
                'bottom: -180px;' +
                'display: block;' +
            '}' +

            '#mouseflow .mf-area-block {' +
                'padding: 14px 10px 2px;' +
                'display: flex;' +
                'justify-content: center;' +
            '}' +

            '#mouseflow .mf-area-block .mf-fake-label {' +
                'background-color: #ddd;' +
                'margin: 2px;' +
                'cursor: pointer;' +
                'padding: 6px 1px;' +
                'border-radius: 5px;' +
                'min-width: 21px;' +
                'display: block;' +
                'text-align: center;' +
            '}' +

            '#mouseflow .mf-area-block label:first-of-type .mf-fake-label {' +
                'margin-left: 0;' +
            '}' +

            '#mouseflow .mf-area-block label:last-of-type .mf-fake-label {' +
                'margin-right: 0;' +
            '}' +

            '#mouseflow .mf-desc-block {' +
                'padding: 4px 0px 0px;' +
                'display: flex;' +
                'justify-content: space-between;' +
            '}' +

            '#mouseflow .mf-desc-label {' +
                'padding: 5px 10px 12px;' +
                'font-size: 11px;' +
                'flex: 1;' +
            '}' +

            '#mouseflow .mf-desc-label--right {' +
                'text-align: right;' +
            '}' +

            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-container,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-footer,' +
            '#mouseflow .mf-feedback.mf-widget-closed .mf-widget-powered {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-nps-numeric,' +
            '#mouseflow .mf-rating-numeric {' +
                'padding: 25px 10px 2px;' +
                'display: flex;' +
                'justify-content: center;' +
            '}' +

            '#mouseflow .mf-nps-numeric input[type="radio"],' +
            '#mouseflow .mf-rating-numeric input[type="radio"] {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-nps-list .mf-fake-label {' +
                'cursor: pointer;' +
                'padding: 4px 2px 2px 2px;' +
                'border-radius: 5px;' +
                'background: none;' +
                'margin: 2px 1px;' +
            '}' +
        
            '#mouseflow .mf-nps-list .mf-fake-label svg {' +
                'max-height: 25px;' +
                'max-width: 19px;' +
            '}' +

            '#mouseflow .mf-nps-list input[type="radio"] {' +
                'display: none;' +
            '}' +

            '#mouseflow .mf-consent-block {' +
                'padding: 5px 10px 0px 12px;' +
            '}' +

            '#mouseflow .mf-link-powered {' +
                'text-decoration: underline;' +
            '}' +

            '#mouseflow .mf-link-powered--no-underline,' +
            '#mouseflow .mf-link-powered--no-underline:hover {' +
                'text-decoration: none;' +
                'color: #08163C;' +
            '}' +

            '@keyframes fadeIn {' +
                '0% {' +
                    'opacity: 0;' +
                '}' +

                '100% {' +
                    'opacity: 1;' +
                '}' +
            '}' +

            '@keyframes fadeOut {' +
                '0% {' +
                    'visibility: visible;' +
                    'opacity: 1;' +
                '}' +

                '100% {' +
                    'visibility: hidden;' +
                    'opacity: 0;' +
                '}' +
            '}'
        );
    }

    var _i18n = {
        en: {
            _footerPoweredBy: 'Powered by',
            _footerPrivacyPolicy: 'By responding to this survey, you agree to {0} processing and monitoring your responses.',
        },
        de: {
            _footerPoweredBy: 'Angetrieben von',
            _footerPrivacyPolicy: 'Durch die Beantwortung dieser Umfrage stimmen Sie {0} der Verarbeitung und Überwachung Ihrer Antworten zu.'
        },
        fr: {
            _footerPoweredBy: 'Alimenté par',
            _footerPrivacyPolicy: 'En répondant à cette enquête, vous acceptez que {0} traite et surveille vos réponses.'
        },
        ja: {
            _footerPoweredBy: '提供',
            _footerPrivacyPolicy: 'このアンケートに回答すると、 {0}の回答の処理およびモニタリングに同意したことになります'
        },
        es: {
            _footerPoweredBy: 'Desarrollado por',
            _footerPrivacyPolicy: 'Al responder a esta encuesta, acepta que {0} procese y controle sus respuestas.'
        }
    };

    

    this._start = _start;
    this._stop = _stop;
    this._activateFeedback = _activateFeedback;
    this._triggerEvent = _triggerEvent;
    this._getPreview = _getPreview;
    this._showStep = _showStep;
}

// For testing purposes only. Legacy code is loaded after this file and will overwrite the FeedbackWidget object.
var _FeedbackWidgetNew = _FeedbackWidget;


        var _rootElement = new _RootElement(window);
        var _urlFilter = new _UrlFilter(_config, _mergeUrls, _pageIdentifiers);
        var _pageMatcher = (typeof _PageMatcher === 'function')
            ? new _PageMatcher(_config, _helper)
            : {
                _matchesPageRule : function() {}
            };

        var _feedbackWidget = (typeof _FeedbackWidget === 'function')
            ? new _FeedbackWidget(window, _config, _rootElement, _timer, _helper, _pageMatcher, _eventListener, _sessionStorage, _log)
            : {
                _start: function() { },
                _stop: function() { },
                _activateFeedback: function() { },
                _getHtml: function() { },
                _triggerEvent: function() { }
            };

        var _domMutationDetector = (typeof _DomMutationDetector === 'function')
            ? new _DomMutationDetector(_native, _config)
            : {
                _isDuplicate: function() {}
            };

        var _privacyTool = new _PrivacyTool(window, _rootElement, _native, _timer, _helper, _eventListener, _localStorage, _config);
        var _liveHeatmaps = new _LiveHeatmaps(window, _config, _rootElement, _helper, _eventListener, _urlFilter, _localStorage);
        var _taggerTool = new _TaggerTool(window, _rootElement, _timer, _helper, _eventListener, _config);

        function _undefined() { return undefined }
        function _null() { return null }
        function _false() { return false }

        var shouldRecord = false;
        if (_config.privacyToolEnabled) {
            _privacyTool._start(_appUrl, _config._websiteId, _config._cssSelectorBlacklist, _config._cssSelectorWhitelist, _config._cssSelectorTracked, _log);
        } else if (_config.liveHeatmapsEnabled) {
            var _sideload;
            if (_config.taggerToolEnabled) {
                _sideload = function (_callback) {
                    _taggerTool._start(_log, _appUrl, true, _callback);
                };
            }
            _liveHeatmaps._start(_config._websiteId, _log, _appUrl, _sideload);
        } else if (_config.taggerToolEnabled) {
            _taggerTool._start(_log, _appUrl);
        } else if (typeof _RecordingScript === 'function') {
            window.mouseflow = new _RecordingScript(window, Math, _native, _config, _timer, _helper,
                _eventListener, _urlFilter, _pageMatcher, _localStorage, _sessionStorage, _feedbackWidget,
                _domMutationDetector, _log, _spa);
            shouldRecord = true;
        }

        if (!shouldRecord) {
            window.mouseflow = {
                start: _undefined,
                stop: function() {
                    if (_config.privacyToolEnabled)
                        _privacyTool._stop();
                    else if (_config.liveHeatmapsEnabled)
                        _liveHeatmaps._stop();
                },
                newPageView: function(_path, _location) {
                    _config._resetLocation(_path, _location);

                    if (_config.liveHeatmapsEnabled)
                        _liveHeatmaps._updateHeatmap();
                },
                stopSession: _undefined,
                getSessionId: _null,
                getPageViewId: _null,
                tag: _undefined,
                star: _undefined,
                setVariable: _undefined,
                identify: _undefined,
                formSubmitAttempt: _undefined,
                formSubmitSuccess: _undefined,
                formSubmitFailure: _undefined,
                addFriction: _undefined,
                isRecording: _false,
                isReturningUser: _false,
                activateFeedback: _undefined,
                proxyAttachShadow: _undefined,
                recordingRate: null,
                version: null
            };

            _spa.proxyPushState(window.mouseflow.newPageView);
        }

        window.mouseflow.websiteId = _config._websiteId;
        window.mouseflow.gdprEnabled = _config.gdprEnabled;
        window.mouseflow.updateHeatmap = _liveHeatmaps._updateHeatmap;
        window.mouseflow.config = function() {
            return arguments.length === 1
                ? _config[arguments[0]]
                : _config._setConfig.apply(_config, arguments);
        };
        window.mouseflow.debug = function() {
            _config.debug = !_config.debug;
            console.log('MF: Debugging ' + (_config.debug ? 'enabled' : 'disabled'));
        };
    })();
}
